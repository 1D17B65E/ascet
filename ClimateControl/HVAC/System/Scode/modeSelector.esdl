// //
// Copyright 2009-2015 ETAS
// ESDL file generated at Thu Jul 09 15:06:23 CEST 2015 by ETAS SCODE Tool V1.5
// Source: C:/Projects/GFA/work/01_HVAC_Applicaion/01_SCODE/Export_ESDL

// Generated by code generation. Do not edit!

package System.Scode;

type modeSelectorSMStates is enum {
	ET_Controlled_Heating,
	ET_Controlled_Cooling,
	ET_Uncontrolled,
	ET_System_Off
};

class modeSelector {

	ET_Request_VentilationEnum ET_Request_Ventilation = ET_Request_VentilationEnum.ET_Off;
	ET_Request_TemperatureEnum ET_Request_Temperature = ET_Request_TemperatureEnum.ET_Above_Outside;
	ModesEnum currentMode = ModesEnum.ET_System_Off;

	void executeStatemachine() triggers modeSelectorSM;

	public void execute(ET_Request_VentilationEnum ventilationRequest, ET_Request_TemperatureEnum temperatureRequest) {

		ET_Request_Ventilation = ventilationRequest;
		ET_Request_Temperature = temperatureRequest;
		executeStatemachine();

	} // execute

	@no_side_effect
	boolean ET_Switch_Off() {
		return((ET_Request_Ventilation == ET_Request_VentilationEnum.ET_Off));
	} // ET_Switch_Off()

	@no_side_effect
	boolean ET_Maximum_Ventilation() {
		return((ET_Request_Ventilation == ET_Request_VentilationEnum.ET_Max));
	} // ET_Maximum_Ventilation()

	@no_side_effect
	boolean ET_Cooling_Required() {
		return((ET_Request_Ventilation == ET_Request_VentilationEnum.ET_Automatic) && (ET_Request_Temperature == ET_Request_TemperatureEnum.ET_Below_Outside));
	} // ET_Cooling_Required()

	@no_side_effect
	boolean ET_Heating_Required() {
		return((ET_Request_Ventilation == ET_Request_VentilationEnum.ET_Automatic) && (ET_Request_Temperature == ET_Request_TemperatureEnum.ET_Above_Outside));
	} // ET_Heating_Required()

	@no_side_effect
	public ModesEnum getCurrentMode() {
		return currentMode;
	}

	statemachine modeSelectorSM using modeSelectorSMStates {
		start ET_System_Off;

		state ET_Controlled_Heating {
			entry {
				currentMode = ModesEnum.ET_Controlled_Heating;
			}
			transition(ET_Cooling_Required()) to ET_Controlled_Cooling;
			transition(ET_Maximum_Ventilation()) to ET_Uncontrolled;
			transition(ET_Switch_Off()) to ET_System_Off;
		}

		state ET_Controlled_Cooling {
			entry {
				currentMode = ModesEnum.ET_Controlled_Cooling;
			}
			transition(ET_Heating_Required()) to ET_Controlled_Heating;
			transition(ET_Maximum_Ventilation()) to ET_Uncontrolled;
			transition(ET_Switch_Off()) to ET_System_Off;
		}

		state ET_Uncontrolled {
			entry {
				currentMode = ModesEnum.ET_Uncontrolled;
			}
			transition(ET_Heating_Required()) to ET_Controlled_Heating;
			transition(ET_Cooling_Required()) to ET_Controlled_Cooling;
			transition(ET_Switch_Off()) to ET_System_Off;
		}

		state ET_System_Off {
			entry {
				currentMode = ModesEnum.ET_System_Off;
			}
			transition(ET_Heating_Required()) to ET_Controlled_Heating;
			transition(ET_Cooling_Required()) to ET_Controlled_Cooling;
			transition(ET_Maximum_Ventilation()) to ET_Uncontrolled;
		}
	} // modeSelectorSM

} // modeSelector

