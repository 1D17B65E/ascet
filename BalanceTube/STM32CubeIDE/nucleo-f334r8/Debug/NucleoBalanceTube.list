
NucleoBalanceTube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f14  08008f14  00020538  2**0
                  CONTENTS
  4 .ARM          00000000  08008f14  08008f14  00020538  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f14  08008f14  00020538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000538  20000000  08008f1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020538  2**0
                  CONTENTS
 10 .bss          00000a10  20000538  20000538  00020538  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000f48  20000f48  00020538  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002cfa0  00000000  00000000  000205ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004fd2  00000000  00000000  0004d54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001752a  00000000  00000000  0005251d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001930  00000000  00000000  00069a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000153b  00000000  00000000  0006b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026609  00000000  00000000  0006c8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ffc7  00000000  00000000  00092ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d6720  00000000  00000000  000c2e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000509c  00000000  00000000  001995a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0019e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000538 	.word	0x20000538
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c88 	.word	0x08008c88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000053c 	.word	0x2000053c
 80001c4:	08008c88 	.word	0x08008c88

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <initializeBalanceTube>:

volatile uint8_t doStep = 0;
VL53L0X_Dev_t Dev = { .I2cHandle = &hi2c1, .I2cDevAddr = PROXIMITY_I2C_ADDRESS };


void initializeBalanceTube() {
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	b09a      	sub	sp, #104	; 0x68
	HAL_TIM_Base_Start_IT(&htim6);
 8000ba8:	4826      	ldr	r0, [pc, #152]	; (8000c44 <initializeBalanceTube+0xa0>)
 8000baa:	f005 ff7f 	bl	8006aac <HAL_TIM_Base_Start_IT>
	VL53L0X_StartMeasurement(&Dev);
}

void initializeHandDistanceSensor() {
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000bae:	4c26      	ldr	r4, [pc, #152]	; (8000c48 <initializeBalanceTube+0xa4>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f004 f883 	bl	8004cbe <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f003 ff77 	bl	8004aac <HAL_ADC_Start>
}

/////////////////////////////////////////////////////////////////////////////////

static void VL53L0X_PROXIMITY_Init(void) {
	uint16_t vl53l0x_id = 0;
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f8ad 1002 	strh.w	r1, [sp, #2]
	VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

	/* Initialize IO interface */
	memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8000bc4:	2263      	movs	r2, #99	; 0x63
 8000bc6:	a801      	add	r0, sp, #4
 8000bc8:	f007 fd92 	bl	80086f0 <memset>

	if (VL53L0X_ERROR_NONE
			== VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo)) {
 8000bcc:	a901      	add	r1, sp, #4
 8000bce:	481f      	ldr	r0, [pc, #124]	; (8000c4c <initializeBalanceTube+0xa8>)
 8000bd0:	f000 feb2 	bl	8001938 <VL53L0X_GetDeviceInfo>
	if (VL53L0X_ERROR_NONE
 8000bd4:	b9f8      	cbnz	r0, 8000c16 <initializeBalanceTube+0x72>
		if (VL53L0X_ERROR_NONE
				== VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8000bd6:	f10d 0202 	add.w	r2, sp, #2
 8000bda:	21c0      	movs	r1, #192	; 0xc0
 8000bdc:	481b      	ldr	r0, [pc, #108]	; (8000c4c <initializeBalanceTube+0xa8>)
 8000bde:	f003 fc25 	bl	800442c <VL53L0X_RdWord>
		if (VL53L0X_ERROR_NONE
 8000be2:	b9a0      	cbnz	r0, 8000c0e <initializeBalanceTube+0x6a>
						(uint16_t*) &vl53l0x_id)) {
			if (vl53l0x_id == VL53L0X_ID) {
 8000be4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8000be8:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d115      	bne.n	8000c1c <initializeBalanceTube+0x78>
				if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev)) {
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <initializeBalanceTube+0xa8>)
 8000bf2:	f001 f8f1 	bl	8001dd8 <VL53L0X_DataInit>
 8000bf6:	b930      	cbnz	r0, 8000c06 <initializeBalanceTube+0x62>
					Dev.Present = 1;
 8000bf8:	4814      	ldr	r0, [pc, #80]	; (8000c4c <initializeBalanceTube+0xa8>)
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
					SetupSingleShot(&Dev);
 8000c00:	f003 fca0 	bl	8004544 <SetupSingleShot>
 8000c04:	e00a      	b.n	8000c1c <initializeBalanceTube+0x78>
				} else {
					printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <initializeBalanceTube+0xac>)
 8000c08:	f007 fc92 	bl	8008530 <puts>
 8000c0c:	e006      	b.n	8000c1c <initializeBalanceTube+0x78>
				}
			}
		} else {
			printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <initializeBalanceTube+0xb0>)
 8000c10:	f007 fc8e 	bl	8008530 <puts>
 8000c14:	e002      	b.n	8000c1c <initializeBalanceTube+0x78>
		}
	} else {
		printf("VL53L0X Time of Flight Failed to get infos!\n");
 8000c16:	4810      	ldr	r0, [pc, #64]	; (8000c58 <initializeBalanceTube+0xb4>)
 8000c18:	f007 fc8a 	bl	8008530 <puts>
	VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <initializeBalanceTube+0xa8>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4620      	mov	r0, r4
 8000c22:	f000 fe8d 	bl	8001940 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(&Dev);
 8000c26:	4620      	mov	r0, r4
 8000c28:	f001 faa6 	bl	8002178 <VL53L0X_StartMeasurement>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <initializeBalanceTube+0xb8>)
 8000c30:	f006 fa92 	bl	8007158 <HAL_TIM_PWM_Start>
	seg7_displayOn();
 8000c34:	f000 fa26 	bl	8001084 <seg7_displayOn>
	seg7_displayIntWithPoint(0000, 2);
 8000c38:	2102      	movs	r1, #2
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 fa5a 	bl	80010f4 <seg7_displayIntWithPoint>
}
 8000c40:	b01a      	add	sp, #104	; 0x68
 8000c42:	bd10      	pop	{r4, pc}
 8000c44:	20000ca4 	.word	0x20000ca4
 8000c48:	20000b24 	.word	0x20000b24
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	08008ca0 	.word	0x08008ca0
 8000c54:	08008cd0 	.word	0x08008cd0
 8000c58:	08008d00 	.word	0x08008d00
 8000c5c:	20000c0c 	.word	0x20000c0c

08000c60 <runBalanceTube>:
	if (doStep == 1) {
 8000c60:	4bb5      	ldr	r3, [pc, #724]	; (8000f38 <runBalanceTube+0x2d8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d000      	beq.n	8000c6c <runBalanceTube+0xc>
 8000c6a:	4770      	bx	lr
void runBalanceTube() {
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24

	static double buf[BUF_SIZE] = { 0.0 };
	static uint8_t i = 0;


	HAL_ADC_PollForConversion(&hadc1, 10);
 8000c70:	4cb2      	ldr	r4, [pc, #712]	; (8000f3c <runBalanceTube+0x2dc>)
 8000c72:	210a      	movs	r1, #10
 8000c74:	4620      	mov	r0, r4
 8000c76:	f003 ff95 	bl	8004ba4 <HAL_ADC_PollForConversion>
//	for (uint8_t j = 0; j < BUF_SIZE; j++) {
//		sum += buf[j];
//	}
//	double distance_hand = (sum / ((double) BUF_SIZE));

	double distance_hand = (double) HAL_ADC_GetValue(&hadc1);
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f004 f81c 	bl	8004cb8 <HAL_ADC_GetValue>

	if (distance_hand >= max_adc) {
 8000c80:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000c84:	d220      	bcs.n	8000cc8 <runBalanceTube+0x68>
		distance_hand = max_adc;
	}
	if (distance_hand <= min_adc) {
 8000c86:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8000c8a:	d803      	bhi.n	8000c94 <runBalanceTube+0x34>

	if (model_Signals_handPosition >= 1.0) {
		model_Signals_handPosition = 1.0;
	}
	if (model_Signals_handPosition <= 0.0) {
		model_Signals_handPosition = 0.0;
 8000c8c:	4bac      	ldr	r3, [pc, #688]	; (8000f40 <runBalanceTube+0x2e0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e01d      	b.n	8000cd0 <runBalanceTube+0x70>
	double distance_hand = (double) HAL_ADC_GetValue(&hadc1);
 8000c94:	f7ff fbda 	bl	800044c <__aeabi_ui2d>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4baa      	ldr	r3, [pc, #680]	; (8000f44 <runBalanceTube+0x2e4>)
 8000c9c:	f7ff fa98 	bl	80001d0 <__aeabi_dsub>
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4ba9      	ldr	r3, [pc, #676]	; (8000f48 <runBalanceTube+0x2e8>)
 8000ca4:	f7ff fd76 	bl	8000794 <__aeabi_ddiv>
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2300      	movs	r3, #0
 8000cac:	f7ff fa92 	bl	80001d4 <__adddf3>
	model_Signals_handPosition = map(distance_hand, min_adc, max_adc, 0.0, 1.0);
 8000cb0:	f7ff ff28 	bl	8000b04 <__aeabi_d2f>
 8000cb4:	ee07 0a90 	vmov	s15, r0
	if (model_Signals_handPosition >= 1.0) {
 8000cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	f2c0 80c2 	blt.w	8000e4c <runBalanceTube+0x1ec>
		model_Signals_handPosition = 1.0;
 8000cc8:	4b9d      	ldr	r3, [pc, #628]	; (8000f40 <runBalanceTube+0x2e0>)
 8000cca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000cce:	601a      	str	r2, [r3, #0]
	VL53L0X_GetRangingMeasurementData(&Dev, &RangingMeasurementData);
 8000cd0:	a901      	add	r1, sp, #4
 8000cd2:	489e      	ldr	r0, [pc, #632]	; (8000f4c <runBalanceTube+0x2ec>)
 8000cd4:	f001 f946 	bl	8001f64 <VL53L0X_GetRangingMeasurementData>
	buf[i] = (double) distance_ball;
 8000cd8:	4b9d      	ldr	r3, [pc, #628]	; (8000f50 <runBalanceTube+0x2f0>)
 8000cda:	781c      	ldrb	r4, [r3, #0]
 8000cdc:	4d9d      	ldr	r5, [pc, #628]	; (8000f54 <runBalanceTube+0x2f4>)
 8000cde:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8000ce2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8000ce6:	f7ff fbb1 	bl	800044c <__aeabi_ui2d>
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
	i++;
 8000cee:	1c63      	adds	r3, r4, #1
 8000cf0:	b2db      	uxtb	r3, r3
	if (i >= BUF_SIZE) {
 8000cf2:	2b1f      	cmp	r3, #31
 8000cf4:	f200 80b3 	bhi.w	8000e5e <runBalanceTube+0x1fe>
	i++;
 8000cf8:	4a95      	ldr	r2, [pc, #596]	; (8000f50 <runBalanceTube+0x2f0>)
 8000cfa:	7013      	strb	r3, [r2, #0]
	for (uint8_t j = 0; j < BUF_SIZE; j++) {
 8000cfc:	4c95      	ldr	r4, [pc, #596]	; (8000f54 <runBalanceTube+0x2f4>)
 8000cfe:	f504 7580 	add.w	r5, r4, #256	; 0x100
	double sum = 0.0;
 8000d02:	2000      	movs	r0, #0
 8000d04:	2100      	movs	r1, #0
		sum += buf[j];
 8000d06:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000d0a:	f7ff fa63 	bl	80001d4 <__adddf3>
	for (uint8_t j = 0; j < BUF_SIZE; j++) {
 8000d0e:	42ac      	cmp	r4, r5
 8000d10:	d1f9      	bne.n	8000d06 <runBalanceTube+0xa6>
	double dist = (sum / ((double) BUF_SIZE));
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b90      	ldr	r3, [pc, #576]	; (8000f58 <runBalanceTube+0x2f8>)
 8000d16:	f7ff fc13 	bl	8000540 <__aeabi_dmul>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	460d      	mov	r5, r1
	if (dist >= ball_pos_mid) {
 8000d1e:	a37c      	add	r3, pc, #496	; (adr r3, 8000f10 <runBalanceTube+0x2b0>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fe92 	bl	8000a4c <__aeabi_dcmpge>
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f000 809c 	beq.w	8000e66 <runBalanceTube+0x206>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d2e:	a37a      	add	r3, pc, #488	; (adr r3, 8000f18 <runBalanceTube+0x2b8>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	4620      	mov	r0, r4
 8000d36:	4629      	mov	r1, r5
 8000d38:	f7ff fa4a 	bl	80001d0 <__aeabi_dsub>
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4b87      	ldr	r3, [pc, #540]	; (8000f5c <runBalanceTube+0x2fc>)
 8000d40:	f7ff fbfe 	bl	8000540 <__aeabi_dmul>
 8000d44:	a376      	add	r3, pc, #472	; (adr r3, 8000f20 <runBalanceTube+0x2c0>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	f7ff fd23 	bl	8000794 <__aeabi_ddiv>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2300      	movs	r3, #0
 8000d52:	f7ff fa3f 	bl	80001d4 <__adddf3>
		model_Signals_ballPosition = map(dist, ball_pos_start, ball_pos_mid,
 8000d56:	f7ff fed5 	bl	8000b04 <__aeabi_d2f>
 8000d5a:	ee07 0a90 	vmov	s15, r0
 8000d5e:	4b80      	ldr	r3, [pc, #512]	; (8000f60 <runBalanceTube+0x300>)
 8000d60:	edc3 7a00 	vstr	s15, [r3]
	if (model_Signals_ballPosition >= 1.0) {
 8000d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	f2c0 8091 	blt.w	8000e96 <runBalanceTube+0x236>
		model_Signals_ballPosition = 1.0;
 8000d74:	ed83 7a00 	vstr	s14, [r3]
	model_Signals_autoModeButton = !HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	487a      	ldr	r0, [pc, #488]	; (8000f64 <runBalanceTube+0x304>)
 8000d7c:	f004 fc8c 	bl	8005698 <HAL_GPIO_ReadPin>
 8000d80:	fab0 f380 	clz	r3, r0
 8000d84:	095b      	lsrs	r3, r3, #5
 8000d86:	4a78      	ldr	r2, [pc, #480]	; (8000f68 <runBalanceTube+0x308>)
 8000d88:	7013      	strb	r3, [r2, #0]
	model_Signals_startGameButton = !HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f004 fc81 	bl	8005698 <HAL_GPIO_ReadPin>
 8000d96:	fab0 f380 	clz	r3, r0
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	4a73      	ldr	r2, [pc, #460]	; (8000f6c <runBalanceTube+0x30c>)
 8000d9e:	7013      	strb	r3, [r2, #0]
		Task_5ms();
 8000da0:	f006 ff62 	bl	8007c68 <Task_5ms>
	time_us = map(model_Signals_servoPosition, 0.0, 1.0, min_us, max_us);
 8000da4:	4b72      	ldr	r3, [pc, #456]	; (8000f70 <runBalanceTube+0x310>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	f7ff fb72 	bl	8000490 <__aeabi_f2d>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000dac:	a358      	add	r3, pc, #352	; (adr r3, 8000f10 <runBalanceTube+0x2b0>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fbc5 	bl	8000540 <__aeabi_dmul>
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <runBalanceTube+0x314>)
 8000dba:	f7ff fa0b 	bl	80001d4 <__adddf3>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
	time_us = map(model_Signals_servoPosition, 0.0, 1.0, min_us, max_us);
 8000dc2:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <runBalanceTube+0x318>)
 8000dc4:	e9c3 4500 	strd	r4, r5, [r3]
	if (time_us >= max_us) {
 8000dc8:	a357      	add	r3, pc, #348	; (adr r3, 8000f28 <runBalanceTube+0x2c8>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fe3d 	bl	8000a4c <__aeabi_dcmpge>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d069      	beq.n	8000eaa <runBalanceTube+0x24a>
		time_us = max_us;
 8000dd6:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <runBalanceTube+0x318>)
 8000dd8:	a153      	add	r1, pc, #332	; (adr r1, 8000f28 <runBalanceTube+0x2c8>)
 8000dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dde:	e9c3 0100 	strd	r0, r1, [r3]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t ) (time_us * 3.2));
 8000de2:	4b66      	ldr	r3, [pc, #408]	; (8000f7c <runBalanceTube+0x31c>)
 8000de4:	681c      	ldr	r4, [r3, #0]
 8000de6:	a352      	add	r3, pc, #328	; (adr r3, 8000f30 <runBalanceTube+0x2d0>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	4962      	ldr	r1, [pc, #392]	; (8000f78 <runBalanceTube+0x318>)
 8000dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df2:	f7ff fba5 	bl	8000540 <__aeabi_dmul>
 8000df6:	f7ff fe65 	bl	8000ac4 <__aeabi_d2uiz>
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	63a0      	str	r0, [r4, #56]	; 0x38
	seg7_displayIntWithPoint((int) (model_Signals_score * 10.0), 2);
 8000dfe:	4b60      	ldr	r3, [pc, #384]	; (8000f80 <runBalanceTube+0x320>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f7ff fb45 	bl	8000490 <__aeabi_f2d>
 8000e06:	2200      	movs	r2, #0
 8000e08:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <runBalanceTube+0x324>)
 8000e0a:	f7ff fb99 	bl	8000540 <__aeabi_dmul>
 8000e0e:	f7ff fe31 	bl	8000a74 <__aeabi_d2iz>
 8000e12:	2102      	movs	r1, #2
 8000e14:	f000 f96e 	bl	80010f4 <seg7_displayIntWithPoint>
	for (int i = 0; i < NUM_PIXELS; i++) {
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <runBalanceTube+0x328>)
 8000e1a:	4f5c      	ldr	r7, [pc, #368]	; (8000f8c <runBalanceTube+0x32c>)
 8000e1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
	seg7_displayIntWithPoint((int) (model_Signals_score * 10.0), 2);
 8000e20:	463a      	mov	r2, r7
		pixel[i].color.r = model_Signals_ledRing[i].red;
 8000e22:	7899      	ldrb	r1, [r3, #2]
 8000e24:	7051      	strb	r1, [r2, #1]
		pixel[i].color.g = model_Signals_ledRing[i].green;
 8000e26:	7859      	ldrb	r1, [r3, #1]
 8000e28:	7091      	strb	r1, [r2, #2]
		pixel[i].color.b = model_Signals_ledRing[i].blue;
 8000e2a:	f813 1b03 	ldrb.w	r1, [r3], #3
 8000e2e:	f802 1b04 	strb.w	r1, [r2], #4
	for (int i = 0; i < NUM_PIXELS; i++) {
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d1f5      	bne.n	8000e22 <runBalanceTube+0x1c2>
	pBuff = dmaBuffer;
 8000e36:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <runBalanceTube+0x330>)
 8000e38:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <runBalanceTube+0x334>)
 8000e3a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_PIXELS; i++) {
 8000e3c:	f107 0e30 	add.w	lr, r7, #48	; 0x30
		for (j = 23; j >= 0; j--) {
 8000e40:	4855      	ldr	r0, [pc, #340]	; (8000f98 <runBalanceTube+0x338>)
 8000e42:	2617      	movs	r6, #23
				*pBuff = NEOPIXEL_ZERO;
 8000e44:	4619      	mov	r1, r3
 8000e46:	2519      	movs	r5, #25
				*pBuff = NEOPIXEL_ONE;
 8000e48:	2431      	movs	r4, #49	; 0x31
 8000e4a:	e03f      	b.n	8000ecc <runBalanceTube+0x26c>
	model_Signals_handPosition = map(distance_hand, min_adc, max_adc, 0.0, 1.0);
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <runBalanceTube+0x2e0>)
 8000e4e:	6018      	str	r0, [r3, #0]
	if (model_Signals_handPosition <= 0.0) {
 8000e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	f63f af3a 	bhi.w	8000cd0 <runBalanceTube+0x70>
 8000e5c:	e716      	b.n	8000c8c <runBalanceTube+0x2c>
		i = 0;
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <runBalanceTube+0x2f0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e74a      	b.n	8000cfc <runBalanceTube+0x9c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e66:	a32a      	add	r3, pc, #168	; (adr r3, 8000f10 <runBalanceTube+0x2b0>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	4629      	mov	r1, r5
 8000e70:	f7ff f9ae 	bl	80001d0 <__aeabi_dsub>
 8000e74:	2200      	movs	r2, #0
 8000e76:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <runBalanceTube+0x2fc>)
 8000e78:	f7ff fb62 	bl	8000540 <__aeabi_dmul>
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4b47      	ldr	r3, [pc, #284]	; (8000f9c <runBalanceTube+0x33c>)
 8000e80:	f7ff fc88 	bl	8000794 <__aeabi_ddiv>
 8000e84:	2200      	movs	r2, #0
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <runBalanceTube+0x2fc>)
 8000e88:	f7ff f9a4 	bl	80001d4 <__adddf3>
		model_Signals_ballPosition = map(dist, ball_pos_mid, ball_pos_end, 0.5,
 8000e8c:	f7ff fe3a 	bl	8000b04 <__aeabi_d2f>
 8000e90:	ee07 0a90 	vmov	s15, r0
 8000e94:	e763      	b.n	8000d5e <runBalanceTube+0xfe>
	if (model_Signals_ballPosition <= 0.0) {
 8000e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	f63f af6b 	bhi.w	8000d78 <runBalanceTube+0x118>
		model_Signals_ballPosition = 0.0;
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <runBalanceTube+0x300>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e766      	b.n	8000d78 <runBalanceTube+0x118>
	if (time_us <= min_us) {
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <runBalanceTube+0x314>)
 8000eae:	4620      	mov	r0, r4
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f7ff fdc1 	bl	8000a38 <__aeabi_dcmple>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d093      	beq.n	8000de2 <runBalanceTube+0x182>
		time_us = min_us;
 8000eba:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <runBalanceTube+0x318>)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	492d      	ldr	r1, [pc, #180]	; (8000f74 <runBalanceTube+0x314>)
 8000ec0:	e9c3 0100 	strd	r0, r1, [r3]
 8000ec4:	e78d      	b.n	8000de2 <runBalanceTube+0x182>
	for (int i = 0; i < NUM_PIXELS; i++) {
 8000ec6:	3704      	adds	r7, #4
 8000ec8:	4577      	cmp	r7, lr
 8000eca:	d012      	beq.n	8000ef2 <runBalanceTube+0x292>
		for (j = 23; j >= 0; j--) {
 8000ecc:	6006      	str	r6, [r0, #0]
 8000ece:	4633      	mov	r3, r6
			if ((pixel[i].data >> j) & 0x01) {
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	f012 0f01 	tst.w	r2, #1
				*pBuff = NEOPIXEL_ONE;
 8000ed8:	680b      	ldr	r3, [r1, #0]
 8000eda:	bf14      	ite	ne
 8000edc:	601c      	strne	r4, [r3, #0]
				*pBuff = NEOPIXEL_ZERO;
 8000ede:	601d      	streq	r5, [r3, #0]
			pBuff++;
 8000ee0:	680b      	ldr	r3, [r1, #0]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	600b      	str	r3, [r1, #0]
		for (j = 23; j >= 0; j--) {
 8000ee6:	6803      	ldr	r3, [r0, #0]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	6003      	str	r3, [r0, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	daef      	bge.n	8000ed0 <runBalanceTube+0x270>
 8000ef0:	e7e9      	b.n	8000ec6 <runBalanceTube+0x266>
	dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8000ef2:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <runBalanceTube+0x334>)
 8000ef4:	2400      	movs	r4, #0
 8000ef6:	f8c2 4480 	str.w	r4, [r2, #1152]	; 0x480
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 8000efa:	f240 1321 	movw	r3, #289	; 0x121
 8000efe:	4621      	mov	r1, r4
 8000f00:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <runBalanceTube+0x340>)
 8000f02:	f006 f9e7 	bl	80072d4 <HAL_TIM_PWM_Start_DMA>
		doStep = 0;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <runBalanceTube+0x2d8>)
 8000f08:	701c      	strb	r4, [r3, #0]
}
 8000f0a:	b009      	add	sp, #36	; 0x24
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	00000000 	.word	0x00000000
 8000f14:	4072c000 	.word	0x4072c000
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	407d6000 	.word	0x407d6000
 8000f20:	00000000 	.word	0x00000000
 8000f24:	c0654000 	.word	0xc0654000
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	409db000 	.word	0x409db000
 8000f30:	9999999a 	.word	0x9999999a
 8000f34:	40099999 	.word	0x40099999
 8000f38:	20000adc 	.word	0x20000adc
 8000f3c:	20000b24 	.word	0x20000b24
 8000f40:	20000dcc 	.word	0x20000dcc
 8000f44:	40890000 	.word	0x40890000
 8000f48:	4092c000 	.word	0x4092c000
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000add 	.word	0x20000add
 8000f54:	20000558 	.word	0x20000558
 8000f58:	3fa00000 	.word	0x3fa00000
 8000f5c:	3fe00000 	.word	0x3fe00000
 8000f60:	20000dc8 	.word	0x20000dc8
 8000f64:	48000800 	.word	0x48000800
 8000f68:	20000dc4 	.word	0x20000dc4
 8000f6c:	20000df8 	.word	0x20000df8
 8000f70:	200004d8 	.word	0x200004d8
 8000f74:	40990000 	.word	0x40990000
 8000f78:	20000188 	.word	0x20000188
 8000f7c:	20000c0c 	.word	0x20000c0c
 8000f80:	20000df4 	.word	0x20000df4
 8000f84:	40240000 	.word	0x40240000
 8000f88:	20000dd0 	.word	0x20000dd0
 8000f8c:	20000ae8 	.word	0x20000ae8
 8000f90:	20000ae4 	.word	0x20000ae4
 8000f94:	20000658 	.word	0x20000658
 8000f98:	20000ae0 	.word	0x20000ae0
 8000f9c:	c06e0000 	.word	0xc06e0000
 8000fa0:	20000c58 	.word	0x20000c58

08000fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
	}
}

/////////////////////////////////////////////////////////////////////////////////

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000fa4:	b508      	push	{r3, lr}
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f006 fb12 	bl	80075d0 <HAL_TIM_PWM_Stop_DMA>
}
 8000fac:	bd08      	pop	{r3, pc}
	...

08000fb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint32_t timer = 0;
	timer++;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
	if (timer >= 5) {
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d802      	bhi.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x10>
	timer++;
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4770      	bx	lr
		timer = 0;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		doStep = 1;
 8000fc6:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
	}
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000b18 	.word	0x20000b18
 8000fd4:	20000adc 	.word	0x20000adc

08000fd8 <_writeCmd>:
		HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, HT16K33_I2C_ADDR << 1, pData,2, HAL_MAX_DELAY);
	}
}

// sends given command per i2c
void _writeCmd(uint8_t cmd) {
 8000fd8:	b500      	push	{lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, HT16K33_I2C_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f10d 020f 	add.w	r2, sp, #15
 8000fec:	21e0      	movs	r1, #224	; 0xe0
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <_writeCmd+0x24>)
 8000ff0:	f004 fd70 	bl	8005ad4 <HAL_I2C_Master_Transmit>
}
 8000ff4:	b005      	add	sp, #20
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ffa:	bf00      	nop
 8000ffc:	20000bb8 	.word	0x20000bb8

08001000 <_writePos>:

// sends value (mask) for specific position per i2c, if different from cached value
void _writePos(uint8_t pos, uint8_t mask) {
	if (_displayCache[pos] == mask)
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <_writePos+0x38>)
 8001002:	5c1b      	ldrb	r3, [r3, r0]
 8001004:	428b      	cmp	r3, r1
 8001006:	d015      	beq.n	8001034 <_writePos+0x34>
void _writePos(uint8_t pos, uint8_t mask) {
 8001008:	b530      	push	{r4, r5, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	4604      	mov	r4, r0
 800100e:	460d      	mov	r5, r1
		return;

	uint8_t pData[2];
	pData[0] = pos * 2;
 8001010:	0043      	lsls	r3, r0, #1
 8001012:	f88d 300c 	strb.w	r3, [sp, #12]
	pData[1] = mask;
 8001016:	f88d 100d 	strb.w	r1, [sp, #13]

	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, HT16K33_I2C_ADDR << 1, pData, 2, HAL_MAX_DELAY);
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2302      	movs	r3, #2
 8001022:	aa03      	add	r2, sp, #12
 8001024:	21e0      	movs	r1, #224	; 0xe0
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <_writePos+0x3c>)
 8001028:	f004 fd54 	bl	8005ad4 <HAL_I2C_Master_Transmit>
	_displayCache[pos] = mask;	// update value in cache
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <_writePos+0x38>)
 800102e:	551d      	strb	r5, [r3, r4]
}
 8001030:	b005      	add	sp, #20
 8001032:	bd30      	pop	{r4, r5, pc}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000b1c 	.word	0x20000b1c
 800103c:	20000bb8 	.word	0x20000bb8

08001040 <_writePosPoint>:

// update mask to display point at given location, before sending it per i2c
void _writePosPoint(uint8_t pos, uint8_t mask, int point) {
 8001040:	b508      	push	{r3, lr}
	if (point)
 8001042:	b122      	cbz	r2, 800104e <_writePosPoint+0xe>
		mask |= 0x80;
 8001044:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	else
		mask &= 0x7F;

	_writePos(pos, mask);
 8001048:	f7ff ffda 	bl	8001000 <_writePos>
}
 800104c:	bd08      	pop	{r3, pc}
		mask &= 0x7F;
 800104e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001052:	e7f9      	b.n	8001048 <_writePosPoint+0x8>

08001054 <seg7_setBrightness>:
	}

	_writeCmd(HT16K33_BLINKOFF | (value << 1));
}

void seg7_setBrightness(uint8_t value) {
 8001054:	b508      	push	{r3, lr}
	if (value == _bright)
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <seg7_setBrightness+0x2c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4283      	cmp	r3, r0
 800105c:	d00e      	beq.n	800107c <seg7_setBrightness+0x28>
		return;

	_bright = value;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <seg7_setBrightness+0x2c>)
 8001060:	7018      	strb	r0, [r3, #0]

	if (_bright > 0x0F)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d902      	bls.n	8001070 <seg7_setBrightness+0x1c>
		_bright = 0x0F;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <seg7_setBrightness+0x2c>)
 800106c:	220f      	movs	r2, #15
 800106e:	701a      	strb	r2, [r3, #0]

	_writeCmd(HT16K33_BRIGHTNESS | _bright);
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <seg7_setBrightness+0x2c>)
 8001072:	7818      	ldrb	r0, [r3, #0]
 8001074:	f040 00e0 	orr.w	r0, r0, #224	; 0xe0
 8001078:	f7ff ffae 	bl	8000fd8 <_writeCmd>
}
 800107c:	bd08      	pop	{r3, pc}
 800107e:	bf00      	nop
 8001080:	20000190 	.word	0x20000190

08001084 <seg7_displayOn>:
void seg7_displayOn() {
 8001084:	b508      	push	{r3, lr}
	_writeCmd(HT16K33_ON);
 8001086:	2021      	movs	r0, #33	; 0x21
 8001088:	f7ff ffa6 	bl	8000fd8 <_writeCmd>
	_writeCmd(HT16K33_DISPLAYON);
 800108c:	2081      	movs	r0, #129	; 0x81
 800108e:	f7ff ffa3 	bl	8000fd8 <_writeCmd>
	seg7_setBrightness(_bright);
 8001092:	4b02      	ldr	r3, [pc, #8]	; (800109c <seg7_displayOn+0x18>)
 8001094:	7818      	ldrb	r0, [r3, #0]
 8001096:	f7ff ffdd 	bl	8001054 <seg7_setBrightness>
}
 800109a:	bd08      	pop	{r3, pc}
 800109c:	20000190 	.word	0x20000190

080010a0 <seg7_displayPoint>:
	_writePos(1, charmap[array[1]]);
	_writePos(3, charmap[array[2]]);
	_writePos(4, charmap[array[3]]);
}

void seg7_displayPoint(uint8_t *array, uint8_t point) {
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4604      	mov	r4, r0
	_writePosPoint(0, charmap[array[0]], point == 0);
 80010a4:	460e      	mov	r6, r1
 80010a6:	4d12      	ldr	r5, [pc, #72]	; (80010f0 <seg7_displayPoint+0x50>)
 80010a8:	7803      	ldrb	r3, [r0, #0]
 80010aa:	fab1 f281 	clz	r2, r1
 80010ae:	0952      	lsrs	r2, r2, #5
 80010b0:	5ce9      	ldrb	r1, [r5, r3]
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff ffc4 	bl	8001040 <_writePosPoint>
	_writePosPoint(1, charmap[array[1]], point == 1);
 80010b8:	7863      	ldrb	r3, [r4, #1]
 80010ba:	2e01      	cmp	r6, #1
 80010bc:	bf14      	ite	ne
 80010be:	2200      	movne	r2, #0
 80010c0:	2201      	moveq	r2, #1
 80010c2:	5ce9      	ldrb	r1, [r5, r3]
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff ffbb 	bl	8001040 <_writePosPoint>
	_writePosPoint(3, charmap[array[2]], point == 2);
 80010ca:	78a3      	ldrb	r3, [r4, #2]
 80010cc:	2e02      	cmp	r6, #2
 80010ce:	bf14      	ite	ne
 80010d0:	2200      	movne	r2, #0
 80010d2:	2201      	moveq	r2, #1
 80010d4:	5ce9      	ldrb	r1, [r5, r3]
 80010d6:	2003      	movs	r0, #3
 80010d8:	f7ff ffb2 	bl	8001040 <_writePosPoint>
	_writePosPoint(4, charmap[array[3]], point == 3);
 80010dc:	78e3      	ldrb	r3, [r4, #3]
 80010de:	2e03      	cmp	r6, #3
 80010e0:	bf14      	ite	ne
 80010e2:	2200      	movne	r2, #0
 80010e4:	2201      	moveq	r2, #1
 80010e6:	5ce9      	ldrb	r1, [r5, r3]
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff ffa9 	bl	8001040 <_writePosPoint>
}
 80010ee:	bd70      	pop	{r4, r5, r6, pc}
 80010f0:	08008d2c 	.word	0x08008d2c

080010f4 <seg7_displayIntWithPoint>:
int seg7_displayIntWithPoint(int n, uint8_t point) {
 80010f4:	b530      	push	{r4, r5, lr}
 80010f6:	b083      	sub	sp, #12
	int inRange = ((-1000 < n) && (n < 10000));
 80010f8:	f200 34e7 	addw	r4, r0, #999	; 0x3e7
 80010fc:	f642 23f6 	movw	r3, #10998	; 0x2af6
 8001100:	429c      	cmp	r4, r3
 8001102:	bf8c      	ite	hi
 8001104:	2400      	movhi	r4, #0
 8001106:	2401      	movls	r4, #1
	if (neg)
 8001108:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800110c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	h = n / 100;
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <seg7_displayIntWithPoint+0xd4>)
 8001112:	fb82 2c03 	smull	r2, ip, r2, r3
 8001116:	17da      	asrs	r2, r3, #31
 8001118:	ebc2 126c 	rsb	r2, r2, ip, asr #5
 800111c:	b2d2      	uxtb	r2, r2
	l = n - h * 100;
 800111e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8001122:	ebc2 0ccc 	rsb	ip, r2, ip, lsl #3
 8001126:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800112a:	fa5f fe83 	uxtb.w	lr, r3
	arr[0] = h / 10;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <seg7_displayIntWithPoint+0xd8>)
 8001130:	fba3 5c02 	umull	r5, ip, r3, r2
 8001134:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8001138:	f88d c004 	strb.w	ip, [sp, #4]
	arr[1] = h - arr[0] * 10;
 800113c:	ebcc 154c 	rsb	r5, ip, ip, lsl #5
 8001140:	ebcc 0c85 	rsb	ip, ip, r5, lsl #2
 8001144:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8001148:	f88d 2005 	strb.w	r2, [sp, #5]
	arr[2] = l / 10;
 800114c:	fba3 230e 	umull	r2, r3, r3, lr
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	f88d 3006 	strb.w	r3, [sp, #6]
	arr[3] = l - arr[2] * 10;
 8001156:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800115a:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 800115e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8001162:	f88d 3007 	strb.w	r3, [sp, #7]
	if (neg) {
 8001166:	2800      	cmp	r0, #0
 8001168:	db05      	blt.n	8001176 <seg7_displayIntWithPoint+0x82>
	seg7_displayPoint(arr, point);
 800116a:	a801      	add	r0, sp, #4
 800116c:	f7ff ff98 	bl	80010a0 <seg7_displayPoint>
}
 8001170:	4620      	mov	r0, r4
 8001172:	b003      	add	sp, #12
 8001174:	bd30      	pop	{r4, r5, pc}
		if (_digits >= 3) {
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <seg7_displayIntWithPoint+0xdc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d81e      	bhi.n	80011be <seg7_displayIntWithPoint+0xca>
			for (i = 0; i < (4 - _digits); i++) {
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <seg7_displayIntWithPoint+0xdc>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b04      	cmp	r3, #4
 8001188:	bfa8      	it	ge
 800118a:	2200      	movge	r2, #0
 800118c:	da0f      	bge.n	80011ae <seg7_displayIntWithPoint+0xba>
 800118e:	a801      	add	r0, sp, #4
 8001190:	2200      	movs	r2, #0
				arr[i] = SEG7_SPACE;
 8001192:	f04f 0c10 	mov.w	ip, #16
			for (i = 0; i < (4 - _digits); i++) {
 8001196:	4d0e      	ldr	r5, [pc, #56]	; (80011d0 <seg7_displayIntWithPoint+0xdc>)
				if (arr[i] != 0) {
 8001198:	f810 3b01 	ldrb.w	r3, [r0], #1
 800119c:	b93b      	cbnz	r3, 80011ae <seg7_displayIntWithPoint+0xba>
				arr[i] = SEG7_SPACE;
 800119e:	f800 cc01 	strb.w	ip, [r0, #-1]
			for (i = 0; i < (4 - _digits); i++) {
 80011a2:	3201      	adds	r2, #1
 80011a4:	782b      	ldrb	r3, [r5, #0]
 80011a6:	f1c3 0304 	rsb	r3, r3, #4
 80011aa:	4293      	cmp	r3, r2
 80011ac:	dcf4      	bgt.n	8001198 <seg7_displayIntWithPoint+0xa4>
			arr[i - 1] = SEG7_MINUS;
 80011ae:	f102 0308 	add.w	r3, r2, #8
 80011b2:	eb0d 0203 	add.w	r2, sp, r3
 80011b6:	2311      	movs	r3, #17
 80011b8:	f802 3c05 	strb.w	r3, [r2, #-5]
 80011bc:	e7d5      	b.n	800116a <seg7_displayIntWithPoint+0x76>
			arr[0] = SEG7_MINUS;
 80011be:	2311      	movs	r3, #17
 80011c0:	f88d 3004 	strb.w	r3, [sp, #4]
 80011c4:	e7d1      	b.n	800116a <seg7_displayIntWithPoint+0x76>
 80011c6:	bf00      	nop
 80011c8:	51eb851f 	.word	0x51eb851f
 80011cc:	cccccccd 	.word	0xcccccccd
 80011d0:	20000191 	.word	0x20000191

080011d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011d4:	b500      	push	{lr}
 80011d6:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011d8:	2220      	movs	r2, #32
 80011da:	2100      	movs	r1, #0
 80011dc:	a80d      	add	r0, sp, #52	; 0x34
 80011de:	f007 fa87 	bl	80086f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011e2:	2300      	movs	r3, #0
 80011e4:	9307      	str	r3, [sp, #28]
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	9309      	str	r3, [sp, #36]	; 0x24
 80011ea:	930a      	str	r3, [sp, #40]	; 0x28
 80011ec:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	9303      	str	r3, [sp, #12]
 80011f6:	9304      	str	r3, [sp, #16]
 80011f8:	9305      	str	r3, [sp, #20]
 80011fa:	9306      	str	r3, [sp, #24]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2201      	movs	r2, #1
 8001202:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2210      	movs	r2, #16
 8001206:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800120a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800120e:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001210:	a80c      	add	r0, sp, #48	; 0x30
 8001212:	f004 fe45 	bl	8005ea0 <HAL_RCC_OscConfig>
 8001216:	b9d8      	cbnz	r0, 8001250 <SystemClock_Config+0x7c>
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	9307      	str	r3, [sp, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	2102      	movs	r1, #2
 800121e:	9108      	str	r1, [sp, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122a:	930b      	str	r3, [sp, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800122c:	a807      	add	r0, sp, #28
 800122e:	f005 f959 	bl	80064e4 <HAL_RCC_ClockConfig>
 8001232:	b978      	cbnz	r0, 8001254 <SystemClock_Config+0x80>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1
 8001234:	23a0      	movs	r3, #160	; 0xa0
 8001236:	9300      	str	r3, [sp, #0]
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123c:	9304      	str	r3, [sp, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800123e:	2300      	movs	r3, #0
 8001240:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001242:	4668      	mov	r0, sp
 8001244:	f005 fa48 	bl	80066d8 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	b930      	cbnz	r0, 8001258 <SystemClock_Config+0x84>
		Error_Handler();
	}
}
 800124a:	b017      	add	sp, #92	; 0x5c
 800124c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001252:	e7fe      	b.n	8001252 <SystemClock_Config+0x7e>
 8001254:	b672      	cpsid	i
 8001256:	e7fe      	b.n	8001256 <SystemClock_Config+0x82>
 8001258:	b672      	cpsid	i
 800125a:	e7fe      	b.n	800125a <SystemClock_Config+0x86>

0800125c <main>:
int main(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	; 0x40
	HAL_Init();
 8001260:	f003 fa50 	bl	8004704 <HAL_Init>
	SystemClock_Config();
 8001264:	f7ff ffb6 	bl	80011d4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001268:	2400      	movs	r4, #0
 800126a:	9409      	str	r4, [sp, #36]	; 0x24
 800126c:	940a      	str	r4, [sp, #40]	; 0x28
 800126e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001270:	940c      	str	r4, [sp, #48]	; 0x30
 8001272:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	4da3      	ldr	r5, [pc, #652]	; (8001504 <main+0x2a8>)
 8001276:	696b      	ldr	r3, [r5, #20]
 8001278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800127c:	616b      	str	r3, [r5, #20]
 800127e:	696b      	ldr	r3, [r5, #20]
 8001280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001288:	696b      	ldr	r3, [r5, #20]
 800128a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128e:	616b      	str	r3, [r5, #20]
 8001290:	696b      	ldr	r3, [r5, #20]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	9303      	str	r3, [sp, #12]
 8001298:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	696b      	ldr	r3, [r5, #20]
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	616b      	str	r3, [r5, #20]
 80012a2:	696b      	ldr	r3, [r5, #20]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	9304      	str	r3, [sp, #16]
 80012aa:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	696b      	ldr	r3, [r5, #20]
 80012ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b2:	616b      	str	r3, [r5, #20]
 80012b4:	696b      	ldr	r3, [r5, #20]
 80012b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ba:	9305      	str	r3, [sp, #20]
 80012bc:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012be:	4622      	mov	r2, r4
 80012c0:	2120      	movs	r1, #32
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f004 f9ed 	bl	80056a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d4:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	4f8b      	ldr	r7, [pc, #556]	; (8001508 <main+0x2ac>)
 80012da:	a909      	add	r1, sp, #36	; 0x24
 80012dc:	4638      	mov	r0, r7
 80012de:	f004 f907 	bl	80054f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 80012e2:	2320      	movs	r3, #32
 80012e4:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2601      	movs	r6, #1
 80012e8:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ee:	a909      	add	r1, sp, #36	; 0x24
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f004 f8fc 	bl	80054f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BTN1_Pin;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001300:	a909      	add	r1, sp, #36	; 0x24
 8001302:	4638      	mov	r0, r7
 8001304:	f004 f8f4 	bl	80054f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BTN2_Pin;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001312:	a909      	add	r1, sp, #36	; 0x24
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f004 f8ea 	bl	80054f0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800131c:	696b      	ldr	r3, [r5, #20]
 800131e:	4333      	orrs	r3, r6
 8001320:	616b      	str	r3, [r5, #20]
 8001322:	696b      	ldr	r3, [r5, #20]
 8001324:	4033      	ands	r3, r6
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800132a:	4622      	mov	r2, r4
 800132c:	4621      	mov	r1, r4
 800132e:	2010      	movs	r0, #16
 8001330:	f003 ff80 	bl	8005234 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001334:	2010      	movs	r0, #16
 8001336:	f003 ffb3 	bl	80052a0 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 800133a:	4874      	ldr	r0, [pc, #464]	; (800150c <main+0x2b0>)
 800133c:	4b74      	ldr	r3, [pc, #464]	; (8001510 <main+0x2b4>)
 800133e:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 38400;
 8001340:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001344:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001348:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	230c      	movs	r3, #12
 800134e:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001350:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001352:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001354:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001356:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001358:	f006 fc05 	bl	8007b66 <HAL_UART_Init>
 800135c:	2800      	cmp	r0, #0
 800135e:	f040 80fd 	bne.w	800155c <main+0x300>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001362:	2300      	movs	r3, #0
 8001364:	9306      	str	r3, [sp, #24]
 8001366:	9307      	str	r3, [sp, #28]
 8001368:	9308      	str	r3, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800136a:	9309      	str	r3, [sp, #36]	; 0x24
 800136c:	930a      	str	r3, [sp, #40]	; 0x28
 800136e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001370:	930c      	str	r3, [sp, #48]	; 0x30
 8001372:	930d      	str	r3, [sp, #52]	; 0x34
 8001374:	930e      	str	r3, [sp, #56]	; 0x38
 8001376:	930f      	str	r3, [sp, #60]	; 0x3c
	htim2.Instance = TIM2;
 8001378:	4866      	ldr	r0, [pc, #408]	; (8001514 <main+0x2b8>)
 800137a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137e:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 19;
 8001380:	2213      	movs	r2, #19
 8001382:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 63999;
 8001386:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800138a:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001392:	f005 fdc7 	bl	8006f24 <HAL_TIM_PWM_Init>
 8001396:	2800      	cmp	r0, #0
 8001398:	f040 80e2 	bne.w	8001560 <main+0x304>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80013a2:	a906      	add	r1, sp, #24
 80013a4:	485b      	ldr	r0, [pc, #364]	; (8001514 <main+0x2b8>)
 80013a6:	f006 f9a9 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	f040 80da 	bne.w	8001564 <main+0x308>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	930a      	str	r3, [sp, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80013bc:	2204      	movs	r2, #4
 80013be:	a909      	add	r1, sp, #36	; 0x24
 80013c0:	4854      	ldr	r0, [pc, #336]	; (8001514 <main+0x2b8>)
 80013c2:	f005 fe1d 	bl	8007000 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	f040 80ce 	bne.w	8001568 <main+0x30c>
	HAL_TIM_MspPostInit(&htim2);
 80013cc:	4851      	ldr	r0, [pc, #324]	; (8001514 <main+0x2b8>)
 80013ce:	f000 f9cd 	bl	800176c <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 80013d2:	4851      	ldr	r0, [pc, #324]	; (8001518 <main+0x2bc>)
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <main+0x2c0>)
 80013d6:	6003      	str	r3, [r0, #0]
	hi2c1.Init.Timing = 0x0000020B;
 80013d8:	f240 230b 	movw	r3, #523	; 0x20b
 80013dc:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	2201      	movs	r2, #1
 80013e4:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e6:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80013e8:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ea:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ec:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013f0:	f004 fb15 	bl	8005a1e <HAL_I2C_Init>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	f040 80b9 	bne.w	800156c <main+0x310>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4846      	ldr	r0, [pc, #280]	; (8001518 <main+0x2bc>)
 80013fe:	f004 fcf5 	bl	8005dec <HAL_I2CEx_ConfigAnalogFilter>
 8001402:	2800      	cmp	r0, #0
 8001404:	f040 80b4 	bne.w	8001570 <main+0x314>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001408:	2100      	movs	r1, #0
 800140a:	4843      	ldr	r0, [pc, #268]	; (8001518 <main+0x2bc>)
 800140c:	f004 fd1c 	bl	8005e48 <HAL_I2CEx_ConfigDigitalFilter>
 8001410:	2800      	cmp	r0, #0
 8001412:	f040 80af 	bne.w	8001574 <main+0x318>
	ADC_MultiModeTypeDef multimode = { 0 };
 8001416:	2300      	movs	r3, #0
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	9307      	str	r3, [sp, #28]
 800141c:	9308      	str	r3, [sp, #32]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800141e:	9309      	str	r3, [sp, #36]	; 0x24
 8001420:	930a      	str	r3, [sp, #40]	; 0x28
 8001422:	930b      	str	r3, [sp, #44]	; 0x2c
 8001424:	930c      	str	r3, [sp, #48]	; 0x30
 8001426:	930d      	str	r3, [sp, #52]	; 0x34
 8001428:	930e      	str	r3, [sp, #56]	; 0x38
	hadc1.Instance = ADC1;
 800142a:	483d      	ldr	r0, [pc, #244]	; (8001520 <main+0x2c4>)
 800142c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001430:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001432:	6043      	str	r3, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001434:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001436:	6103      	str	r3, [r0, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001438:	2201      	movs	r2, #1
 800143a:	7642      	strb	r2, [r0, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800143c:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001440:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001442:	6282      	str	r2, [r0, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001444:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001446:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001448:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144c:	2204      	movs	r2, #4
 800144e:	6142      	str	r2, [r0, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001450:	7603      	strb	r3, [r0, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001452:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001454:	f003 fa22 	bl	800489c <HAL_ADC_Init>
 8001458:	2800      	cmp	r0, #0
 800145a:	f040 808d 	bne.w	8001578 <main+0x31c>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800145e:	2300      	movs	r3, #0
 8001460:	9306      	str	r3, [sp, #24]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001462:	a906      	add	r1, sp, #24
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <main+0x2c4>)
 8001466:	f003 fe49 	bl	80050fc <HAL_ADCEx_MultiModeConfigChannel>
 800146a:	2800      	cmp	r0, #0
 800146c:	f040 8086 	bne.w	800157c <main+0x320>
	sConfig.Channel = ADC_CHANNEL_1;
 8001470:	2301      	movs	r3, #1
 8001472:	9309      	str	r3, [sp, #36]	; 0x24
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001474:	930a      	str	r3, [sp, #40]	; 0x28
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001476:	2300      	movs	r3, #0
 8001478:	930c      	str	r3, [sp, #48]	; 0x30
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800147a:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147c:	930d      	str	r3, [sp, #52]	; 0x34
	sConfig.Offset = 0;
 800147e:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001480:	a909      	add	r1, sp, #36	; 0x24
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <main+0x2c4>)
 8001484:	f003 fc6a 	bl	8004d5c <HAL_ADC_ConfigChannel>
 8001488:	2800      	cmp	r0, #0
 800148a:	d179      	bne.n	8001580 <main+0x324>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800148c:	2300      	movs	r3, #0
 800148e:	9306      	str	r3, [sp, #24]
 8001490:	9307      	str	r3, [sp, #28]
 8001492:	9308      	str	r3, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001494:	9309      	str	r3, [sp, #36]	; 0x24
 8001496:	930a      	str	r3, [sp, #40]	; 0x28
 8001498:	930b      	str	r3, [sp, #44]	; 0x2c
 800149a:	930c      	str	r3, [sp, #48]	; 0x30
 800149c:	930d      	str	r3, [sp, #52]	; 0x34
 800149e:	930e      	str	r3, [sp, #56]	; 0x38
 80014a0:	930f      	str	r3, [sp, #60]	; 0x3c
	htim3.Instance = TIM3;
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <main+0x2c8>)
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <main+0x2cc>)
 80014a6:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 80014a8:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 76;
 80014ac:	224c      	movs	r2, #76	; 0x4c
 80014ae:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80014b4:	f005 fd36 	bl	8006f24 <HAL_TIM_PWM_Init>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d163      	bne.n	8001584 <main+0x328>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80014c2:	a906      	add	r1, sp, #24
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <main+0x2c8>)
 80014c6:	f006 f919 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d15c      	bne.n	8001588 <main+0x32c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ce:	2360      	movs	r3, #96	; 0x60
 80014d0:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80014d2:	2200      	movs	r2, #0
 80014d4:	920a      	str	r2, [sp, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d6:	920b      	str	r2, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d8:	920d      	str	r2, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80014da:	a909      	add	r1, sp, #36	; 0x24
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <main+0x2c8>)
 80014de:	f005 fd8f 	bl	8007000 <HAL_TIM_PWM_ConfigChannel>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d152      	bne.n	800158c <main+0x330>
	HAL_TIM_MspPostInit(&htim3);
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <main+0x2c8>)
 80014e8:	f000 f940 	bl	800176c <HAL_TIM_MspPostInit>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014ec:	2300      	movs	r3, #0
 80014ee:	9309      	str	r3, [sp, #36]	; 0x24
 80014f0:	930a      	str	r3, [sp, #40]	; 0x28
 80014f2:	930b      	str	r3, [sp, #44]	; 0x2c
	htim6.Instance = TIM6;
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <main+0x2d0>)
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <main+0x2d4>)
 80014f8:	6002      	str	r2, [r0, #0]
	htim6.Init.Prescaler = 63;
 80014fa:	223f      	movs	r2, #63	; 0x3f
 80014fc:	6042      	str	r2, [r0, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	6083      	str	r3, [r0, #8]
 8001500:	e018      	b.n	8001534 <main+0x2d8>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	48000800 	.word	0x48000800
 800150c:	20000cf0 	.word	0x20000cf0
 8001510:	40004400 	.word	0x40004400
 8001514:	20000c0c 	.word	0x20000c0c
 8001518:	20000bb8 	.word	0x20000bb8
 800151c:	40005400 	.word	0x40005400
 8001520:	20000b24 	.word	0x20000b24
 8001524:	20000c58 	.word	0x20000c58
 8001528:	40000400 	.word	0x40000400
 800152c:	20000ca4 	.word	0x20000ca4
 8001530:	40001000 	.word	0x40001000
	htim6.Init.Period = 1000;
 8001534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001538:	60c2      	str	r2, [r0, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800153c:	f005 fcc2 	bl	8006ec4 <HAL_TIM_Base_Init>
 8001540:	bb30      	cbnz	r0, 8001590 <main+0x334>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	9309      	str	r3, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001548:	a909      	add	r1, sp, #36	; 0x24
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <main+0x33c>)
 800154c:	f006 f8d6 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	bb00      	cbnz	r0, 8001594 <main+0x338>
	initializeBalanceTube();
 8001552:	f7ff fb27 	bl	8000ba4 <initializeBalanceTube>
		runBalanceTube();
 8001556:	f7ff fb83 	bl	8000c60 <runBalanceTube>
	while (1) {
 800155a:	e7fc      	b.n	8001556 <main+0x2fa>
 800155c:	b672      	cpsid	i
	while (1) {
 800155e:	e7fe      	b.n	800155e <main+0x302>
 8001560:	b672      	cpsid	i
 8001562:	e7fe      	b.n	8001562 <main+0x306>
 8001564:	b672      	cpsid	i
 8001566:	e7fe      	b.n	8001566 <main+0x30a>
 8001568:	b672      	cpsid	i
 800156a:	e7fe      	b.n	800156a <main+0x30e>
 800156c:	b672      	cpsid	i
 800156e:	e7fe      	b.n	800156e <main+0x312>
 8001570:	b672      	cpsid	i
 8001572:	e7fe      	b.n	8001572 <main+0x316>
 8001574:	b672      	cpsid	i
 8001576:	e7fe      	b.n	8001576 <main+0x31a>
 8001578:	b672      	cpsid	i
 800157a:	e7fe      	b.n	800157a <main+0x31e>
 800157c:	b672      	cpsid	i
 800157e:	e7fe      	b.n	800157e <main+0x322>
 8001580:	b672      	cpsid	i
 8001582:	e7fe      	b.n	8001582 <main+0x326>
 8001584:	b672      	cpsid	i
 8001586:	e7fe      	b.n	8001586 <main+0x32a>
 8001588:	b672      	cpsid	i
 800158a:	e7fe      	b.n	800158a <main+0x32e>
 800158c:	b672      	cpsid	i
 800158e:	e7fe      	b.n	800158e <main+0x332>
 8001590:	b672      	cpsid	i
 8001592:	e7fe      	b.n	8001592 <main+0x336>
 8001594:	b672      	cpsid	i
 8001596:	e7fe      	b.n	8001596 <main+0x33a>
 8001598:	20000ca4 	.word	0x20000ca4

0800159c <Error_Handler>:
 800159c:	b672      	cpsid	i
 800159e:	e7fe      	b.n	800159e <Error_Handler+0x2>

080015a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_MspInit+0x2c>)
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	f002 0201 	and.w	r2, r2, #1
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015bc:	61da      	str	r2, [r3, #28]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	b002      	add	sp, #8
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d0:	b500      	push	{lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	2300      	movs	r3, #0
 80015d6:	9303      	str	r3, [sp, #12]
 80015d8:	9304      	str	r3, [sp, #16]
 80015da:	9305      	str	r3, [sp, #20]
 80015dc:	9306      	str	r3, [sp, #24]
 80015de:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80015e0:	6803      	ldr	r3, [r0, #0]
 80015e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e6:	d002      	beq.n	80015ee <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e8:	b009      	add	sp, #36	; 0x24
 80015ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015ee:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80015f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001604:	9201      	str	r2, [sp, #4]
 8001606:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161a:	2301      	movs	r3, #1
 800161c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	a903      	add	r1, sp, #12
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f003 ff62 	bl	80054f0 <HAL_GPIO_Init>
}
 800162c:	e7dc      	b.n	80015e8 <HAL_ADC_MspInit+0x18>
	...

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b510      	push	{r4, lr}
 8001632:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	2300      	movs	r3, #0
 8001636:	9303      	str	r3, [sp, #12]
 8001638:	9304      	str	r3, [sp, #16]
 800163a:	9305      	str	r3, [sp, #20]
 800163c:	9306      	str	r3, [sp, #24]
 800163e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001640:	6802      	ldr	r2, [r0, #0]
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_I2C_MspInit+0x60>)
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001648:	b008      	add	sp, #32
 800164a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	4c11      	ldr	r4, [pc, #68]	; (8001694 <HAL_I2C_MspInit+0x64>)
 800164e:	6963      	ldr	r3, [r4, #20]
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6163      	str	r3, [r4, #20]
 8001656:	6963      	ldr	r3, [r4, #20]
 8001658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001664:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	a903      	add	r1, sp, #12
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <HAL_I2C_MspInit+0x68>)
 8001676:	f003 ff3b 	bl	80054f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	69e3      	ldr	r3, [r4, #28]
 800167c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001680:	61e3      	str	r3, [r4, #28]
 8001682:	69e3      	ldr	r3, [r4, #28]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	9b02      	ldr	r3, [sp, #8]
}
 800168c:	e7dc      	b.n	8001648 <HAL_I2C_MspInit+0x18>
 800168e:	bf00      	nop
 8001690:	40005400 	.word	0x40005400
 8001694:	40021000 	.word	0x40021000
 8001698:	48000400 	.word	0x48000400

0800169c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800169c:	b510      	push	{r4, lr}
 800169e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 80016a0:	6803      	ldr	r3, [r0, #0]
 80016a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a6:	d005      	beq.n	80016b4 <HAL_TIM_PWM_MspInit+0x18>
 80016a8:	4604      	mov	r4, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_TIM_PWM_MspInit+0x80>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_TIM_PWM_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016b0:	b002      	add	sp, #8
 80016b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	61da      	str	r2, [r3, #28]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	9b00      	ldr	r3, [sp, #0]
 80016ca:	e7f1      	b.n	80016b0 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_TIM_PWM_MspInit+0x84>)
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	f042 0202 	orr.w	r2, r2, #2
 80016d4:	61da      	str	r2, [r3, #28]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <HAL_TIM_PWM_MspInit+0x88>)
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_TIM_PWM_MspInit+0x8c>)
 80016e4:	6003      	str	r3, [r0, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e6:	2310      	movs	r3, #16
 80016e8:	6043      	str	r3, [r0, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	6083      	str	r3, [r0, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	60c2      	str	r2, [r0, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	6102      	str	r2, [r0, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016fc:	6142      	str	r2, [r0, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80016fe:	6183      	str	r3, [r0, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001700:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001704:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001706:	f003 fded 	bl	80052e4 <HAL_DMA_Init>
 800170a:	b920      	cbnz	r0, 8001716 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_TIM_PWM_MspInit+0x88>)
 800170e:	6263      	str	r3, [r4, #36]	; 0x24
 8001710:	625c      	str	r4, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001712:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001714:	e7cc      	b.n	80016b0 <HAL_TIM_PWM_MspInit+0x14>
      Error_Handler();
 8001716:	f7ff ff41 	bl	800159c <Error_Handler>
 800171a:	e7f7      	b.n	800170c <HAL_TIM_PWM_MspInit+0x70>
 800171c:	40000400 	.word	0x40000400
 8001720:	40021000 	.word	0x40021000
 8001724:	20000b74 	.word	0x20000b74
 8001728:	4002006c 	.word	0x4002006c

0800172c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 800172c:	6802      	ldr	r2, [r0, #0]
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_TIM_Base_MspInit+0x3c>)
 8001730:	429a      	cmp	r2, r3
 8001732:	d000      	beq.n	8001736 <HAL_TIM_Base_MspInit+0xa>
 8001734:	4770      	bx	lr
{
 8001736:	b500      	push	{lr}
 8001738:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800173a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	f042 0210 	orr.w	r2, r2, #16
 8001744:	61da      	str	r2, [r3, #28]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2101      	movs	r1, #1
 8001754:	2036      	movs	r0, #54	; 0x36
 8001756:	f003 fd6d 	bl	8005234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800175a:	2036      	movs	r0, #54	; 0x36
 800175c:	f003 fda0 	bl	80052a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001760:	b003      	add	sp, #12
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
 8001766:	bf00      	nop
 8001768:	40001000 	.word	0x40001000

0800176c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800176c:	b500      	push	{lr}
 800176e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	2300      	movs	r3, #0
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	9304      	str	r3, [sp, #16]
 8001776:	9305      	str	r3, [sp, #20]
 8001778:	9306      	str	r3, [sp, #24]
 800177a:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 800177c:	6803      	ldr	r3, [r0, #0]
 800177e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001782:	d005      	beq.n	8001790 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_TIM_MspPostInit+0x78>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d018      	beq.n	80017bc <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800178a:	b009      	add	sp, #36	; 0x24
 800178c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a6:	2308      	movs	r3, #8
 80017a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ae:	2301      	movs	r3, #1
 80017b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	a903      	add	r1, sp, #12
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <HAL_TIM_MspPostInit+0x7c>)
 80017b6:	f003 fe9b 	bl	80054f0 <HAL_GPIO_Init>
 80017ba:	e7e6      	b.n	800178a <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_TIM_MspPostInit+0x80>)
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017d0:	2310      	movs	r3, #16
 80017d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	a903      	add	r1, sp, #12
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <HAL_TIM_MspPostInit+0x7c>)
 80017de:	f003 fe87 	bl	80054f0 <HAL_GPIO_Init>
}
 80017e2:	e7d2      	b.n	800178a <HAL_TIM_MspPostInit+0x1e>
 80017e4:	40000400 	.word	0x40000400
 80017e8:	48000400 	.word	0x48000400
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b500      	push	{lr}
 80017f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	2300      	movs	r3, #0
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	9304      	str	r3, [sp, #16]
 80017fa:	9305      	str	r3, [sp, #20]
 80017fc:	9306      	str	r3, [sp, #24]
 80017fe:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001800:	6802      	ldr	r2, [r0, #0]
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_UART_MspInit+0x64>)
 8001804:	429a      	cmp	r2, r3
 8001806:	d002      	beq.n	800180e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001808:	b009      	add	sp, #36	; 0x24
 800180a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001818:	61da      	str	r2, [r3, #28]
 800181a:	69da      	ldr	r2, [r3, #28]
 800181c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001820:	9201      	str	r2, [sp, #4]
 8001822:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001836:	230c      	movs	r3, #12
 8001838:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001842:	2307      	movs	r3, #7
 8001844:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	a903      	add	r1, sp, #12
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f003 fe50 	bl	80054f0 <HAL_GPIO_Init>
}
 8001850:	e7da      	b.n	8001808 <HAL_UART_MspInit+0x18>
 8001852:	bf00      	nop
 8001854:	40004400 	.word	0x40004400

08001858 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler>

0800185a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler>

0800185c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler>

0800185e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler>

08001860 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler>

08001862 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f002 ff5d 	bl	8004728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bd08      	pop	{r3, pc}

08001870 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <DMA1_Channel6_IRQHandler+0xc>)
 8001874:	f003 fde2 	bl	800543c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop
 800187c:	20000b74 	.word	0x20000b74

08001880 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001882:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM6_DAC1_IRQHandler+0xc>)
 8001884:	f005 f9a7 	bl	8006bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001888:	bd08      	pop	{r3, pc}
 800188a:	bf00      	nop
 800188c:	20000ca4 	.word	0x20000ca4

08001890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	1e16      	subs	r6, r2, #0
 8001894:	dd07      	ble.n	80018a6 <_read+0x16>
 8001896:	460c      	mov	r4, r1
 8001898:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	42a5      	cmp	r5, r4
 80018a4:	d1f9      	bne.n	800189a <_read+0xa>
  }

  return len;
}
 80018a6:	4630      	mov	r0, r6
 80018a8:	bd70      	pop	{r4, r5, r6, pc}

080018aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018aa:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	1e16      	subs	r6, r2, #0
 80018ae:	dd07      	ble.n	80018c0 <_write+0x16>
 80018b0:	460c      	mov	r4, r1
 80018b2:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80018b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	42a5      	cmp	r5, r4
 80018be:	d1f9      	bne.n	80018b4 <_write+0xa>
  }
  return len;
}
 80018c0:	4630      	mov	r0, r6
 80018c2:	bd70      	pop	{r4, r5, r6, pc}

080018c4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	604b      	str	r3, [r1, #4]
  return 0;
}
 80018d0:	2000      	movs	r0, #0
 80018d2:	4770      	bx	lr

080018d4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018d4:	2001      	movs	r0, #1
 80018d6:	4770      	bx	lr

080018d8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018d8:	2000      	movs	r0, #0
 80018da:	4770      	bx	lr

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b508      	push	{r3, lr}
 80018de:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <_sbrk+0x38>)
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	b152      	cbz	r2, 80018fc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <_sbrk+0x38>)
 80018e8:	6810      	ldr	r0, [r2, #0]
 80018ea:	4403      	add	r3, r0
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <_sbrk+0x3c>)
 80018ee:	490b      	ldr	r1, [pc, #44]	; (800191c <_sbrk+0x40>)
 80018f0:	1a52      	subs	r2, r2, r1
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d806      	bhi.n	8001904 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <_sbrk+0x38>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80018fa:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x38>)
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <_sbrk+0x44>)
 8001900:	6011      	str	r1, [r2, #0]
 8001902:	e7f0      	b.n	80018e6 <_sbrk+0xa>
    errno = ENOMEM;
 8001904:	f006 ff42 	bl	800878c <__errno>
 8001908:	230c      	movs	r3, #12
 800190a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	e7f3      	b.n	80018fa <_sbrk+0x1e>
 8001912:	bf00      	nop
 8001914:	20000d78 	.word	0x20000d78
 8001918:	20003000 	.word	0x20003000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000f48 	.word	0x20000f48

08001924 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <SystemInit+0x10>)
 8001926:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800192a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8001938:	b508      	push	{r3, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 800193a:	f002 fca7 	bl	800428c <VL53L0X_get_device_info>

	LOG_FUNCTION_END(Status);
	return Status;
}
 800193e:	bd08      	pop	{r3, pc}

08001940 <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8001940:	2915      	cmp	r1, #21
 8001942:	d80a      	bhi.n	800195a <VL53L0X_SetDeviceMode+0x1a>
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <VL53L0X_SetDeviceMode+0x20>)
 8001946:	40cb      	lsrs	r3, r1
 8001948:	f013 0f01 	tst.w	r3, #1
 800194c:	d102      	bne.n	8001954 <VL53L0X_SetDeviceMode+0x14>
 800194e:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001952:	4770      	bx	lr
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001954:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001956:	2000      	movs	r0, #0
		break;
 8001958:	4770      	bx	lr
	switch (DeviceMode) {
 800195a:	f06f 0007 	mvn.w	r0, #7
 800195e:	4770      	bx	lr
 8001960:	0030000b 	.word	0x0030000b

08001964 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001964:	b510      	push	{r4, lr}
 8001966:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001968:	460a      	mov	r2, r1
 800196a:	2109      	movs	r1, #9
 800196c:	f002 fd08 	bl	8004380 <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001970:	b918      	cbnz	r0, 800197a <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8001972:	7823      	ldrb	r3, [r4, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800197c:	b508      	push	{r3, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800197e:	f002 f84c 	bl	8003a1a <VL53L0X_set_measurement_timing_budget_micro_seconds>
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8001982:	bd08      	pop	{r3, pc}

08001984 <VL53L0X_SetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001984:	b508      	push	{r3, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001986:	f001 fe9b 	bl	80036c0 <VL53L0X_set_vcsel_pulse_period>
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
}
 800198a:	bd08      	pop	{r3, pc}

0800198c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800198c:	b508      	push	{r3, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800198e:	f002 f827 	bl	80039e0 <VL53L0X_get_vcsel_pulse_period>
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001992:	bd08      	pop	{r3, pc}

08001994 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	b083      	sub	sp, #12
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
 800199c:	4616      	mov	r6, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80019a4:	f10d 0207 	add.w	r2, sp, #7
 80019a8:	2101      	movs	r1, #1
 80019aa:	f002 fce9 	bl	8004380 <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 80019ae:	4607      	mov	r7, r0
 80019b0:	bb88      	cbnz	r0, 8001a16 <VL53L0X_SetSequenceStepEnable+0x82>
	SequenceConfigNew = SequenceConfig;
 80019b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 80019b6:	2e01      	cmp	r6, #1
 80019b8:	d006      	beq.n	80019c8 <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80019ba:	2d04      	cmp	r5, #4
 80019bc:	d83d      	bhi.n	8001a3a <VL53L0X_SetSequenceStepEnable+0xa6>
 80019be:	e8df f005 	tbb	[pc, r5]
 80019c2:	2d19      	.short	0x2d19
 80019c4:	3330      	.short	0x3330
 80019c6:	36          	.byte	0x36
 80019c7:	00          	.byte	0x00
			switch (SequenceStepId) {
 80019c8:	2d04      	cmp	r5, #4
 80019ca:	d833      	bhi.n	8001a34 <VL53L0X_SetSequenceStepEnable+0xa0>
 80019cc:	e8df f005 	tbb	[pc, r5]
 80019d0:	0c090603 	.word	0x0c090603
 80019d4:	0f          	.byte	0x0f
 80019d5:	00          	.byte	0x00
				SequenceConfigNew |= 0x10;
 80019d6:	f043 0510 	orr.w	r5, r3, #16
				break;
 80019da:	e00d      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew |= 0x28;
 80019dc:	f043 0528 	orr.w	r5, r3, #40	; 0x28
				break;
 80019e0:	e00a      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew |= 0x04;
 80019e2:	f043 0504 	orr.w	r5, r3, #4
				break;
 80019e6:	e007      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew |= 0x40;
 80019e8:	f043 0540 	orr.w	r5, r3, #64	; 0x40
				break;
 80019ec:	e004      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew |= 0x80;
 80019ee:	f043 0580 	orr.w	r5, r3, #128	; 0x80
				break;
 80019f2:	e001      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80019f4:	f003 05ef 	and.w	r5, r3, #239	; 0xef
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80019f8:	42ab      	cmp	r3, r5
 80019fa:	d00c      	beq.n	8001a16 <VL53L0X_SetSequenceStepEnable+0x82>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 80019fc:	462a      	mov	r2, r5
 80019fe:	2101      	movs	r1, #1
 8001a00:	4620      	mov	r0, r4
 8001a02:	f002 fd5d 	bl	80044c0 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001a06:	4607      	mov	r7, r0
 8001a08:	b928      	cbnz	r0, 8001a16 <VL53L0X_SetSequenceStepEnable+0x82>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001a0a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001a0e:	6961      	ldr	r1, [r4, #20]
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff ffb3 	bl	800197c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8001a16:	4638      	mov	r0, r7
 8001a18:	b003      	add	sp, #12
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew &= 0xd7;
 8001a1c:	f003 05d7 	and.w	r5, r3, #215	; 0xd7
				break;
 8001a20:	e7ea      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew &= 0xfb;
 8001a22:	f003 05fb 	and.w	r5, r3, #251	; 0xfb
				break;
 8001a26:	e7e7      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew &= 0xbf;
 8001a28:	f003 05bf 	and.w	r5, r3, #191	; 0xbf
				break;
 8001a2c:	e7e4      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
				SequenceConfigNew &= 0x7f;
 8001a2e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
				break;
 8001a32:	e7e1      	b.n	80019f8 <VL53L0X_SetSequenceStepEnable+0x64>
			switch (SequenceStepId) {
 8001a34:	f06f 0703 	mvn.w	r7, #3
 8001a38:	e7ed      	b.n	8001a16 <VL53L0X_SetSequenceStepEnable+0x82>
			switch (SequenceStepId) {
 8001a3a:	f06f 0703 	mvn.w	r7, #3
 8001a3e:	e7ea      	b.n	8001a16 <VL53L0X_SetSequenceStepEnable+0x82>

08001a40 <sequence_step_enabled>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	*pSequenceStepEnabled = 0;
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001a40:	2904      	cmp	r1, #4
 8001a42:	d804      	bhi.n	8001a4e <sequence_step_enabled+0xe>
 8001a44:	e8df f001 	tbb	[pc, r1]
 8001a48:	17120d08 	.word	0x17120d08
 8001a4c:	1c          	.byte	0x1c
 8001a4d:	00          	.byte	0x00
	*pSequenceStepEnabled = 0;
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
		break;
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
		break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a52:	f06f 0003 	mvn.w	r0, #3
 8001a56:	4770      	bx	lr
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001a58:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a5e:	2000      	movs	r0, #0
		break;
 8001a60:	4770      	bx	lr
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8001a62:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8001a66:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a68:	2000      	movs	r0, #0
		break;
 8001a6a:	4770      	bx	lr
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001a6c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a72:	2000      	movs	r0, #0
		break;
 8001a74:	4770      	bx	lr
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001a76:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a7c:	2000      	movs	r0, #0
		break;
 8001a7e:	4770      	bx	lr
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8001a80:	09d2      	lsrs	r2, r2, #7
 8001a82:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a84:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001a86:	4770      	bx	lr

08001a88 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f88d 3007 	strb.w	r3, [sp, #7]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001a96:	f10d 0207 	add.w	r2, sp, #7
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	f002 fc70 	bl	8004380 <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b110      	cbz	r0, 8001aaa <VL53L0X_GetSequenceStepEnables+0x22>
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
		Status = sequence_step_enabled(Dev,
 8001aaa:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8001aae:	462b      	mov	r3, r5
 8001ab0:	4632      	mov	r2, r6
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff ffc3 	bl	8001a40 <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8001aba:	4603      	mov	r3, r0
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d1f1      	bne.n	8001aa4 <VL53L0X_GetSequenceStepEnables+0x1c>
		Status = sequence_step_enabled(Dev,
 8001ac0:	1cab      	adds	r3, r5, #2
 8001ac2:	4632      	mov	r2, r6
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ffba 	bl	8001a40 <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8001acc:	4603      	mov	r3, r0
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d1e8      	bne.n	8001aa4 <VL53L0X_GetSequenceStepEnables+0x1c>
		Status = sequence_step_enabled(Dev,
 8001ad2:	1c6b      	adds	r3, r5, #1
 8001ad4:	4632      	mov	r2, r6
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff ffb1 	bl	8001a40 <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d1df      	bne.n	8001aa4 <VL53L0X_GetSequenceStepEnables+0x1c>
		Status = sequence_step_enabled(Dev,
 8001ae4:	1ceb      	adds	r3, r5, #3
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	2103      	movs	r1, #3
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff ffa8 	bl	8001a40 <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8001af0:	4603      	mov	r3, r0
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d1d6      	bne.n	8001aa4 <VL53L0X_GetSequenceStepEnables+0x1c>
		Status = sequence_step_enabled(Dev,
 8001af6:	1d2b      	adds	r3, r5, #4
 8001af8:	4632      	mov	r2, r6
 8001afa:	2104      	movs	r1, #4
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ff9f 	bl	8001a40 <sequence_step_enabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	e7ce      	b.n	8001aa4 <VL53L0X_GetSequenceStepEnables+0x1c>
	...

08001b08 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8001b0e:	aa01      	add	r2, sp, #4
 8001b10:	f001 fcbe 	bl	8003490 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8001b14:	b990      	cbnz	r0, 8001b3c <VL53L0X_GetSequenceStepTimeout+0x34>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8001b16:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8001b18:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <VL53L0X_GetSequenceStepTimeout+0x38>)
 8001b1a:	fba2 c103 	umull	ip, r1, r2, r3
 8001b1e:	0989      	lsrs	r1, r1, #6
 8001b20:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8001b24:	fb0c 3311 	mls	r3, ip, r1, r3
 8001b28:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8001b2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8001b34:	0409      	lsls	r1, r1, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8001b36:	eb01 1193 	add.w	r1, r1, r3, lsr #6
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8001b3a:	6021      	str	r1, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd10      	pop	{r4, pc}
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001b44:	b530      	push	{r4, r5, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001b4c:	f10d 0206 	add.w	r2, sp, #6
 8001b50:	21f8      	movs	r1, #248	; 0xf8
 8001b52:	f002 fc6b 	bl	800442c <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001b56:	b108      	cbz	r0, 8001b5c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x18>
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001b58:	b003      	add	sp, #12
 8001b5a:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_RdDWord(Dev,
 8001b5c:	466a      	mov	r2, sp
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4620      	mov	r0, r4
 8001b62:	f002 fc85 	bl	8004470 <VL53L0X_RdDWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d1f6      	bne.n	8001b58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
		if (osc_calibrate_val != 0) {
 8001b6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b6e:	b11b      	cbz	r3, 8001b78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x34>
				IMPeriodMilliSeconds / osc_calibrate_val;
 8001b70:	9a00      	ldr	r2, [sp, #0]
 8001b72:	fbb2 f2f3 	udiv	r2, r2, r3
			*pInterMeasurementPeriodMilliSeconds =
 8001b76:	602a      	str	r2, [r5, #0]
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	61a3      	str	r3, [r4, #24]
 8001b7c:	e7ec      	b.n	8001b58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>

08001b7e <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001b7e:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8001b80:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001b82:	2000      	movs	r0, #0
 8001b84:	4770      	bx	lr

08001b86 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001b86:	b530      	push	{r4, r5, lr}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001b8e:	f10d 0206 	add.w	r2, sp, #6
 8001b92:	2120      	movs	r1, #32
 8001b94:	f002 fc4a 	bl	800442c <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001b98:	b930      	cbnz	r0, 8001ba8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
		if (Value == 0) {
 8001b9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b9e:	b92b      	cbnz	r3, 8001bac <VL53L0X_GetXTalkCompensationRateMegaCps+0x26>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001ba0:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001ba2:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	7723      	strb	r3, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001bac:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001bae:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001bb0:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	7723      	strb	r3, [r4, #28]
 8001bb6:	e7f7      	b.n	8001ba8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>

08001bb8 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001bb8:	2905      	cmp	r1, #5
 8001bba:	d83e      	bhi.n	8001c3a <VL53L0X_SetLimitCheckEnable+0x82>
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	4605      	mov	r5, r0
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	4616      	mov	r6, r2
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8001bc4:	b12a      	cbz	r2, 8001bd2 <VL53L0X_SetLimitCheckEnable+0x1a>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bc6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8001bcc:	2300      	movs	r3, #0
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8001bce:	2101      	movs	r1, #1
 8001bd0:	e002      	b.n	8001bd8 <VL53L0X_SetLimitCheckEnable+0x20>
			LimitCheckEnableInt = 0;
 8001bd2:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8001bd4:	2301      	movs	r3, #1
			TempFix1616 = 0;
 8001bd6:	2200      	movs	r2, #0
		}

		switch (LimitCheckId) {
 8001bd8:	2c05      	cmp	r4, #5
 8001bda:	d831      	bhi.n	8001c40 <VL53L0X_SetLimitCheckEnable+0x88>
 8001bdc:	e8df f004 	tbb	[pc, r4]
 8001be0:	16130603 	.word	0x16130603
 8001be4:	2019      	.short	0x2019

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001be6:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001bea:	e006      	b.n	8001bfa <VL53L0X_SetLimitCheckEnable+0x42>
			Status = VL53L0X_WrWord(Dev,
 8001bec:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8001bf0:	2144      	movs	r1, #68	; 0x44
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f002 fc74 	bl	80044e0 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8001bf8:	b920      	cbnz	r0, 8001c04 <VL53L0X_SetLimitCheckEnable+0x4c>
		if (LimitCheckEnable == 0) {
 8001bfa:	b9c6      	cbnz	r6, 8001c2e <VL53L0X_SetLimitCheckEnable+0x76>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001bfc:	442c      	add	r4, r5
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c06:	f885 102a 	strb.w	r1, [r5, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
 8001c0a:	e7f6      	b.n	8001bfa <VL53L0X_SetLimitCheckEnable+0x42>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c0c:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
 8001c10:	e7f3      	b.n	8001bfa <VL53L0X_SetLimitCheckEnable+0x42>
			Status = VL53L0X_UpdateByte(Dev,
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	22fe      	movs	r2, #254	; 0xfe
 8001c16:	2160      	movs	r1, #96	; 0x60
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f002 fc73 	bl	8004504 <VL53L0X_UpdateByte>
			break;
 8001c1e:	e7eb      	b.n	8001bf8 <VL53L0X_SetLimitCheckEnable+0x40>
			Status = VL53L0X_UpdateByte(Dev,
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	22ef      	movs	r2, #239	; 0xef
 8001c24:	2160      	movs	r1, #96	; 0x60
 8001c26:	4628      	mov	r0, r5
 8001c28:	f002 fc6c 	bl	8004504 <VL53L0X_UpdateByte>
			break;
 8001c2c:	e7e4      	b.n	8001bf8 <VL53L0X_SetLimitCheckEnable+0x40>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c2e:	4425      	add	r5, r4
 8001c30:	2301      	movs	r3, #1
 8001c32:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8001c36:	2000      	movs	r0, #0
 8001c38:	e7e4      	b.n	8001c04 <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c3a:	f06f 0003 	mvn.w	r0, #3
}
 8001c3e:	4770      	bx	lr
		switch (LimitCheckId) {
 8001c40:	f06f 0003 	mvn.w	r0, #3
 8001c44:	e7de      	b.n	8001c04 <VL53L0X_SetLimitCheckEnable+0x4c>

08001c46 <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001c46:	2905      	cmp	r1, #5
 8001c48:	d805      	bhi.n	8001c56 <VL53L0X_GetLimitCheckEnable+0x10>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c4a:	4408      	add	r0, r1
 8001c4c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c50:	2000      	movs	r0, #0
 8001c52:	7013      	strb	r3, [r2, #0]
		*pLimitCheckEnable = Temp8;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001c54:	4770      	bx	lr
		*pLimitCheckEnable = 0;
 8001c56:	2300      	movs	r3, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c58:	f06f 0003 	mvn.w	r0, #3
 8001c5c:	e7f9      	b.n	8001c52 <VL53L0X_GetLimitCheckEnable+0xc>

08001c5e <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001c5e:	b570      	push	{r4, r5, r6, lr}
 8001c60:	4605      	mov	r5, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	4616      	mov	r6, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001c66:	1843      	adds	r3, r0, r1
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c6c:	b923      	cbnz	r3, 8001c78 <VL53L0X_SetLimitCheckValue+0x1a>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c6e:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8001c72:	6362      	str	r2, [r4, #52]	; 0x34
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c74:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8001c78:	2905      	cmp	r1, #5
 8001c7a:	d81c      	bhi.n	8001cb6 <VL53L0X_SetLimitCheckValue+0x58>
 8001c7c:	e8df f001 	tbb	[pc, r1]
 8001c80:	13110903 	.word	0x13110903
 8001c84:	1515      	.short	0x1515
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c86:	636a      	str	r2, [r5, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c88:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001c8c:	636e      	str	r6, [r5, #52]	; 0x34
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e7f1      	b.n	8001c76 <VL53L0X_SetLimitCheckValue+0x18>
			Status = VL53L0X_WrWord(Dev,
 8001c92:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8001c96:	2144      	movs	r1, #68	; 0x44
 8001c98:	f002 fc22 	bl	80044e0 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d1ea      	bne.n	8001c76 <VL53L0X_SetLimitCheckValue+0x18>
 8001ca0:	e7f2      	b.n	8001c88 <VL53L0X_SetLimitCheckValue+0x2a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ca2:	63ea      	str	r2, [r5, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 8001ca4:	e7f0      	b.n	8001c88 <VL53L0X_SetLimitCheckValue+0x2a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ca6:	642a      	str	r2, [r5, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 8001ca8:	e7ee      	b.n	8001c88 <VL53L0X_SetLimitCheckValue+0x2a>
			Status = VL53L0X_WrWord(Dev,
 8001caa:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8001cae:	2164      	movs	r1, #100	; 0x64
 8001cb0:	f002 fc16 	bl	80044e0 <VL53L0X_WrWord>
			break;
 8001cb4:	e7f2      	b.n	8001c9c <VL53L0X_SetLimitCheckValue+0x3e>
		switch (LimitCheckId) {
 8001cb6:	f06f 0003 	mvn.w	r0, #3
 8001cba:	e7dc      	b.n	8001c76 <VL53L0X_SetLimitCheckValue+0x18>

08001cbc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001cbc:	b530      	push	{r4, r5, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001cc4:	2905      	cmp	r1, #5
 8001cc6:	d82f      	bhi.n	8001d28 <VL53L0X_GetLimitCheckValue+0x6c>
 8001cc8:	e8df f001 	tbb	[pc, r1]
 8001ccc:	1b190803 	.word	0x1b190803
 8001cd0:	1d1d      	.short	0x1d1d

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001cd4:	602b      	str	r3, [r5, #0]
 8001cd6:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8001cd8:	b003      	add	sp, #12
 8001cda:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_RdWord(Dev,
 8001cdc:	f10d 0206 	add.w	r2, sp, #6
 8001ce0:	2144      	movs	r1, #68	; 0x44
 8001ce2:	f002 fba3 	bl	800442c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d1f6      	bne.n	8001cd8 <VL53L0X_GetLimitCheckValue+0x1c>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001cea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			if (TempFix1616 == 0) {
 8001cee:	025a      	lsls	r2, r3, #9
 8001cf0:	b1a3      	cbz	r3, 8001d1c <VL53L0X_GetLimitCheckValue+0x60>
				*pLimitCheckValue = TempFix1616;
 8001cf2:	602a      	str	r2, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001cf4:	63a2      	str	r2, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8001cfc:	e7ec      	b.n	8001cd8 <VL53L0X_GetLimitCheckValue+0x1c>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cfe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 8001d00:	e7e8      	b.n	8001cd4 <VL53L0X_GetLimitCheckValue+0x18>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d02:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 8001d04:	e7e6      	b.n	8001cd4 <VL53L0X_GetLimitCheckValue+0x18>
		Status = VL53L0X_RdWord(Dev,
 8001d06:	f10d 0206 	add.w	r2, sp, #6
 8001d0a:	2164      	movs	r1, #100	; 0x64
 8001d0c:	f002 fb8e 	bl	800442c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8001d10:	2800      	cmp	r0, #0
 8001d12:	d1e1      	bne.n	8001cd8 <VL53L0X_GetLimitCheckValue+0x1c>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001d14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	e7db      	b.n	8001cd4 <VL53L0X_GetLimitCheckValue+0x18>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8001d1e:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001d20:	2300      	movs	r3, #0
 8001d22:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8001d26:	e7d7      	b.n	8001cd8 <VL53L0X_GetLimitCheckValue+0x1c>
	switch (LimitCheckId) {
 8001d28:	f06f 0003 	mvn.w	r0, #3
 8001d2c:	e7d4      	b.n	8001cd8 <VL53L0X_GetLimitCheckValue+0x1c>

08001d2e <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001d2e:	b530      	push	{r4, r5, lr}
 8001d30:	b083      	sub	sp, #12
 8001d32:	4604      	mov	r4, r0
 8001d34:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001d36:	f10d 0207 	add.w	r2, sp, #7
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	f002 fb20 	bl	8004380 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8001d40:	b938      	cbnz	r0, 8001d52 <VL53L0X_GetWrapAroundCheckEnable+0x24>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001d42:	f89d 2007 	ldrb.w	r2, [sp, #7]
		if (data & (0x01 << 7))
 8001d46:	09d3      	lsrs	r3, r2, #7
		PALDevDataSet(Dev, SequenceConfig, data);
 8001d48:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
			*pWrapAroundCheckEnable = 0x01;
		else
			*pWrapAroundCheckEnable = 0x00;
 8001d4c:	702b      	strb	r3, [r5, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001d4e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001d52:	b003      	add	sp, #12
 8001d54:	bd30      	pop	{r4, r5, pc}

08001d56 <VL53L0X_GetDeviceParameters>:
{
 8001d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d5a:	4605      	mov	r5, r0
 8001d5c:	460e      	mov	r6, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001d5e:	7c03      	ldrb	r3, [r0, #16]
 8001d60:	f801 3b08 	strb.w	r3, [r1], #8
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001d64:	f7ff feee 	bl	8001b44 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8001d68:	4603      	mov	r3, r0
 8001d6a:	bb88      	cbnz	r0, 8001dd0 <VL53L0X_GetDeviceParameters+0x7a>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	7333      	strb	r3, [r6, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001d70:	f106 0110 	add.w	r1, r6, #16
 8001d74:	4628      	mov	r0, r5
 8001d76:	f7ff ff06 	bl	8001b86 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	bb40      	cbnz	r0, 8001dd0 <VL53L0X_GetDeviceParameters+0x7a>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001d7e:	f106 0114 	add.w	r1, r6, #20
 8001d82:	4628      	mov	r0, r5
 8001d84:	f000 fc5f 	bl	8002646 <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8001d88:	4603      	mov	r3, r0
 8001d8a:	bb08      	cbnz	r0, 8001dd0 <VL53L0X_GetDeviceParameters+0x7a>
 8001d8c:	f106 0724 	add.w	r7, r6, #36	; 0x24
 8001d90:	f105 0927 	add.w	r9, r5, #39	; 0x27
 8001d94:	f106 0817 	add.w	r8, r6, #23
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d98:	2400      	movs	r4, #0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001d9a:	463a      	mov	r2, r7
 8001d9c:	b2a1      	uxth	r1, r4
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f7ff ff8c 	bl	8001cbc <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8001da4:	4603      	mov	r3, r0
 8001da6:	b998      	cbnz	r0, 8001dd0 <VL53L0X_GetDeviceParameters+0x7a>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001da8:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		*pLimitCheckEnable = Temp8;
 8001dac:	f808 3f01 	strb.w	r3, [r8, #1]!
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001db0:	3401      	adds	r4, #1
 8001db2:	3704      	adds	r7, #4
 8001db4:	2c06      	cmp	r4, #6
 8001db6:	d1f0      	bne.n	8001d9a <VL53L0X_GetDeviceParameters+0x44>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001db8:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f7ff ffb6 	bl	8001d2e <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b920      	cbnz	r0, 8001dd0 <VL53L0X_GetDeviceParameters+0x7a>
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001dc6:	1d31      	adds	r1, r6, #4
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f001 fe9b 	bl	8003b04 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001dce:	4603      	mov	r3, r0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001dd8 <VL53L0X_DataInit>:
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	b090      	sub	sp, #64	; 0x40
 8001ddc:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2188      	movs	r1, #136	; 0x88
 8001de2:	f002 fb6d 	bl	80044c0 <VL53L0X_WrByte>
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001de6:	2300      	movs	r3, #0
 8001de8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001df0:	f8a4 214e 	strh.w	r2, [r4, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001df4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001df8:	f8a4 2150 	strh.w	r2, [r4, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001dfc:	4a54      	ldr	r2, [pc, #336]	; (8001f50 <VL53L0X_DataInit+0x178>)
 8001dfe:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001e02:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <VL53L0X_DataInit+0x17c>)
 8001e04:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001e08:	6223      	str	r3, [r4, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001e0a:	4669      	mov	r1, sp
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff ffa2 	bl	8001d56 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8001e12:	2800      	cmp	r0, #0
 8001e14:	f040 8087 	bne.w	8001f26 <VL53L0X_DataInit+0x14e>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001e18:	2500      	movs	r5, #0
 8001e1a:	f88d 5000 	strb.w	r5, [sp]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001e1e:	f88d 5001 	strb.w	r5, [sp, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001e22:	f104 0c10 	add.w	ip, r4, #16
 8001e26:	46ee      	mov	lr, sp
 8001e28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e40:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001e48:	2364      	movs	r3, #100	; 0x64
 8001e4a:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001e4e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001e52:	f8a4 3136 	strh.w	r3, [r4, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001e56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e5a:	f8a4 3138 	strh.w	r3, [r4, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001e5e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001e62:	f8a4 313a 	strh.w	r3, [r4, #314]	; 0x13a
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001e66:	2301      	movs	r3, #1
 8001e68:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001e6c:	461e      	mov	r6, r3
 8001e6e:	4632      	mov	r2, r6
 8001e70:	b2a9      	uxth	r1, r5
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff fea0 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
 8001e78:	4603      	mov	r3, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001e7a:	3501      	adds	r5, #1
 8001e7c:	2d06      	cmp	r5, #6
 8001e7e:	d002      	beq.n	8001e86 <VL53L0X_DataInit+0xae>
		if (Status == VL53L0X_ERROR_NONE)
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f4      	beq.n	8001e6e <VL53L0X_DataInit+0x96>
 8001e84:	e04c      	b.n	8001f20 <VL53L0X_DataInit+0x148>
	if (Status == VL53L0X_ERROR_NONE)
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d14a      	bne.n	8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fe92 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8001e94:	4603      	mov	r3, r0
 8001e96:	2800      	cmp	r0, #0
 8001e98:	d142      	bne.n	8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2103      	movs	r1, #3
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f7ff fe8a 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	bbd8      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2104      	movs	r1, #4
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff fe83 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	bba0      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f7ff fe7c 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	bb68      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ec4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fec7 	bl	8001c5e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	bb28      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff febf 	bl	8001c5e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	b9e8      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ee4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff feb7 	bl	8001c5e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b9a8      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff feb0 	bl	8001c5e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8001efe:	4603      	mov	r3, r0
 8001f00:	b970      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f002 fad8 	bl	80044c0 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001f10:	2301      	movs	r3, #1
 8001f12:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8001f16:	4603      	mov	r3, r0
 8001f18:	b910      	cbnz	r0, 8001f20 <VL53L0X_DataInit+0x148>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	b010      	add	sp, #64	; 0x40
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
 8001f26:	4603      	mov	r3, r0
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001f28:	2264      	movs	r2, #100	; 0x64
 8001f2a:	f8a4 2134 	strh.w	r2, [r4, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001f2e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001f32:	f8a4 2136 	strh.w	r2, [r4, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001f36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f3a:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001f3e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001f42:	f8a4 213a 	strh.w	r2, [r4, #314]	; 0x13a
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f884 214c 	strb.w	r2, [r4, #332]	; 0x14c
	return Status;
 8001f4c:	e7e8      	b.n	8001f20 <VL53L0X_DataInit+0x148>
 8001f4e:	bf00      	nop
 8001f50:	00016b85 	.word	0x00016b85
 8001f54:	000970a4 	.word	0x000970a4

08001f58 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001f58:	b508      	push	{r3, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f000 fdcc 	bl	8002af8 <VL53L0X_perform_ref_calibration>
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001f60:	bd08      	pop	{r3, pc}
	...

08001f64 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08f      	sub	sp, #60	; 0x3c
 8001f68:	4605      	mov	r5, r0
 8001f6a:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	aa0a      	add	r2, sp, #40	; 0x28
 8001f70:	2114      	movs	r1, #20
 8001f72:	f002 fa3f 	bl	80043f4 <VL53L0X_ReadMulti>

	if (Status == VL53L0X_ERROR_NONE) {
 8001f76:	4606      	mov	r6, r0
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d17b      	bne.n	8002074 <VL53L0X_GetRangingMeasurementData+0x110>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75a3      	strb	r3, [r4, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8001f80:	6023      	str	r3, [r4, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8001f82:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8001f86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8001f8a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8001f8e:	b280      	uxth	r0, r0
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8001f90:	6063      	str	r3, [r4, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8001f92:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8001f96:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001f9a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	0252      	lsls	r2, r2, #9
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8001fa2:	60e2      	str	r2, [r4, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8001fa4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 8001fa8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001fac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8001fb4:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8001fb6:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8001fba:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8001fbe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001fc2:	b29b      	uxth	r3, r3
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8001fc4:	82a3      	strh	r3, [r4, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8001fc6:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8001fca:	f8b5 c14e 	ldrh.w	ip, [r5, #334]	; 0x14e
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8001fce:	f895 6131 	ldrb.w	r6, [r5, #305]	; 0x131
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8001fd2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8001fd6:	d00f      	beq.n	8001ff8 <VL53L0X_GetRangingMeasurementData+0x94>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8001fd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8001fdc:	f50c 7cfa 	add.w	ip, ip, #500	; 0x1f4
 8001fe0:	4833      	ldr	r0, [pc, #204]	; (80020b0 <VL53L0X_GetRangingMeasurementData+0x14c>)
 8001fe2:	fb80 700c 	smull	r7, r0, r0, ip
 8001fe6:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8001fea:	ebcc 1ca0 	rsb	ip, ip, r0, asr #6
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8001fee:	7f28      	ldrb	r0, [r5, #28]
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d142      	bne.n	800207a <VL53L0X_GetRangingMeasurementData+0x116>
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8001ff4:	fa1f f08c 	uxth.w	r0, ip
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8001ff8:	2e00      	cmp	r6, #0
 8001ffa:	d052      	beq.n	80020a2 <VL53L0X_GetRangingMeasurementData+0x13e>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8001ffc:	0886      	lsrs	r6, r0, #2
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8001ffe:	0180      	lsls	r0, r0, #6
 8002000:	b2c0      	uxtb	r0, r0
			pRangingMeasurementData->RangeMilliMeter =
 8002002:	8126      	strh	r6, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
 8002004:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002006:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 800200a:	9001      	str	r0, [sp, #4]
 800200c:	9400      	str	r4, [sp, #0]
 800200e:	4628      	mov	r0, r5
 8002010:	f001 fff6 	bl	8004000 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002014:	4606      	mov	r6, r0
 8002016:	bb68      	cbnz	r0, 8002074 <VL53L0X_GetRangingMeasurementData+0x110>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002018:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 800201c:	7627      	strb	r7, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800201e:	f10d 0c0c 	add.w	ip, sp, #12
 8002022:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8002026:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800202a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800202e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8002032:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002036:	f8b4 e008 	ldrh.w	lr, [r4, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800203a:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800203c:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002040:	68e0      	ldr	r0, [r4, #12]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002042:	6921      	ldr	r1, [r4, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002044:	8aa2      	ldrh	r2, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002046:	6864      	ldr	r4, [r4, #4]
 8002048:	9404      	str	r4, [sp, #16]
 800204a:	f8ad e014 	strh.w	lr, [sp, #20]
 800204e:	f8ad c016 	strh.w	ip, [sp, #22]
 8002052:	9006      	str	r0, [sp, #24]
 8002054:	9107      	str	r1, [sp, #28]
 8002056:	f8ad 2020 	strh.w	r2, [sp, #32]
 800205a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800205e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8002062:	f105 0450 	add.w	r4, r5, #80	; 0x50
 8002066:	ad03      	add	r5, sp, #12
 8002068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002074:	4630      	mov	r0, r6
 8002076:	b00f      	add	sp, #60	; 0x3c
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
					* EffectiveSpadRtnCount) >> 8))
 800207a:	8c28      	ldrh	r0, [r5, #32]
 800207c:	fb03 f000 	mul.w	r0, r3, r0
 8002080:	1207      	asrs	r7, r0, #8
				if ((SignalRate
 8002082:	ebb2 2f20 	cmp.w	r2, r0, asr #8
 8002086:	d009      	beq.n	800209c <VL53L0X_GetRangingMeasurementData+0x138>
					(tmpuint16 * SignalRate)
 8002088:	fa1f fc8c 	uxth.w	ip, ip
 800208c:	fb02 fc0c 	mul.w	ip, r2, ip
						- ((XTalkCompensationRateMegaCps
 8002090:	1bd7      	subs	r7, r2, r7
						/ (SignalRate
 8002092:	fbbc fcf7 	udiv	ip, ip, r7
					XtalkRangeMilliMeter =
 8002096:	fa1f f08c 	uxth.w	r0, ip
 800209a:	e7ad      	b.n	8001ff8 <VL53L0X_GetRangingMeasurementData+0x94>
					if (RangeFractionalEnable)
 800209c:	b926      	cbnz	r6, 80020a8 <VL53L0X_GetRangingMeasurementData+0x144>
						XtalkRangeMilliMeter = 8888
 800209e:	f648 20e0 	movw	r0, #35552	; 0x8ae0
 80020a2:	4606      	mov	r6, r0
 80020a4:	2000      	movs	r0, #0
 80020a6:	e7ac      	b.n	8002002 <VL53L0X_GetRangingMeasurementData+0x9e>
						XtalkRangeMilliMeter = 8888;
 80020a8:	f242 20b8 	movw	r0, #8888	; 0x22b8
 80020ac:	e7a6      	b.n	8001ffc <VL53L0X_GetRangingMeasurementData+0x98>
 80020ae:	bf00      	nop
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	4606      	mov	r6, r0
 80020ba:	4614      	mov	r4, r2
 80020bc:	461d      	mov	r5, r3
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80020be:	f10d 0206 	add.w	r2, sp, #6
 80020c2:	210e      	movs	r1, #14
 80020c4:	f002 f9b2 	bl	800442c <VL53L0X_RdWord>
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80020c8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <VL53L0X_GetInterruptThresholds+0x40>)
 80020ce:	ea02 4241 	and.w	r2, r2, r1, lsl #17
 80020d2:	6022      	str	r2, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80020d4:	b108      	cbz	r0, 80020da <VL53L0X_GetInterruptThresholds+0x26>
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80020d6:	b002      	add	sp, #8
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80020da:	f10d 0206 	add.w	r2, sp, #6
 80020de:	210c      	movs	r1, #12
 80020e0:	4630      	mov	r0, r6
 80020e2:	f002 f9a3 	bl	800442c <VL53L0X_RdWord>
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80020e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80020ea:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <VL53L0X_GetInterruptThresholds+0x40>)
 80020ec:	ea03 4342 	and.w	r3, r3, r2, lsl #17
		*pThresholdHigh =
 80020f0:	602b      	str	r3, [r5, #0]
 80020f2:	e7f0      	b.n	80020d6 <VL53L0X_GetInterruptThresholds+0x22>
 80020f4:	1ffe0000 	.word	0x1ffe0000

080020f8 <VL53L0X_CheckAndLoadInterruptSettings>:
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80020f8:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 80020fc:	3b01      	subs	r3, #1
	if ((InterruptConfig ==
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <VL53L0X_CheckAndLoadInterruptSettings+0x10>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002104:	2000      	movs	r0, #0
}
 8002106:	4770      	bx	lr
{
 8002108:	b530      	push	{r4, r5, lr}
 800210a:	b083      	sub	sp, #12
 800210c:	4604      	mov	r4, r0
 800210e:	460d      	mov	r5, r1
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002110:	466b      	mov	r3, sp
 8002112:	aa01      	add	r2, sp, #4
 8002114:	2101      	movs	r1, #1
 8002116:	f7ff ffcd 	bl	80020b4 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002120:	d803      	bhi.n	800212a <VL53L0X_CheckAndLoadInterruptSettings+0x32>
 8002122:	9b00      	ldr	r3, [sp, #0]
 8002124:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002128:	d905      	bls.n	8002136 <VL53L0X_CheckAndLoadInterruptSettings+0x3e>
			(ThresholdHigh > 255*65536)) &&
 800212a:	b920      	cbnz	r0, 8002136 <VL53L0X_CheckAndLoadInterruptSettings+0x3e>
			if (StartNotStopFlag != 0) {
 800212c:	b12d      	cbz	r5, 800213a <VL53L0X_CheckAndLoadInterruptSettings+0x42>
				Status = VL53L0X_load_tuning_settings(Dev,
 800212e:	4911      	ldr	r1, [pc, #68]	; (8002174 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8002130:	4620      	mov	r0, r4
 8002132:	f001 fd51 	bl	8003bd8 <VL53L0X_load_tuning_settings>
}
 8002136:	b003      	add	sp, #12
 8002138:	bd30      	pop	{r4, r5, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800213a:	2204      	movs	r2, #4
 800213c:	21ff      	movs	r1, #255	; 0xff
 800213e:	4620      	mov	r0, r4
 8002140:	f002 f9be 	bl	80044c0 <VL53L0X_WrByte>
 8002144:	4605      	mov	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002146:	2200      	movs	r2, #0
 8002148:	2170      	movs	r1, #112	; 0x70
 800214a:	4620      	mov	r0, r4
 800214c:	f002 f9b8 	bl	80044c0 <VL53L0X_WrByte>
 8002150:	4305      	orrs	r5, r0
 8002152:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002154:	2200      	movs	r2, #0
 8002156:	21ff      	movs	r1, #255	; 0xff
 8002158:	4620      	mov	r0, r4
 800215a:	f002 f9b1 	bl	80044c0 <VL53L0X_WrByte>
 800215e:	4305      	orrs	r5, r0
 8002160:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	4620      	mov	r0, r4
 8002168:	f002 f9aa 	bl	80044c0 <VL53L0X_WrByte>
 800216c:	4328      	orrs	r0, r5
 800216e:	b240      	sxtb	r0, r0
 8002170:	e7e1      	b.n	8002136 <VL53L0X_CheckAndLoadInterruptSettings+0x3e>
 8002172:	bf00      	nop
 8002174:	2000028c 	.word	0x2000028c

08002178 <VL53L0X_StartMeasurement>:
{
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	4604      	mov	r4, r0
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800217e:	7c03      	ldrb	r3, [r0, #16]
	switch (DeviceMode) {
 8002180:	2b01      	cmp	r3, #1
 8002182:	d02c      	beq.n	80021de <VL53L0X_StartMeasurement+0x66>
 8002184:	2b03      	cmp	r3, #3
 8002186:	d038      	beq.n	80021fa <VL53L0X_StartMeasurement+0x82>
 8002188:	b11b      	cbz	r3, 8002192 <VL53L0X_StartMeasurement+0x1a>
 800218a:	f06f 0007 	mvn.w	r0, #7
}
 800218e:	b002      	add	sp, #8
 8002190:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002192:	2201      	movs	r2, #1
 8002194:	2100      	movs	r1, #0
 8002196:	f002 f993 	bl	80044c0 <VL53L0X_WrByte>
		Byte = StartStopByte;
 800219a:	2201      	movs	r2, #1
 800219c:	f88d 2007 	strb.w	r2, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d1f4      	bne.n	800218e <VL53L0X_StartMeasurement+0x16>
			LoopNb = 0;
 80021a4:	2500      	movs	r5, #0
					Status = VL53L0X_RdByte(Dev,
 80021a6:	462e      	mov	r6, r5
 80021a8:	e005      	b.n	80021b6 <VL53L0X_StartMeasurement+0x3e>
 80021aa:	f10d 0207 	add.w	r2, sp, #7
 80021ae:	4631      	mov	r1, r6
 80021b0:	4620      	mov	r0, r4
 80021b2:	f002 f8e5 	bl	8004380 <VL53L0X_RdByte>
				LoopNb = LoopNb + 1;
 80021b6:	3501      	adds	r5, #1
			} while (((Byte & StartStopByte) == StartStopByte)
 80021b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80021bc:	f013 0f01 	tst.w	r3, #1
 80021c0:	d008      	beq.n	80021d4 <VL53L0X_StartMeasurement+0x5c>
				&& (Status == VL53L0X_ERROR_NONE)
 80021c2:	b938      	cbnz	r0, 80021d4 <VL53L0X_StartMeasurement+0x5c>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80021c4:	2dc8      	cmp	r5, #200	; 0xc8
 80021c6:	d002      	beq.n	80021ce <VL53L0X_StartMeasurement+0x56>
				if (LoopNb > 0)
 80021c8:	2d00      	cmp	r5, #0
 80021ca:	d1ee      	bne.n	80021aa <VL53L0X_StartMeasurement+0x32>
 80021cc:	e7f3      	b.n	80021b6 <VL53L0X_StartMeasurement+0x3e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80021ce:	f06f 0006 	mvn.w	r0, #6
 80021d2:	e7dc      	b.n	800218e <VL53L0X_StartMeasurement+0x16>
 80021d4:	2dc8      	cmp	r5, #200	; 0xc8
 80021d6:	bf28      	it	cs
 80021d8:	f06f 0006 	mvncs.w	r0, #6
 80021dc:	e7d7      	b.n	800218e <VL53L0X_StartMeasurement+0x16>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80021de:	2101      	movs	r1, #1
 80021e0:	f7ff ff8a 	bl	80020f8 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 80021e4:	2202      	movs	r2, #2
 80021e6:	2100      	movs	r1, #0
 80021e8:	4620      	mov	r0, r4
 80021ea:	f002 f969 	bl	80044c0 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d1cd      	bne.n	800218e <VL53L0X_StartMeasurement+0x16>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80021f2:	2304      	movs	r3, #4
 80021f4:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 80021f8:	e7c9      	b.n	800218e <VL53L0X_StartMeasurement+0x16>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80021fa:	2101      	movs	r1, #1
 80021fc:	f7ff ff7c 	bl	80020f8 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002200:	2204      	movs	r2, #4
 8002202:	2100      	movs	r1, #0
 8002204:	4620      	mov	r0, r4
 8002206:	f002 f95b 	bl	80044c0 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800220a:	2800      	cmp	r0, #0
 800220c:	d1bf      	bne.n	800218e <VL53L0X_StartMeasurement+0x16>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800220e:	2304      	movs	r3, #4
 8002210:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002214:	e7bb      	b.n	800218e <VL53L0X_StartMeasurement+0x16>

08002216 <VL53L0X_PerformSingleMeasurement>:
{
 8002216:	b538      	push	{r3, r4, r5, lr}
 8002218:	4604      	mov	r4, r0
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800221a:	7c05      	ldrb	r5, [r0, #16]
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800221c:	b155      	cbz	r5, 8002234 <VL53L0X_PerformSingleMeasurement+0x1e>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800221e:	4620      	mov	r0, r4
 8002220:	f000 fdcc 	bl	8002dbc <VL53L0X_measurement_poll_for_completion>
 8002224:	4603      	mov	r3, r0
	if (Status == VL53L0X_ERROR_NONE
 8002226:	4305      	orrs	r5, r0
 8002228:	b268      	sxtb	r0, r5
 800222a:	b940      	cbnz	r0, 800223e <VL53L0X_PerformSingleMeasurement+0x28>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800222c:	2303      	movs	r3, #3
 800222e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002232:	e003      	b.n	800223c <VL53L0X_PerformSingleMeasurement+0x26>
		Status = VL53L0X_StartMeasurement(Dev);
 8002234:	f7ff ffa0 	bl	8002178 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8002238:	2800      	cmp	r0, #0
 800223a:	d0f0      	beq.n	800221e <VL53L0X_PerformSingleMeasurement+0x8>
}
 800223c:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800223e:	4618      	mov	r0, r3
 8002240:	e7fc      	b.n	800223c <VL53L0X_PerformSingleMeasurement+0x26>

08002242 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800224a:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 800224c:	f04f 0901 	mov.w	r9, #1
 8002250:	270b      	movs	r7, #11
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002252:	46a8      	mov	r8, r5
		Status = VL53L0X_WrByte(Dev,
 8002254:	464a      	mov	r2, r9
 8002256:	4639      	mov	r1, r7
 8002258:	4630      	mov	r0, r6
 800225a:	f002 f931 	bl	80044c0 <VL53L0X_WrByte>
 800225e:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8002260:	4642      	mov	r2, r8
 8002262:	4639      	mov	r1, r7
 8002264:	4630      	mov	r0, r6
 8002266:	f002 f92b 	bl	80044c0 <VL53L0X_WrByte>
 800226a:	4304      	orrs	r4, r0
 800226c:	b264      	sxtb	r4, r4
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800226e:	f10d 0207 	add.w	r2, sp, #7
 8002272:	2113      	movs	r1, #19
 8002274:	4630      	mov	r0, r6
 8002276:	f002 f883 	bl	8004380 <VL53L0X_RdByte>
 800227a:	4320      	orrs	r0, r4
 800227c:	b240      	sxtb	r0, r0
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800227e:	3501      	adds	r5, #1
 8002280:	b2ed      	uxtb	r5, r5
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002282:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002286:	f013 0f07 	tst.w	r3, #7
 800228a:	d004      	beq.n	8002296 <VL53L0X_ClearInterruptMask+0x54>
			&& (LoopCount < 3)
 800228c:	2d03      	cmp	r5, #3
 800228e:	d009      	beq.n	80022a4 <VL53L0X_ClearInterruptMask+0x62>
			&& (Status == VL53L0X_ERROR_NONE));
 8002290:	2800      	cmp	r0, #0
 8002292:	d0df      	beq.n	8002254 <VL53L0X_ClearInterruptMask+0x12>
 8002294:	e003      	b.n	800229e <VL53L0X_ClearInterruptMask+0x5c>


	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002296:	2d03      	cmp	r5, #3
 8002298:	bf28      	it	cs
 800229a:	f06f 000b 	mvncs.w	r0, #11

	LOG_FUNCTION_END(Status);
	return Status;
}
 800229e:	b003      	add	sp, #12
 80022a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80022a4:	f06f 000b 	mvn.w	r0, #11
 80022a8:	e7f9      	b.n	800229e <VL53L0X_ClearInterruptMask+0x5c>

080022aa <VL53L0X_PerformSingleRangingMeasurement>:
{
 80022aa:	b538      	push	{r3, r4, r5, lr}
 80022ac:	4604      	mov	r4, r0
 80022ae:	460d      	mov	r5, r1
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80022b0:	2100      	movs	r1, #0
 80022b2:	f7ff fb45 	bl	8001940 <VL53L0X_SetDeviceMode>
	if (Status == VL53L0X_ERROR_NONE)
 80022b6:	4603      	mov	r3, r0
 80022b8:	b108      	cbz	r0, 80022be <VL53L0X_PerformSingleRangingMeasurement+0x14>
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff ffa9 	bl	8002216 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 80022c4:	4603      	mov	r3, r0
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d1f7      	bne.n	80022ba <VL53L0X_PerformSingleRangingMeasurement+0x10>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80022ca:	4629      	mov	r1, r5
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff fe49 	bl	8001f64 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 80022d2:	4603      	mov	r3, r0
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d1f0      	bne.n	80022ba <VL53L0X_PerformSingleRangingMeasurement+0x10>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80022d8:	2100      	movs	r1, #0
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ffb1 	bl	8002242 <VL53L0X_ClearInterruptMask>
 80022e0:	4603      	mov	r3, r0
 80022e2:	e7ea      	b.n	80022ba <VL53L0X_PerformSingleRangingMeasurement+0x10>

080022e4 <VL53L0X_SetGpioConfig>:
{
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	f89d 6010 	ldrb.w	r6, [sp, #16]
	if (Pin != 0) {
 80022ea:	2900      	cmp	r1, #0
 80022ec:	f040 8099 	bne.w	8002422 <VL53L0X_SetGpioConfig+0x13e>
 80022f0:	4605      	mov	r5, r0
 80022f2:	461c      	mov	r4, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80022f4:	2a14      	cmp	r2, #20
 80022f6:	d009      	beq.n	800230c <VL53L0X_SetGpioConfig+0x28>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80022f8:	2a15      	cmp	r2, #21
 80022fa:	d00f      	beq.n	800231c <VL53L0X_SetGpioConfig+0x38>
			switch (Functionality) {
 80022fc:	2c04      	cmp	r4, #4
 80022fe:	f200 808d 	bhi.w	800241c <VL53L0X_SetGpioConfig+0x138>
 8002302:	e8df f004 	tbb	[pc, r4]
 8002306:	7373      	.short	0x7373
 8002308:	7373      	.short	0x7373
 800230a:	73          	.byte	0x73
 800230b:	00          	.byte	0x00
			data = 1;
 800230c:	2e00      	cmp	r6, #0
		Status = VL53L0X_WrByte(Dev,
 800230e:	bf0c      	ite	eq
 8002310:	2210      	moveq	r2, #16
 8002312:	2201      	movne	r2, #1
 8002314:	2184      	movs	r1, #132	; 0x84
 8002316:	f002 f8d3 	bl	80044c0 <VL53L0X_WrByte>
}
 800231a:	bd70      	pop	{r4, r5, r6, pc}
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800231c:	2201      	movs	r2, #1
 800231e:	21ff      	movs	r1, #255	; 0xff
 8002320:	f002 f8ce 	bl	80044c0 <VL53L0X_WrByte>
 8002324:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002326:	2200      	movs	r2, #0
 8002328:	4611      	mov	r1, r2
 800232a:	4628      	mov	r0, r5
 800232c:	f002 f8c8 	bl	80044c0 <VL53L0X_WrByte>
 8002330:	4304      	orrs	r4, r0
 8002332:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002334:	2200      	movs	r2, #0
 8002336:	21ff      	movs	r1, #255	; 0xff
 8002338:	4628      	mov	r0, r5
 800233a:	f002 f8c1 	bl	80044c0 <VL53L0X_WrByte>
 800233e:	4304      	orrs	r4, r0
 8002340:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002342:	2201      	movs	r2, #1
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	4628      	mov	r0, r5
 8002348:	f002 f8ba 	bl	80044c0 <VL53L0X_WrByte>
 800234c:	4304      	orrs	r4, r0
 800234e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002350:	2202      	movs	r2, #2
 8002352:	2185      	movs	r1, #133	; 0x85
 8002354:	4628      	mov	r0, r5
 8002356:	f002 f8b3 	bl	80044c0 <VL53L0X_WrByte>
 800235a:	4304      	orrs	r4, r0
 800235c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800235e:	2204      	movs	r2, #4
 8002360:	21ff      	movs	r1, #255	; 0xff
 8002362:	4628      	mov	r0, r5
 8002364:	f002 f8ac 	bl	80044c0 <VL53L0X_WrByte>
 8002368:	4304      	orrs	r4, r0
 800236a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800236c:	2200      	movs	r2, #0
 800236e:	21cd      	movs	r1, #205	; 0xcd
 8002370:	4628      	mov	r0, r5
 8002372:	f002 f8a5 	bl	80044c0 <VL53L0X_WrByte>
 8002376:	4304      	orrs	r4, r0
 8002378:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800237a:	2211      	movs	r2, #17
 800237c:	21cc      	movs	r1, #204	; 0xcc
 800237e:	4628      	mov	r0, r5
 8002380:	f002 f89e 	bl	80044c0 <VL53L0X_WrByte>
 8002384:	4304      	orrs	r4, r0
 8002386:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002388:	2207      	movs	r2, #7
 800238a:	21ff      	movs	r1, #255	; 0xff
 800238c:	4628      	mov	r0, r5
 800238e:	f002 f897 	bl	80044c0 <VL53L0X_WrByte>
 8002392:	4304      	orrs	r4, r0
 8002394:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002396:	2200      	movs	r2, #0
 8002398:	21be      	movs	r1, #190	; 0xbe
 800239a:	4628      	mov	r0, r5
 800239c:	f002 f890 	bl	80044c0 <VL53L0X_WrByte>
 80023a0:	4304      	orrs	r4, r0
 80023a2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80023a4:	2206      	movs	r2, #6
 80023a6:	21ff      	movs	r1, #255	; 0xff
 80023a8:	4628      	mov	r0, r5
 80023aa:	f002 f889 	bl	80044c0 <VL53L0X_WrByte>
 80023ae:	4304      	orrs	r4, r0
 80023b0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80023b2:	2209      	movs	r2, #9
 80023b4:	21cc      	movs	r1, #204	; 0xcc
 80023b6:	4628      	mov	r0, r5
 80023b8:	f002 f882 	bl	80044c0 <VL53L0X_WrByte>
 80023bc:	4304      	orrs	r4, r0
 80023be:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80023c0:	2200      	movs	r2, #0
 80023c2:	21ff      	movs	r1, #255	; 0xff
 80023c4:	4628      	mov	r0, r5
 80023c6:	f002 f87b 	bl	80044c0 <VL53L0X_WrByte>
 80023ca:	4304      	orrs	r4, r0
 80023cc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80023ce:	2201      	movs	r2, #1
 80023d0:	21ff      	movs	r1, #255	; 0xff
 80023d2:	4628      	mov	r0, r5
 80023d4:	f002 f874 	bl	80044c0 <VL53L0X_WrByte>
 80023d8:	4304      	orrs	r4, r0
 80023da:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80023dc:	2200      	movs	r2, #0
 80023de:	4611      	mov	r1, r2
 80023e0:	4628      	mov	r0, r5
 80023e2:	f002 f86d 	bl	80044c0 <VL53L0X_WrByte>
 80023e6:	4320      	orrs	r0, r4
 80023e8:	b240      	sxtb	r0, r0
 80023ea:	e796      	b.n	800231a <VL53L0X_SetGpioConfig+0x36>
			Status = VL53L0X_WrByte(Dev,
 80023ec:	4622      	mov	r2, r4
 80023ee:	210a      	movs	r1, #10
 80023f0:	f002 f866 	bl	80044c0 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d190      	bne.n	800231a <VL53L0X_SetGpioConfig+0x36>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80023f8:	1e33      	subs	r3, r6, #0
 80023fa:	bf18      	it	ne
 80023fc:	2301      	movne	r3, #1
			Status = VL53L0X_UpdateByte(Dev,
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	22ef      	movs	r2, #239	; 0xef
 8002402:	2184      	movs	r1, #132	; 0x84
 8002404:	4628      	mov	r0, r5
 8002406:	f002 f87d 	bl	8004504 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 800240a:	2800      	cmp	r0, #0
 800240c:	d185      	bne.n	800231a <VL53L0X_SetGpioConfig+0x36>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800240e:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002412:	2100      	movs	r1, #0
 8002414:	4628      	mov	r0, r5
 8002416:	f7ff ff14 	bl	8002242 <VL53L0X_ClearInterruptMask>
 800241a:	e77e      	b.n	800231a <VL53L0X_SetGpioConfig+0x36>
			switch (Functionality) {
 800241c:	f06f 000a 	mvn.w	r0, #10
 8002420:	e7e8      	b.n	80023f4 <VL53L0X_SetGpioConfig+0x110>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002422:	f06f 0009 	mvn.w	r0, #9
 8002426:	e778      	b.n	800231a <VL53L0X_SetGpioConfig+0x36>

08002428 <VL53L0X_StaticInit>:
{
 8002428:	b530      	push	{r4, r5, lr}
 800242a:	b097      	sub	sp, #92	; 0x5c
 800242c:	4604      	mov	r4, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	2100      	movs	r1, #0
 8002432:	a806      	add	r0, sp, #24
 8002434:	f006 f95c 	bl	80086f0 <memset>
	uint16_t tempword = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t tempbyte = 0;
 800243e:	f88d 3015 	strb.w	r3, [sp, #21]
	uint8_t isApertureSpads = 0;
 8002442:	f88d 3014 	strb.w	r3, [sp, #20]
	uint32_t refSpadCount = 0;
 8002446:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002448:	2101      	movs	r1, #1
 800244a:	4620      	mov	r0, r4
 800244c:	f000 fd19 	bl	8002e82 <VL53L0X_get_info_from_device>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002450:	f894 1113 	ldrb.w	r1, [r4, #275]	; 0x113
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002454:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8002458:	2a01      	cmp	r2, #1
 800245a:	d802      	bhi.n	8002462 <VL53L0X_StaticInit+0x3a>
 800245c:	d010      	beq.n	8002480 <VL53L0X_StaticInit+0x58>
		((ApertureSpads == 0) && (count > 12)))
 800245e:	290c      	cmp	r1, #12
 8002460:	d910      	bls.n	8002484 <VL53L0X_StaticInit+0x5c>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002462:	aa05      	add	r2, sp, #20
 8002464:	a904      	add	r1, sp, #16
 8002466:	4620      	mov	r0, r4
 8002468:	f000 fb64 	bl	8002b34 <VL53L0X_perform_ref_spad_management>
 800246c:	4603      	mov	r3, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 80ab 	bne.w	80025ca <VL53L0X_StaticInit+0x1a2>
		if (UseInternalTuningSettings == 0)
 8002474:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8002478:	b94b      	cbnz	r3, 800248e <VL53L0X_StaticInit+0x66>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800247a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 800247e:	e007      	b.n	8002490 <VL53L0X_StaticInit+0x68>
		((ApertureSpads == 1) && (count > 32)) ||
 8002480:	2920      	cmp	r1, #32
 8002482:	d8ee      	bhi.n	8002462 <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002484:	4620      	mov	r0, r4
 8002486:	f000 f9d2 	bl	800282e <VL53L0X_set_reference_spads>
 800248a:	4603      	mov	r3, r0
 800248c:	e7ef      	b.n	800246e <VL53L0X_StaticInit+0x46>
			pTuningSettingBuffer = DefaultTuningSettings;
 800248e:	4950      	ldr	r1, [pc, #320]	; (80025d0 <VL53L0X_StaticInit+0x1a8>)
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002490:	4620      	mov	r0, r4
 8002492:	f001 fba1 	bl	8003bd8 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8002496:	4603      	mov	r3, r0
 8002498:	2800      	cmp	r0, #0
 800249a:	f040 8096 	bne.w	80025ca <VL53L0X_StaticInit+0x1a2>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800249e:	2100      	movs	r1, #0
 80024a0:	9100      	str	r1, [sp, #0]
 80024a2:	2304      	movs	r3, #4
 80024a4:	460a      	mov	r2, r1
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ff1c 	bl	80022e4 <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 80024ac:	4603      	mov	r3, r0
 80024ae:	2800      	cmp	r0, #0
 80024b0:	f040 808b 	bne.w	80025ca <VL53L0X_StaticInit+0x1a2>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80024b4:	2201      	movs	r2, #1
 80024b6:	21ff      	movs	r1, #255	; 0xff
 80024b8:	4620      	mov	r0, r4
 80024ba:	f002 f801 	bl	80044c0 <VL53L0X_WrByte>
 80024be:	4605      	mov	r5, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80024c0:	f10d 0216 	add.w	r2, sp, #22
 80024c4:	2184      	movs	r1, #132	; 0x84
 80024c6:	4620      	mov	r0, r4
 80024c8:	f001 ffb0 	bl	800442c <VL53L0X_RdWord>
 80024cc:	4305      	orrs	r5, r0
 80024ce:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80024d0:	2200      	movs	r2, #0
 80024d2:	21ff      	movs	r1, #255	; 0xff
 80024d4:	4620      	mov	r0, r4
 80024d6:	f001 fff3 	bl	80044c0 <VL53L0X_WrByte>
 80024da:	ea45 0300 	orr.w	r3, r5, r0
 80024de:	b25b      	sxtb	r3, r3
	if (Status == VL53L0X_ERROR_NONE) {
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d172      	bne.n	80025ca <VL53L0X_StaticInit+0x1a2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80024e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80024ee:	a906      	add	r1, sp, #24
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7ff fc30 	bl	8001d56 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80024f6:	4603      	mov	r3, r0
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d166      	bne.n	80025ca <VL53L0X_StaticInit+0x1a2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80024fc:	f10d 0115 	add.w	r1, sp, #21
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fa2f 	bl	8001964 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8002506:	4603      	mov	r3, r0
 8002508:	2800      	cmp	r0, #0
 800250a:	d15e      	bne.n	80025ca <VL53L0X_StaticInit+0x1a2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800250c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002510:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002514:	f104 0510 	add.w	r5, r4, #16
 8002518:	f10d 0c18 	add.w	ip, sp, #24
 800251c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002522:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002528:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800252c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002532:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8002536:	f10d 0215 	add.w	r2, sp, #21
 800253a:	2101      	movs	r1, #1
 800253c:	4620      	mov	r0, r4
 800253e:	f001 ff1f 	bl	8004380 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002542:	4603      	mov	r3, r0
 8002544:	2800      	cmp	r0, #0
 8002546:	d140      	bne.n	80025ca <VL53L0X_StaticInit+0x1a2>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002548:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800254c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002550:	2200      	movs	r2, #0
 8002552:	4611      	mov	r1, r2
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff fa1d 	bl	8001994 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800255a:	4603      	mov	r3, r0
 800255c:	bba8      	cbnz	r0, 80025ca <VL53L0X_StaticInit+0x1a2>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800255e:	2200      	movs	r2, #0
 8002560:	2102      	movs	r1, #2
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff fa16 	bl	8001994 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002568:	4603      	mov	r3, r0
 800256a:	bb70      	cbnz	r0, 80025ca <VL53L0X_StaticInit+0x1a2>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800256c:	2303      	movs	r3, #3
 800256e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002572:	f10d 020f 	add.w	r2, sp, #15
 8002576:	2100      	movs	r1, #0
 8002578:	4620      	mov	r0, r4
 800257a:	f001 fa31 	bl	80039e0 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 800257e:	4603      	mov	r3, r0
 8002580:	bb18      	cbnz	r0, 80025ca <VL53L0X_StaticInit+0x1a2>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002582:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002586:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800258a:	f10d 020f 	add.w	r2, sp, #15
 800258e:	2101      	movs	r1, #1
 8002590:	4620      	mov	r0, r4
 8002592:	f001 fa25 	bl	80039e0 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8002596:	4603      	mov	r3, r0
 8002598:	b9b8      	cbnz	r0, 80025ca <VL53L0X_StaticInit+0x1a2>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800259a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800259e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 80025a2:	aa02      	add	r2, sp, #8
 80025a4:	2103      	movs	r1, #3
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7ff faae 	bl	8001b08 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80025ac:	4603      	mov	r3, r0
 80025ae:	b960      	cbnz	r0, 80025ca <VL53L0X_StaticInit+0x1a2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80025b0:	9b02      	ldr	r3, [sp, #8]
 80025b2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 80025b6:	aa02      	add	r2, sp, #8
 80025b8:	2104      	movs	r1, #4
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff faa4 	bl	8001b08 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80025c0:	4603      	mov	r3, r0
 80025c2:	b910      	cbnz	r0, 80025ca <VL53L0X_StaticInit+0x1a2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80025c4:	9a02      	ldr	r2, [sp, #8]
 80025c6:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	b017      	add	sp, #92	; 0x5c
 80025ce:	bd30      	pop	{r4, r5, pc}
 80025d0:	20000198 	.word	0x20000198

080025d4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80025d4:	b510      	push	{r4, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80025da:	f10d 0207 	add.w	r2, sp, #7
 80025de:	2113      	movs	r1, #19
 80025e0:	f001 fece 	bl	8004380 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 80025e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025e8:	f003 0207 	and.w	r2, r3, #7
 80025ec:	6022      	str	r2, [r4, #0]

	if (Byte & 0x18)
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80025ee:	f013 0f18 	tst.w	r3, #24

	LOG_FUNCTION_END(Status);
	return Status;
}
 80025f2:	bf18      	it	ne
 80025f4:	f06f 0005 	mvnne.w	r0, #5
 80025f8:	b002      	add	sp, #8
 80025fa:	bd10      	pop	{r4, pc}

080025fc <VL53L0X_GetMeasurementDataReady>:
{
 80025fc:	b510      	push	{r4, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8002602:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00e      	beq.n	8002628 <VL53L0X_GetMeasurementDataReady+0x2c>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800260a:	f10d 0207 	add.w	r2, sp, #7
 800260e:	2114      	movs	r1, #20
 8002610:	f001 feb6 	bl	8004380 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002614:	b988      	cbnz	r0, 800263a <VL53L0X_GetMeasurementDataReady+0x3e>
			if (SysRangeStatusRegister & 0x01)
 8002616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800261a:	f013 0f01 	tst.w	r3, #1
				*pMeasurementDataReady = 1;
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
				*pMeasurementDataReady = 0;
 8002622:	2300      	moveq	r3, #0
 8002624:	7023      	strb	r3, [r4, #0]
 8002626:	e008      	b.n	800263a <VL53L0X_GetMeasurementDataReady+0x3e>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002628:	4669      	mov	r1, sp
 800262a:	f7ff ffd3 	bl	80025d4 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 800262e:	9b00      	ldr	r3, [sp, #0]
 8002630:	2b04      	cmp	r3, #4
			*pMeasurementDataReady = 1;
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
			*pMeasurementDataReady = 0;
 8002636:	2300      	movne	r3, #0
 8002638:	7023      	strb	r3, [r4, #0]
}
 800263a:	b002      	add	sp, #8
 800263c:	bd10      	pop	{r4, pc}

0800263e <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800263e:	b508      	push	{r3, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002640:	f000 fa78 	bl	8002b34 <VL53L0X_perform_ref_spad_management>
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8002644:	bd08      	pop	{r3, pc}

08002646 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002646:	b510      	push	{r4, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800264c:	f10d 0206 	add.w	r2, sp, #6
 8002650:	2128      	movs	r1, #40	; 0x28
 8002652:	f001 feeb 	bl	800442c <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8002656:	b960      	cbnz	r0, 8002672 <VL53L0X_get_offset_calibration_data_micro_meter+0x2c>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002658:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800265c:	f3c2 030b 	ubfx	r3, r2, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002660:	f412 6f00 	tst.w	r2, #2048	; 0x800
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002664:	bf18      	it	ne
 8002666:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
					* 250;
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800266a:	22fa      	movs	r2, #250	; 0xfa
 800266c:	fb02 f303 	mul.w	r3, r2, r3
			*pOffsetCalibrationDataMicroMeter =
 8002670:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8002672:	b002      	add	sp, #8
 8002674:	bd10      	pop	{r4, pc}

08002676 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002676:	b530      	push	{r4, r5, lr}
 8002678:	460c      	mov	r4, r1
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800267a:	f04f 31ff 	mov.w	r1, #4294967295
 800267e:	6019      	str	r1, [r3, #0]

	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002680:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 8002684:	d920      	bls.n	80026c8 <get_next_good_spad+0x52>
 8002686:	08d1      	lsrs	r1, r2, #3
 8002688:	f002 0507 	and.w	r5, r2, #7
 800268c:	1e4a      	subs	r2, r1, #1
 800268e:	eb00 0e02 	add.w	lr, r0, r2
 8002692:	468c      	mov	ip, r1
 8002694:	e003      	b.n	800269e <get_next_good_spad+0x28>
				coarseIndex++) {
 8002696:	f10c 0c01 	add.w	ip, ip, #1
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800269a:	4564      	cmp	r4, ip
 800269c:	d014      	beq.n	80026c8 <get_next_good_spad+0x52>
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
 800269e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!

		if (coarseIndex == startIndex) {
 80026a2:	4561      	cmp	r1, ip
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80026a4:	bf03      	ittte	eq
 80026a6:	4128      	asreq	r0, r5
 80026a8:	b2c0      	uxtbeq	r0, r0
			fineIndex = fineOffset;
 80026aa:	462a      	moveq	r2, r5
		fineIndex = 0;
 80026ac:	2200      	movne	r2, #0
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 80026ae:	f010 0f01 	tst.w	r0, #1
 80026b2:	d106      	bne.n	80026c2 <get_next_good_spad+0x4c>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
				break;
			}
			dataByte >>= 1;
 80026b4:	0840      	lsrs	r0, r0, #1
			fineIndex++;
 80026b6:	3201      	adds	r2, #1
		while (fineIndex < cSpadsPerByte) {
 80026b8:	2a08      	cmp	r2, #8
 80026ba:	d0ec      	beq.n	8002696 <get_next_good_spad+0x20>
			if ((dataByte & 0x1) == 1) {
 80026bc:	f010 0f01 	tst.w	r0, #1
 80026c0:	d0f8      	beq.n	80026b4 <get_next_good_spad+0x3e>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80026c2:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 80026c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80026c8:	bd30      	pop	{r4, r5, pc}
	...

080026cc <is_aperture>:
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
 80026cc:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80026ce:	4b03      	ldr	r3, [pc, #12]	; (80026dc <is_aperture+0x10>)
 80026d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 80026d4:	3800      	subs	r0, #0
 80026d6:	bf18      	it	ne
 80026d8:	2001      	movne	r0, #1
 80026da:	4770      	bx	lr
 80026dc:	20000444 	.word	0x20000444

080026e0 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80026e0:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	fineIndex = spadIndex % cSpadsPerByte;
 80026e4:	f002 0307 	and.w	r3, r2, #7
	if (coarseIndex >= size)
 80026e8:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 80026ec:	d908      	bls.n	8002700 <enable_spad_bit+0x20>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80026ee:	2201      	movs	r2, #1
 80026f0:	409a      	lsls	r2, r3
 80026f2:	f810 300c 	ldrb.w	r3, [r0, ip]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f800 300c 	strb.w	r3, [r0, ip]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80026fc:	2000      	movs	r0, #0
 80026fe:	4770      	bx	lr
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002700:	f06f 0031 	mvn.w	r0, #49	; 0x31

	return status;
}
 8002704:	4770      	bx	lr

08002706 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002706:	b508      	push	{r3, lr}
 8002708:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800270a:	2306      	movs	r3, #6
 800270c:	21b0      	movs	r1, #176	; 0xb0
 800270e:	f001 fe53 	bl	80043b8 <VL53L0X_WriteMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
}
 8002712:	bd08      	pop	{r3, pc}

08002714 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002714:	b508      	push	{r3, lr}
 8002716:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002718:	2306      	movs	r3, #6
 800271a:	21b0      	movs	r1, #176	; 0xb0
 800271c:	f001 fe6a 	bl	80043f4 <VL53L0X_ReadMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
}
 8002720:	bd08      	pop	{r3, pc}

08002722 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002726:	b087      	sub	sp, #28
 8002728:	9001      	str	r0, [sp, #4]
 800272a:	9200      	str	r2, [sp, #0]
 800272c:	4698      	mov	r8, r3
 800272e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002730:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8002734:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8002736:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800273a:	9605      	str	r6, [sp, #20]
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 800273c:	f1ba 0f00 	cmp.w	sl, #0
 8002740:	d01a      	beq.n	8002778 <enable_ref_spads+0x56>
 8002742:	4689      	mov	r9, r1
 8002744:	2500      	movs	r5, #0
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002746:	ab05      	add	r3, sp, #20
 8002748:	4632      	mov	r2, r6
 800274a:	4639      	mov	r1, r7
 800274c:	9800      	ldr	r0, [sp, #0]
 800274e:	f7ff ff92 	bl	8002676 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002752:	9c05      	ldr	r4, [sp, #20]
 8002754:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002758:	d029      	beq.n	80027ae <enable_ref_spads+0x8c>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800275a:	eb04 000b 	add.w	r0, r4, fp
 800275e:	f7ff ffb5 	bl	80026cc <is_aperture>
 8002762:	4548      	cmp	r0, r9
 8002764:	d123      	bne.n	80027ae <enable_ref_spads+0x8c>
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
 8002766:	4622      	mov	r2, r4
 8002768:	4639      	mov	r1, r7
 800276a:	4640      	mov	r0, r8
 800276c:	f7ff ffb8 	bl	80026e0 <enable_spad_bit>
		currentSpad++;
 8002770:	1c66      	adds	r6, r4, #1
	for (index = 0; index < spadCount; index++) {
 8002772:	3501      	adds	r5, #1
 8002774:	45aa      	cmp	sl, r5
 8002776:	d1e6      	bne.n	8002746 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800277a:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
		status = set_ref_spad_map(Dev, spadArray);
 800277c:	4641      	mov	r1, r8
 800277e:	9801      	ldr	r0, [sp, #4]
 8002780:	f7ff ffc1 	bl	8002706 <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
 8002784:	b9b8      	cbnz	r0, 80027b6 <enable_ref_spads+0x94>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002786:	a903      	add	r1, sp, #12
 8002788:	9801      	ldr	r0, [sp, #4]
 800278a:	f7ff ffc3 	bl	8002714 <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800278e:	b197      	cbz	r7, 80027b6 <enable_ref_spads+0x94>
 8002790:	4643      	mov	r3, r8
 8002792:	aa03      	add	r2, sp, #12
 8002794:	44b8      	add	r8, r7
			if (spadArray[i] != checkSpadArray[i]) {
 8002796:	f813 4b01 	ldrb.w	r4, [r3], #1
 800279a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800279e:	428c      	cmp	r4, r1
 80027a0:	d102      	bne.n	80027a8 <enable_ref_spads+0x86>
		while (i < size) {
 80027a2:	4543      	cmp	r3, r8
 80027a4:	d1f7      	bne.n	8002796 <enable_ref_spads+0x74>
 80027a6:	e006      	b.n	80027b6 <enable_ref_spads+0x94>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80027a8:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80027ac:	e003      	b.n	80027b6 <enable_ref_spads+0x94>
	*lastSpad = currentSpad;
 80027ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80027b0:	601e      	str	r6, [r3, #0]
 80027b2:	f06f 0031 	mvn.w	r0, #49	; 0x31
			}
			i++;
		}
	}
	return status;
}
 80027b6:	b007      	add	sp, #28
 80027b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027bc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80027c4:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 80027c8:	22c0      	movs	r2, #192	; 0xc0
 80027ca:	2101      	movs	r1, #1
 80027cc:	f001 fe78 	bl	80044c0 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80027d0:	4603      	mov	r3, r0
 80027d2:	b110      	cbz	r0, 80027da <perform_ref_signal_measurement+0x1e>
		if (status == VL53L0X_ERROR_NONE)
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
	}

	return status;
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	b008      	add	sp, #32
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80027da:	a901      	add	r1, sp, #4
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff fd64 	bl	80022aa <VL53L0X_PerformSingleRangingMeasurement>
	if (status == VL53L0X_ERROR_NONE)
 80027e2:	4603      	mov	r3, r0
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d1f5      	bne.n	80027d4 <perform_ref_signal_measurement+0x18>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80027e8:	2201      	movs	r2, #1
 80027ea:	21ff      	movs	r1, #255	; 0xff
 80027ec:	4620      	mov	r0, r4
 80027ee:	f001 fe67 	bl	80044c0 <VL53L0X_WrByte>
	if (status == VL53L0X_ERROR_NONE)
 80027f2:	4603      	mov	r3, r0
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d1ed      	bne.n	80027d4 <perform_ref_signal_measurement+0x18>
		status = VL53L0X_RdWord(Dev,
 80027f8:	462a      	mov	r2, r5
 80027fa:	21b6      	movs	r1, #182	; 0xb6
 80027fc:	4620      	mov	r0, r4
 80027fe:	f001 fe15 	bl	800442c <VL53L0X_RdWord>
	if (status == VL53L0X_ERROR_NONE)
 8002802:	4603      	mov	r3, r0
 8002804:	2800      	cmp	r0, #0
 8002806:	d1e5      	bne.n	80027d4 <perform_ref_signal_measurement+0x18>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002808:	2200      	movs	r2, #0
 800280a:	21ff      	movs	r1, #255	; 0xff
 800280c:	4620      	mov	r0, r4
 800280e:	f001 fe57 	bl	80044c0 <VL53L0X_WrByte>
	if (status == VL53L0X_ERROR_NONE) {
 8002812:	4603      	mov	r3, r0
 8002814:	2800      	cmp	r0, #0
 8002816:	d1dd      	bne.n	80027d4 <perform_ref_signal_measurement+0x18>
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002818:	4632      	mov	r2, r6
 800281a:	2101      	movs	r1, #1
 800281c:	4620      	mov	r0, r4
 800281e:	f001 fe4f 	bl	80044c0 <VL53L0X_WrByte>
		if (status == VL53L0X_ERROR_NONE)
 8002822:	4603      	mov	r3, r0
 8002824:	2800      	cmp	r0, #0
 8002826:	d1d5      	bne.n	80027d4 <perform_ref_signal_measurement+0x18>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002828:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130
 800282c:	e7d2      	b.n	80027d4 <perform_ref_signal_measurement+0x18>

0800282e <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800282e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002830:	b089      	sub	sp, #36	; 0x24
 8002832:	4605      	mov	r5, r0
 8002834:	460f      	mov	r7, r1
 8002836:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002838:	2201      	movs	r2, #1
 800283a:	21ff      	movs	r1, #255	; 0xff
 800283c:	f001 fe40 	bl	80044c0 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002840:	b348      	cbz	r0, 8002896 <VL53L0X_set_reference_spads+0x68>
		Status = VL53L0X_WrByte(Dev,
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	f885 3124 	strb.w	r3, [r5, #292]	; 0x124
 8002848:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125
 800284c:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
 8002850:	f885 3127 	strb.w	r3, [r5, #295]	; 0x127
 8002854:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
 8002858:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129

	if (isApertureSpads) {
 800285c:	2e00      	cmp	r6, #0
 800285e:	d135      	bne.n	80028cc <VL53L0X_set_reference_spads+0x9e>
	uint32_t currentSpadIndex = 0;
 8002860:	461c      	mov	r4, r3
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8002862:	ab07      	add	r3, sp, #28
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	9703      	str	r7, [sp, #12]
 8002868:	9402      	str	r4, [sp, #8]
 800286a:	23b4      	movs	r3, #180	; 0xb4
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2306      	movs	r3, #6
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f505 7392 	add.w	r3, r5, #292	; 0x124
 8002876:	f505 7295 	add.w	r2, r5, #298	; 0x12a
 800287a:	4631      	mov	r1, r6
 800287c:	4628      	mov	r0, r5
 800287e:	f7ff ff50 	bl	8002722 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8002882:	b930      	cbnz	r0, 8002892 <VL53L0X_set_reference_spads+0x64>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002884:	2301      	movs	r3, #1
 8002886:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800288a:	f885 7113 	strb.w	r7, [r5, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800288e:	f885 6114 	strb.w	r6, [r5, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8002892:	b009      	add	sp, #36	; 0x24
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_WrByte(Dev,
 8002896:	2200      	movs	r2, #0
 8002898:	214f      	movs	r1, #79	; 0x4f
 800289a:	4628      	mov	r0, r5
 800289c:	f001 fe10 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d1ce      	bne.n	8002842 <VL53L0X_set_reference_spads+0x14>
		Status = VL53L0X_WrByte(Dev,
 80028a4:	222c      	movs	r2, #44	; 0x2c
 80028a6:	214e      	movs	r1, #78	; 0x4e
 80028a8:	4628      	mov	r0, r5
 80028aa:	f001 fe09 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d1c7      	bne.n	8002842 <VL53L0X_set_reference_spads+0x14>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80028b2:	2200      	movs	r2, #0
 80028b4:	21ff      	movs	r1, #255	; 0xff
 80028b6:	4628      	mov	r0, r5
 80028b8:	f001 fe02 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80028bc:	2800      	cmp	r0, #0
 80028be:	d1c0      	bne.n	8002842 <VL53L0X_set_reference_spads+0x14>
		Status = VL53L0X_WrByte(Dev,
 80028c0:	22b4      	movs	r2, #180	; 0xb4
 80028c2:	21b6      	movs	r1, #182	; 0xb6
 80028c4:	4628      	mov	r0, r5
 80028c6:	f001 fdfb 	bl	80044c0 <VL53L0X_WrByte>
 80028ca:	e7ba      	b.n	8002842 <VL53L0X_set_reference_spads+0x14>
	uint32_t currentSpadIndex = 0;
 80028cc:	2400      	movs	r4, #0
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80028ce:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80028d2:	f7ff fefb 	bl	80026cc <is_aperture>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d1c3      	bne.n	8002862 <VL53L0X_set_reference_spads+0x34>
 80028da:	2c2c      	cmp	r4, #44	; 0x2c
 80028dc:	d0c1      	beq.n	8002862 <VL53L0X_set_reference_spads+0x34>
			currentSpadIndex++;
 80028de:	3401      	adds	r4, #1
 80028e0:	e7f5      	b.n	80028ce <VL53L0X_set_reference_spads+0xa0>

080028e2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80028e2:	b510      	push	{r4, lr}
 80028e4:	4604      	mov	r4, r0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80028e6:	f041 0201 	orr.w	r2, r1, #1
 80028ea:	2100      	movs	r1, #0
 80028ec:	f001 fde8 	bl	80044c0 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80028f0:	4603      	mov	r3, r0
 80028f2:	b108      	cbz	r0, 80028f8 <VL53L0X_perform_single_ref_calibration+0x16>

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);

	return Status;
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd10      	pop	{r4, pc}
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 fa5f 	bl	8002dbc <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE)
 80028fe:	4603      	mov	r3, r0
 8002900:	2800      	cmp	r0, #0
 8002902:	d1f7      	bne.n	80028f4 <VL53L0X_perform_single_ref_calibration+0x12>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002904:	2100      	movs	r1, #0
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fc9b 	bl	8002242 <VL53L0X_ClearInterruptMask>
	if (Status == VL53L0X_ERROR_NONE)
 800290c:	4603      	mov	r3, r0
 800290e:	2800      	cmp	r0, #0
 8002910:	d1f0      	bne.n	80028f4 <VL53L0X_perform_single_ref_calibration+0x12>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8002912:	2200      	movs	r2, #0
 8002914:	4611      	mov	r1, r2
 8002916:	4620      	mov	r0, r4
 8002918:	f001 fdd2 	bl	80044c0 <VL53L0X_WrByte>
 800291c:	4603      	mov	r3, r0
 800291e:	e7e9      	b.n	80028f4 <VL53L0X_perform_single_ref_calibration+0x12>

08002920 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	b083      	sub	sp, #12
 8002926:	4605      	mov	r5, r0
 8002928:	460e      	mov	r6, r1
 800292a:	4690      	mov	r8, r2
 800292c:	461f      	mov	r7, r3
 800292e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8002932:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8002936:	f04f 0b00 	mov.w	fp, #0
 800293a:	f88d b007 	strb.w	fp, [sp, #7]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800293e:	2201      	movs	r2, #1
 8002940:	21ff      	movs	r1, #255	; 0xff
 8002942:	f001 fdbd 	bl	80044c0 <VL53L0X_WrByte>
 8002946:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002948:	465a      	mov	r2, fp
 800294a:	4659      	mov	r1, fp
 800294c:	4628      	mov	r0, r5
 800294e:	f001 fdb7 	bl	80044c0 <VL53L0X_WrByte>
 8002952:	4304      	orrs	r4, r0
 8002954:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002956:	465a      	mov	r2, fp
 8002958:	21ff      	movs	r1, #255	; 0xff
 800295a:	4628      	mov	r0, r5
 800295c:	f001 fdb0 	bl	80044c0 <VL53L0X_WrByte>
 8002960:	4304      	orrs	r4, r0
 8002962:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8002964:	b3a6      	cbz	r6, 80029d0 <VL53L0X_ref_calibration_io+0xb0>
		if (vhv_enable)
 8002966:	f1ba 0f00 	cmp.w	sl, #0
 800296a:	d120      	bne.n	80029ae <VL53L0X_ref_calibration_io+0x8e>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
		if (phase_enable)
 800296c:	f1b9 0f00 	cmp.w	r9, #0
 8002970:	d125      	bne.n	80029be <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002972:	2201      	movs	r2, #1
 8002974:	21ff      	movs	r1, #255	; 0xff
 8002976:	4628      	mov	r0, r5
 8002978:	f001 fda2 	bl	80044c0 <VL53L0X_WrByte>
 800297c:	4304      	orrs	r4, r0
 800297e:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002980:	2201      	movs	r2, #1
 8002982:	2100      	movs	r1, #0
 8002984:	4628      	mov	r0, r5
 8002986:	f001 fd9b 	bl	80044c0 <VL53L0X_WrByte>
 800298a:	4304      	orrs	r4, r0
 800298c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800298e:	2200      	movs	r2, #0
 8002990:	21ff      	movs	r1, #255	; 0xff
 8002992:	4628      	mov	r0, r5
 8002994:	f001 fd94 	bl	80044c0 <VL53L0X_WrByte>

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800299c:	f023 0310 	bic.w	r3, r3, #16
 80029a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80029a2:	7013      	strb	r3, [r2, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80029a4:	4320      	orrs	r0, r4

	return Status;
}
 80029a6:	b240      	sxtb	r0, r0
 80029a8:	b003      	add	sp, #12
 80029aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80029ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029b0:	21cb      	movs	r1, #203	; 0xcb
 80029b2:	4628      	mov	r0, r5
 80029b4:	f001 fce4 	bl	8004380 <VL53L0X_RdByte>
 80029b8:	4320      	orrs	r0, r4
 80029ba:	b244      	sxtb	r4, r0
 80029bc:	e7d6      	b.n	800296c <VL53L0X_ref_calibration_io+0x4c>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80029be:	f10d 0207 	add.w	r2, sp, #7
 80029c2:	21ee      	movs	r1, #238	; 0xee
 80029c4:	4628      	mov	r0, r5
 80029c6:	f001 fcdb 	bl	8004380 <VL53L0X_RdByte>
 80029ca:	4320      	orrs	r0, r4
 80029cc:	b244      	sxtb	r4, r0
 80029ce:	e7d0      	b.n	8002972 <VL53L0X_ref_calibration_io+0x52>
		if (vhv_enable)
 80029d0:	f1ba 0f00 	cmp.w	sl, #0
 80029d4:	d10b      	bne.n	80029ee <VL53L0X_ref_calibration_io+0xce>
		if (phase_enable)
 80029d6:	f1b9 0f00 	cmp.w	r9, #0
 80029da:	d0ca      	beq.n	8002972 <VL53L0X_ref_calibration_io+0x52>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80029dc:	463b      	mov	r3, r7
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	21ee      	movs	r1, #238	; 0xee
 80029e2:	4628      	mov	r0, r5
 80029e4:	f001 fd8e 	bl	8004504 <VL53L0X_UpdateByte>
 80029e8:	4320      	orrs	r0, r4
 80029ea:	b244      	sxtb	r4, r0
 80029ec:	e7c1      	b.n	8002972 <VL53L0X_ref_calibration_io+0x52>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80029ee:	4642      	mov	r2, r8
 80029f0:	21cb      	movs	r1, #203	; 0xcb
 80029f2:	4628      	mov	r0, r5
 80029f4:	f001 fd64 	bl	80044c0 <VL53L0X_WrByte>
 80029f8:	4320      	orrs	r0, r4
 80029fa:	b244      	sxtb	r4, r0
 80029fc:	e7eb      	b.n	80029d6 <VL53L0X_ref_calibration_io+0xb6>

080029fe <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80029fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	4604      	mov	r4, r0
 8002a06:	460d      	mov	r5, r1
 8002a08:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f88d 1017 	strb.w	r1, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8002a10:	461e      	mov	r6, r3
 8002a12:	b183      	cbz	r3, 8002a36 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002a14:	f890 8130 	ldrb.w	r8, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f001 fd4f 	bl	80044c0 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002a22:	4603      	mov	r3, r0
 8002a24:	b148      	cbz	r0, 8002a3a <VL53L0X_perform_vhv_calibration+0x3c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8002a26:	2200      	movs	r2, #0
 8002a28:	702a      	strb	r2, [r5, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8002a2a:	b903      	cbnz	r3, 8002a2e <VL53L0X_perform_vhv_calibration+0x30>
 8002a2c:	b9e6      	cbnz	r6, 8002a68 <VL53L0X_perform_vhv_calibration+0x6a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	b006      	add	sp, #24
 8002a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8002a36:	4698      	mov	r8, r3
 8002a38:	e7ee      	b.n	8002a18 <VL53L0X_perform_vhv_calibration+0x1a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8002a3a:	2140      	movs	r1, #64	; 0x40
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff ff50 	bl	80028e2 <VL53L0X_perform_single_ref_calibration>
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8002a42:	4603      	mov	r3, r0
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d1ee      	bne.n	8002a26 <VL53L0X_perform_vhv_calibration+0x28>
 8002a48:	2f01      	cmp	r7, #1
 8002a4a:	d1ec      	bne.n	8002a26 <VL53L0X_perform_vhv_calibration+0x28>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	9203      	str	r2, [sp, #12]
 8002a50:	2101      	movs	r1, #1
 8002a52:	9102      	str	r1, [sp, #8]
 8002a54:	f10d 0317 	add.w	r3, sp, #23
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9500      	str	r5, [sp, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff ff5e 	bl	8002920 <VL53L0X_ref_calibration_io>
 8002a64:	4603      	mov	r3, r0
 8002a66:	e7e0      	b.n	8002a2a <VL53L0X_perform_vhv_calibration+0x2c>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002a68:	4642      	mov	r2, r8
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f001 fd27 	bl	80044c0 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002a72:	4603      	mov	r3, r0
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d1da      	bne.n	8002a2e <VL53L0X_perform_vhv_calibration+0x30>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002a78:	f884 8130 	strb.w	r8, [r4, #304]	; 0x130
 8002a7c:	e7d7      	b.n	8002a2e <VL53L0X_perform_vhv_calibration+0x30>

08002a7e <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8002a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	4604      	mov	r4, r0
 8002a86:	460f      	mov	r7, r1
 8002a88:	4615      	mov	r5, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8002a8a:	461e      	mov	r6, r3
 8002a8c:	b183      	cbz	r3, 8002ab0 <VL53L0X_perform_phase_calibration+0x32>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002a8e:	f890 8130 	ldrb.w	r8, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002a92:	2202      	movs	r2, #2
 8002a94:	2101      	movs	r1, #1
 8002a96:	4620      	mov	r0, r4
 8002a98:	f001 fd12 	bl	80044c0 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	b148      	cbz	r0, 8002ab4 <VL53L0X_perform_phase_calibration+0x36>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	703a      	strb	r2, [r7, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8002aa4:	b903      	cbnz	r3, 8002aa8 <VL53L0X_perform_phase_calibration+0x2a>
 8002aa6:	b9e6      	cbnz	r6, 8002ae2 <VL53L0X_perform_phase_calibration+0x64>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	b006      	add	sp, #24
 8002aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8002ab0:	4698      	mov	r8, r3
 8002ab2:	e7ee      	b.n	8002a92 <VL53L0X_perform_phase_calibration+0x14>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7ff ff13 	bl	80028e2 <VL53L0X_perform_single_ref_calibration>
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8002abc:	4603      	mov	r3, r0
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <VL53L0X_perform_phase_calibration+0x22>
 8002ac2:	2d01      	cmp	r5, #1
 8002ac4:	d1ec      	bne.n	8002aa0 <VL53L0X_perform_phase_calibration+0x22>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	9103      	str	r1, [sp, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	9202      	str	r2, [sp, #8]
 8002ace:	9701      	str	r7, [sp, #4]
 8002ad0:	f10d 0317 	add.w	r3, sp, #23
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff ff21 	bl	8002920 <VL53L0X_ref_calibration_io>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	e7e0      	b.n	8002aa4 <VL53L0X_perform_phase_calibration+0x26>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f001 fcea 	bl	80044c0 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002aec:	4603      	mov	r3, r0
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d1da      	bne.n	8002aa8 <VL53L0X_perform_phase_calibration+0x2a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002af2:	f884 8130 	strb.w	r8, [r4, #304]	; 0x130
 8002af6:	e7d7      	b.n	8002aa8 <VL53L0X_perform_phase_calibration+0x2a>

08002af8 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	4604      	mov	r4, r0
 8002afc:	4616      	mov	r6, r2
 8002afe:	461d      	mov	r5, r3

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002b00:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8002b04:	2300      	movs	r3, #0
 8002b06:	462a      	mov	r2, r5
 8002b08:	f7ff ff79 	bl	80029fe <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002b0c:	b100      	cbz	r0, 8002b10 <VL53L0X_perform_ref_calibration+0x18>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8002b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b10:	4603      	mov	r3, r0
		Status = VL53L0X_perform_phase_calibration(
 8002b12:	462a      	mov	r2, r5
 8002b14:	4631      	mov	r1, r6
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff ffb1 	bl	8002a7e <VL53L0X_perform_phase_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d1f6      	bne.n	8002b0e <VL53L0X_perform_ref_calibration+0x16>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002b20:	463a      	mov	r2, r7
 8002b22:	2101      	movs	r1, #1
 8002b24:	4620      	mov	r0, r4
 8002b26:	f001 fccb 	bl	80044c0 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d1ef      	bne.n	8002b0e <VL53L0X_perform_ref_calibration+0x16>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002b2e:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
 8002b32:	e7ec      	b.n	8002b0e <VL53L0X_perform_ref_calibration+0x16>

08002b34 <VL53L0X_perform_ref_spad_management>:
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b095      	sub	sp, #84	; 0x54
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8002b3e:	920c      	str	r2, [sp, #48]	; 0x30
	uint32_t lastSpadIndex = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	9311      	str	r3, [sp, #68]	; 0x44
	int32_t nextGoodSpad = 0;
 8002b44:	9310      	str	r3, [sp, #64]	; 0x40
	uint8_t VhvSettings = 0;
 8002b46:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	uint8_t PhaseCal = 0;
 8002b4a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002b4e:	f8b0 613a 	ldrh.w	r6, [r0, #314]	; 0x13a
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002b52:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 8002b56:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 8002b5a:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 8002b5e:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 8002b62:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 8002b66:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	21ff      	movs	r1, #255	; 0xff
 8002b6e:	f001 fca7 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002b72:	4603      	mov	r3, r0
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f040 80ba 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = VL53L0X_WrByte(Dev,
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	214f      	movs	r1, #79	; 0x4f
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f001 fc9e 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002b84:	4603      	mov	r3, r0
 8002b86:	2800      	cmp	r0, #0
 8002b88:	f040 80b1 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = VL53L0X_WrByte(Dev,
 8002b8c:	222c      	movs	r2, #44	; 0x2c
 8002b8e:	214e      	movs	r1, #78	; 0x4e
 8002b90:	4620      	mov	r0, r4
 8002b92:	f001 fc95 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002b96:	4603      	mov	r3, r0
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	f040 80a8 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	21ff      	movs	r1, #255	; 0xff
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f001 fc8c 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2800      	cmp	r0, #0
 8002bac:	f040 809f 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = VL53L0X_WrByte(Dev,
 8002bb0:	22b4      	movs	r2, #180	; 0xb4
 8002bb2:	21b6      	movs	r1, #182	; 0xb6
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f001 fc83 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	f040 8096 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = VL53L0X_WrByte(Dev,
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f001 fc7a 	bl	80044c0 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	f040 808d 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	aa0f      	add	r2, sp, #60	; 0x3c
 8002bd8:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ff8b 	bl	8002af8 <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8002be2:	4603      	mov	r3, r0
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f040 8082 	bne.w	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
					Dev->Data.SpadData.RefGoodSpadMap,
 8002bea:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8002bee:	9207      	str	r2, [sp, #28]
					Dev->Data.SpadData.RefSpadEnables,
 8002bf0:	f504 7792 	add.w	r7, r4, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002bf4:	ab11      	add	r3, sp, #68	; 0x44
 8002bf6:	9304      	str	r3, [sp, #16]
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	9102      	str	r1, [sp, #8]
 8002c00:	23b4      	movs	r3, #180	; 0xb4
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	2306      	movs	r3, #6
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fd89 	bl	8002722 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 8002c10:	4603      	mov	r3, r0
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d16b      	bne.n	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		currentSpadIndex = lastSpadIndex;
 8002c16:	9d11      	ldr	r5, [sp, #68]	; 0x44
		Status = perform_ref_signal_measurement(Dev,
 8002c18:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff fdcd 	bl	80027bc <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002c22:	900a      	str	r0, [sp, #40]	; 0x28
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f040 80a9 	bne.w	8002d7c <VL53L0X_perform_ref_spad_management+0x248>
 8002c2a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8002c2e:	42b3      	cmp	r3, r6
 8002c30:	f240 80a6 	bls.w	8002d80 <VL53L0X_perform_ref_spad_management+0x24c>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8002c3a:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 8002c3e:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8002c42:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 8002c46:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 8002c4a:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
			for (index = 0; index < spadArraySize; index++)
 8002c4e:	e000      	b.n	8002c52 <VL53L0X_perform_ref_spad_management+0x11e>
				currentSpadIndex++;
 8002c50:	3501      	adds	r5, #1
			while ((is_aperture(startSelect + currentSpadIndex)
 8002c52:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 8002c56:	f7ff fd39 	bl	80026cc <is_aperture>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002c5a:	b908      	cbnz	r0, 8002c60 <VL53L0X_perform_ref_spad_management+0x12c>
 8002c5c:	2d2b      	cmp	r5, #43	; 0x2b
 8002c5e:	d9f7      	bls.n	8002c50 <VL53L0X_perform_ref_spad_management+0x11c>
			Status = enable_ref_spads(Dev,
 8002c60:	ab11      	add	r3, sp, #68	; 0x44
 8002c62:	9304      	str	r3, [sp, #16]
 8002c64:	2303      	movs	r3, #3
 8002c66:	9303      	str	r3, [sp, #12]
 8002c68:	9502      	str	r5, [sp, #8]
 8002c6a:	23b4      	movs	r3, #180	; 0xb4
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2306      	movs	r3, #6
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	463b      	mov	r3, r7
 8002c74:	9a07      	ldr	r2, [sp, #28]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fd52 	bl	8002722 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8002c7e:	4603      	mov	r3, r0
 8002c80:	bba8      	cbnz	r0, 8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
				currentSpadIndex = lastSpadIndex;
 8002c82:	9d11      	ldr	r5, [sp, #68]	; 0x44
				Status = perform_ref_signal_measurement(Dev,
 8002c84:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fd97 	bl	80027bc <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002c8e:	4603      	mov	r3, r0
 8002c90:	bb68      	cbnz	r0, 8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
 8002c92:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8002c96:	42b3      	cmp	r3, r6
 8002c98:	f240 808a 	bls.w	8002db0 <VL53L0X_perform_ref_spad_management+0x27c>
					isApertureSpads_int = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	930d      	str	r3, [sp, #52]	; 0x34
					refSpadCount_int = minimumSpadCount;
 8002ca0:	f04f 0a03 	mov.w	sl, #3
			needAptSpads = 1;
 8002ca4:	9308      	str	r3, [sp, #32]
 8002ca6:	e06f      	b.n	8002d88 <VL53L0X_perform_ref_spad_management+0x254>
			(refSpadCount_int)++;
 8002ca8:	46d3      	mov	fp, sl
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002caa:	9309      	str	r3, [sp, #36]	; 0x24
				memcpy(lastSpadArray,
 8002cac:	f8d8 0000 	ldr.w	r0, [r8]
 8002cb0:	9012      	str	r0, [sp, #72]	; 0x48
 8002cb2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8002cb6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
			get_next_good_spad(
 8002cba:	ab10      	add	r3, sp, #64	; 0x40
 8002cbc:	462a      	mov	r2, r5
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	9807      	ldr	r0, [sp, #28]
 8002cc2:	f7ff fcd8 	bl	8002676 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 8002cc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002cc8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ccc:	d050      	beq.n	8002d70 <VL53L0X_perform_ref_spad_management+0x23c>
			(refSpadCount_int)++;
 8002cce:	f10b 0a01 	add.w	sl, fp, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002cd2:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 8002cd6:	f7ff fcf9 	bl	80026cc <is_aperture>
 8002cda:	9b08      	ldr	r3, [sp, #32]
 8002cdc:	4298      	cmp	r0, r3
 8002cde:	d14a      	bne.n	8002d76 <VL53L0X_perform_ref_spad_management+0x242>
			Status = enable_spad_bit(
 8002ce0:	462a      	mov	r2, r5
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	f7ff fcfb 	bl	80026e0 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8002cea:	4603      	mov	r3, r0
 8002cec:	b108      	cbz	r0, 8002cf2 <VL53L0X_perform_ref_spad_management+0x1be>
					Status = set_ref_spad_map(Dev,
 8002cee:	930a      	str	r3, [sp, #40]	; 0x28
	return Status;
 8002cf0:	e029      	b.n	8002d46 <VL53L0X_perform_ref_spad_management+0x212>
				currentSpadIndex++;
 8002cf2:	3501      	adds	r5, #1
				Status = set_ref_spad_map(Dev,
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7ff fd05 	bl	8002706 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d1f5      	bne.n	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
			Status = perform_ref_signal_measurement(Dev,
 8002d02:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fd58 	bl	80027bc <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d1ed      	bne.n	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002d12:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8002d16:	1b93      	subs	r3, r2, r6
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bfb8      	it	lt
 8002d1c:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 8002d1e:	42b2      	cmp	r2, r6
 8002d20:	d9c2      	bls.n	8002ca8 <VL53L0X_perform_ref_spad_management+0x174>
				if (signalRateDiff > lastSignalRateDiff) {
 8002d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d812      	bhi.n	8002d4e <VL53L0X_perform_ref_spad_management+0x21a>
		*refSpadCount = refSpadCount_int;
 8002d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d2a:	f8c2 a000 	str.w	sl, [r2]
		*isApertureSpads = isApertureSpads_int;
 8002d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d32:	700b      	strb	r3, [r1, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002d34:	2301      	movs	r3, #1
 8002d36:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002d40:	780b      	ldrb	r3, [r1, #0]
 8002d42:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
}
 8002d46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d48:	b015      	add	sp, #84	; 0x54
 8002d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					Status = set_ref_spad_map(Dev,
 8002d4e:	a912      	add	r1, sp, #72	; 0x48
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7ff fcd8 	bl	8002706 <set_ref_spad_map>
 8002d56:	4603      	mov	r3, r0
					memcpy(
 8002d58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002d5a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8002d5e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8002d62:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
	if (Status == VL53L0X_ERROR_NONE) {
 8002d66:	b90b      	cbnz	r3, 8002d6c <VL53L0X_perform_ref_spad_management+0x238>
 8002d68:	46da      	mov	sl, fp
 8002d6a:	e7dd      	b.n	8002d28 <VL53L0X_perform_ref_spad_management+0x1f4>
					Status = set_ref_spad_map(Dev,
 8002d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8002d6e:	e7ea      	b.n	8002d46 <VL53L0X_perform_ref_spad_management+0x212>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002d70:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002d74:	e7bb      	b.n	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002d76:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002d7a:	e7b8      	b.n	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
		Status = perform_ref_signal_measurement(Dev,
 8002d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002d7e:	e7b6      	b.n	8002cee <VL53L0X_perform_ref_spad_management+0x1ba>
	uint8_t	 isApertureSpads_int = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	930d      	str	r3, [sp, #52]	; 0x34
	uint32_t refSpadCount_int = 0;
 8002d84:	469a      	mov	sl, r3
			needAptSpads = 0;
 8002d86:	9308      	str	r3, [sp, #32]
		(peakSignalRateRef < targetRefRate)) {
 8002d88:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002d8c:	42b3      	cmp	r3, r6
 8002d8e:	d2cb      	bcs.n	8002d28 <VL53L0X_perform_ref_spad_management+0x1f4>
		isApertureSpads_int = needAptSpads;
 8002d90:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8002d94:	920d      	str	r2, [sp, #52]	; 0x34
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002d96:	1b9b      	subs	r3, r3, r6
 8002d98:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002d9c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002da0:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 8002da2:	f04f 0b03 	mov.w	fp, #3
				memcpy(lastSpadArray,
 8002da6:	f504 7892 	add.w	r8, r4, #292	; 0x124
			get_next_good_spad(
 8002daa:	f04f 0906 	mov.w	r9, #6
 8002dae:	e77d      	b.n	8002cac <VL53L0X_perform_ref_spad_management+0x178>
	uint8_t	 isApertureSpads_int = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	930d      	str	r3, [sp, #52]	; 0x34
	uint32_t refSpadCount_int = 0;
 8002db4:	469a      	mov	sl, r3
			needAptSpads = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	9308      	str	r3, [sp, #32]
 8002dba:	e7e5      	b.n	8002d88 <VL53L0X_perform_ref_spad_management+0x254>

08002dbc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8002dbc:	b530      	push	{r4, r5, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	4605      	mov	r5, r0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8002dc8:	24c8      	movs	r4, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8002dca:	f10d 0107 	add.w	r1, sp, #7
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f7ff fc14 	bl	80025fc <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	b958      	cbnz	r0, 8002df0 <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */

		if (NewDataReady == 1)
 8002dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8002de0:	3c01      	subs	r4, #1
 8002de2:	d003      	beq.n	8002dec <VL53L0X_measurement_poll_for_completion+0x30>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8002de4:	4628      	mov	r0, r5
 8002de6:	f001 fba6 	bl	8004536 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8002dea:	e7ee      	b.n	8002dca <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 8002dec:	f06f 0206 	mvn.w	r2, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8002df0:	4610      	mov	r0, r2
 8002df2:	b003      	add	sp, #12
 8002df4:	bd30      	pop	{r4, r5, pc}

08002df6 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8002df6:	4602      	mov	r2, r0
	uint32_t  bit = 1 << 30;
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8002df8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002dfc:	d210      	bcs.n	8002e20 <VL53L0X_isqrt+0x2a>
	uint32_t  bit = 1 << 30;
 8002dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		bit >>= 2;
 8002e02:	089b      	lsrs	r3, r3, #2
	while (bit > num)
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3fc      	bcc.n	8002e02 <VL53L0X_isqrt+0xc>


	while (bit != 0) {
 8002e08:	b16b      	cbz	r3, 8002e26 <VL53L0X_isqrt+0x30>
	uint32_t  bit = 1 << 30;
 8002e0a:	2000      	movs	r0, #0
		if (num >= res + bit) {
 8002e0c:	18c1      	adds	r1, r0, r3
 8002e0e:	4291      	cmp	r1, r2
			num -= res + bit;
 8002e10:	bf9a      	itte	ls
 8002e12:	1a52      	subls	r2, r2, r1
			res = (res >> 1) + bit;
 8002e14:	eb03 0050 	addls.w	r0, r3, r0, lsr #1
		} else
			res >>= 1;
 8002e18:	0840      	lsrhi	r0, r0, #1
	while (bit != 0) {
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	d1f6      	bne.n	8002e0c <VL53L0X_isqrt+0x16>
 8002e1e:	4770      	bx	lr
	uint32_t  bit = 1 << 30;
 8002e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e24:	e7f1      	b.n	8002e0a <VL53L0X_isqrt+0x14>
	uint32_t  res = 0;
 8002e26:	4618      	mov	r0, r3

		bit >>= 2;
	}

	return res;
}
 8002e28:	4770      	bx	lr

08002e2a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8002e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	4606      	mov	r6, r0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2183      	movs	r1, #131	; 0x83
 8002e34:	f001 fb44 	bl	80044c0 <VL53L0X_WrByte>

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8002e38:	4604      	mov	r4, r0
 8002e3a:	b9c8      	cbnz	r0, 8002e70 <VL53L0X_device_read_strobe+0x46>
		LoopNb = 0;
 8002e3c:	2500      	movs	r5, #0
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8002e3e:	2783      	movs	r7, #131	; 0x83
 8002e40:	f10d 0207 	add.w	r2, sp, #7
 8002e44:	4639      	mov	r1, r7
 8002e46:	4630      	mov	r0, r6
 8002e48:	f001 fa9a 	bl	8004380 <VL53L0X_RdByte>
 8002e4c:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8002e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e52:	4303      	orrs	r3, r0
 8002e54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002e58:	d105      	bne.n	8002e66 <VL53L0X_device_read_strobe+0x3c>
					break;

			LoopNb = LoopNb + 1;
 8002e5a:	3501      	adds	r5, #1
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8002e5c:	2dc8      	cmp	r5, #200	; 0xc8
 8002e5e:	d1ef      	bne.n	8002e40 <VL53L0X_device_read_strobe+0x16>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8002e60:	f06f 0406 	mvn.w	r4, #6
 8002e64:	e004      	b.n	8002e70 <VL53L0X_device_read_strobe+0x46>
 8002e66:	2dc8      	cmp	r5, #200	; 0xc8
 8002e68:	bf34      	ite	cc
 8002e6a:	4604      	movcc	r4, r0
 8002e6c:	f06f 0406 	mvncs.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8002e70:	2201      	movs	r2, #1
 8002e72:	2183      	movs	r1, #131	; 0x83
 8002e74:	4630      	mov	r0, r6
 8002e76:	f001 fb23 	bl	80044c0 <VL53L0X_WrByte>
 8002e7a:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8002e7c:	b240      	sxtb	r0, r0
 8002e7e:	b003      	add	sp, #12
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e82 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8002e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e86:	b091      	sub	sp, #68	; 0x44
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
	uint8_t ReferenceSpadType = 0;
	uint32_t PartUIDUpper = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t PartUIDLower = 0;
 8002e8c:	930b      	str	r3, [sp, #44]	; 0x2c
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002e8e:	f890 70f0 	ldrb.w	r7, [r0, #240]	; 0xf0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8002e92:	2f07      	cmp	r7, #7
 8002e94:	d104      	bne.n	8002ea0 <VL53L0X_get_info_from_device+0x1e>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e96:	2400      	movs	r4, #0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002e98:	4620      	mov	r0, r4
 8002e9a:	b011      	add	sp, #68	; 0x44
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	460e      	mov	r6, r1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	f001 fb0a 	bl	80044c0 <VL53L0X_WrByte>
 8002eac:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002eae:	2201      	movs	r2, #1
 8002eb0:	21ff      	movs	r1, #255	; 0xff
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f001 fb04 	bl	80044c0 <VL53L0X_WrByte>
 8002eb8:	4304      	orrs	r4, r0
 8002eba:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f001 fafd 	bl	80044c0 <VL53L0X_WrByte>
 8002ec6:	4304      	orrs	r4, r0
 8002ec8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002eca:	2206      	movs	r2, #6
 8002ecc:	21ff      	movs	r1, #255	; 0xff
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f001 faf6 	bl	80044c0 <VL53L0X_WrByte>
 8002ed4:	4304      	orrs	r4, r0
 8002ed6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002ed8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8002edc:	2183      	movs	r1, #131	; 0x83
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f001 fa4e 	bl	8004380 <VL53L0X_RdByte>
 8002ee4:	4304      	orrs	r4, r0
 8002ee6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8002ee8:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8002eec:	f042 0204 	orr.w	r2, r2, #4
 8002ef0:	2183      	movs	r1, #131	; 0x83
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f001 fae4 	bl	80044c0 <VL53L0X_WrByte>
 8002ef8:	4304      	orrs	r4, r0
 8002efa:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8002efc:	2207      	movs	r2, #7
 8002efe:	21ff      	movs	r1, #255	; 0xff
 8002f00:	4628      	mov	r0, r5
 8002f02:	f001 fadd 	bl	80044c0 <VL53L0X_WrByte>
 8002f06:	4304      	orrs	r4, r0
 8002f08:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	2181      	movs	r1, #129	; 0x81
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f001 fad6 	bl	80044c0 <VL53L0X_WrByte>
 8002f14:	4304      	orrs	r4, r0
 8002f16:	b264      	sxtb	r4, r4
		Status |= VL53L0X_PollingDelay(Dev);
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f001 fb0c 	bl	8004536 <VL53L0X_PollingDelay>
 8002f1e:	4304      	orrs	r4, r0
 8002f20:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	4628      	mov	r0, r5
 8002f28:	f001 faca 	bl	80044c0 <VL53L0X_WrByte>
 8002f2c:	4304      	orrs	r4, r0
 8002f2e:	b264      	sxtb	r4, r4
		if (((option & 1) == 1) &&
 8002f30:	f016 0801 	ands.w	r8, r6, #1
 8002f34:	d05c      	beq.n	8002ff0 <VL53L0X_get_info_from_device+0x16e>
 8002f36:	f017 0f01 	tst.w	r7, #1
 8002f3a:	d003      	beq.n	8002f44 <VL53L0X_get_info_from_device+0xc2>
	uint8_t ReferenceSpadType = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9302      	str	r3, [sp, #8]
	uint8_t ReferenceSpadCount = 0;
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	e059      	b.n	8002ff8 <VL53L0X_get_info_from_device+0x176>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8002f44:	226b      	movs	r2, #107	; 0x6b
 8002f46:	2194      	movs	r1, #148	; 0x94
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f001 fab9 	bl	80044c0 <VL53L0X_WrByte>
 8002f4e:	4681      	mov	r9, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8002f50:	4628      	mov	r0, r5
 8002f52:	f7ff ff6a 	bl	8002e2a <VL53L0X_device_read_strobe>
 8002f56:	ea49 0900 	orr.w	r9, r9, r0
 8002f5a:	ea44 0409 	orr.w	r4, r4, r9
 8002f5e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002f60:	aa0e      	add	r2, sp, #56	; 0x38
 8002f62:	2190      	movs	r1, #144	; 0x90
 8002f64:	4628      	mov	r0, r5
 8002f66:	f001 fa83 	bl	8004470 <VL53L0X_RdDWord>
 8002f6a:	4304      	orrs	r4, r0
 8002f6c:	b264      	sxtb	r4, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8002f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f70:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8002f74:	9201      	str	r2, [sp, #4]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8002f76:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8002f7a:	9302      	str	r3, [sp, #8]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8002f7c:	2224      	movs	r2, #36	; 0x24
 8002f7e:	2194      	movs	r1, #148	; 0x94
 8002f80:	4628      	mov	r0, r5
 8002f82:	f001 fa9d 	bl	80044c0 <VL53L0X_WrByte>
 8002f86:	4304      	orrs	r4, r0
 8002f88:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f7ff ff4d 	bl	8002e2a <VL53L0X_device_read_strobe>
 8002f90:	4304      	orrs	r4, r0
 8002f92:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002f94:	aa0e      	add	r2, sp, #56	; 0x38
 8002f96:	2190      	movs	r1, #144	; 0x90
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f001 fa69 	bl	8004470 <VL53L0X_RdDWord>
 8002f9e:	4304      	orrs	r4, r0
 8002fa0:	b264      	sxtb	r4, r4
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8002fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fa4:	0e1a      	lsrs	r2, r3, #24
 8002fa6:	f88d 2010 	strb.w	r2, [sp, #16]
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8002faa:	0c1a      	lsrs	r2, r3, #16
 8002fac:	f88d 2011 	strb.w	r2, [sp, #17]
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8002fb0:	0a1a      	lsrs	r2, r3, #8
 8002fb2:	f88d 2012 	strb.w	r2, [sp, #18]
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8002fb6:	f88d 3013 	strb.w	r3, [sp, #19]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8002fba:	2225      	movs	r2, #37	; 0x25
 8002fbc:	2194      	movs	r1, #148	; 0x94
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f001 fa7e 	bl	80044c0 <VL53L0X_WrByte>
 8002fc4:	4304      	orrs	r4, r0
 8002fc6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f7ff ff2e 	bl	8002e2a <VL53L0X_device_read_strobe>
 8002fce:	4304      	orrs	r4, r0
 8002fd0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002fd2:	aa0e      	add	r2, sp, #56	; 0x38
 8002fd4:	2190      	movs	r1, #144	; 0x90
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f001 fa4a 	bl	8004470 <VL53L0X_RdDWord>
 8002fdc:	4304      	orrs	r4, r0
 8002fde:	b264      	sxtb	r4, r4
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8002fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fe2:	0e1a      	lsrs	r2, r3, #24
 8002fe4:	f88d 2014 	strb.w	r2, [sp, #20]
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	f88d 3015 	strb.w	r3, [sp, #21]
 8002fee:	e003      	b.n	8002ff8 <VL53L0X_get_info_from_device+0x176>
	uint8_t ReferenceSpadType = 0;
 8002ff0:	f8cd 8008 	str.w	r8, [sp, #8]
	uint8_t ReferenceSpadCount = 0;
 8002ff4:	f8cd 8004 	str.w	r8, [sp, #4]
		if (((option & 2) == 2) &&
 8002ff8:	f016 0a02 	ands.w	sl, r6, #2
 8002ffc:	d002      	beq.n	8003004 <VL53L0X_get_info_from_device+0x182>
 8002ffe:	f017 0f02 	tst.w	r7, #2
 8003002:	d00c      	beq.n	800301e <VL53L0X_get_info_from_device+0x19c>
		if (((option & 4) == 4) &&
 8003004:	f016 0904 	ands.w	r9, r6, #4
 8003008:	f000 8169 	beq.w	80032de <VL53L0X_get_info_from_device+0x45c>
 800300c:	f017 0f04 	tst.w	r7, #4
 8003010:	f000 80df 	beq.w	80031d2 <VL53L0X_get_info_from_device+0x350>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003014:	f04f 0b00 	mov.w	fp, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003018:	f8cd b00c 	str.w	fp, [sp, #12]
 800301c:	e163      	b.n	80032e6 <VL53L0X_get_info_from_device+0x464>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800301e:	2202      	movs	r2, #2
 8003020:	2194      	movs	r1, #148	; 0x94
 8003022:	4628      	mov	r0, r5
 8003024:	f001 fa4c 	bl	80044c0 <VL53L0X_WrByte>
 8003028:	4681      	mov	r9, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800302a:	4628      	mov	r0, r5
 800302c:	f7ff fefd 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003030:	ea49 0900 	orr.w	r9, r9, r0
 8003034:	ea44 0409 	orr.w	r4, r4, r9
 8003038:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800303a:	f10d 0237 	add.w	r2, sp, #55	; 0x37
 800303e:	2190      	movs	r1, #144	; 0x90
 8003040:	4628      	mov	r0, r5
 8003042:	f001 f99d 	bl	8004380 <VL53L0X_RdByte>
 8003046:	4304      	orrs	r4, r0
 8003048:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800304a:	227b      	movs	r2, #123	; 0x7b
 800304c:	2194      	movs	r1, #148	; 0x94
 800304e:	4628      	mov	r0, r5
 8003050:	f001 fa36 	bl	80044c0 <VL53L0X_WrByte>
 8003054:	4304      	orrs	r4, r0
 8003056:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8003058:	4628      	mov	r0, r5
 800305a:	f7ff fee6 	bl	8002e2a <VL53L0X_device_read_strobe>
 800305e:	4304      	orrs	r4, r0
 8003060:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003062:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 8003066:	2190      	movs	r1, #144	; 0x90
 8003068:	4628      	mov	r0, r5
 800306a:	f001 f989 	bl	8004380 <VL53L0X_RdByte>
 800306e:	4304      	orrs	r4, r0
 8003070:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003072:	2277      	movs	r2, #119	; 0x77
 8003074:	2194      	movs	r1, #148	; 0x94
 8003076:	4628      	mov	r0, r5
 8003078:	f001 fa22 	bl	80044c0 <VL53L0X_WrByte>
 800307c:	4304      	orrs	r4, r0
 800307e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8003080:	4628      	mov	r0, r5
 8003082:	f7ff fed2 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003086:	4304      	orrs	r4, r0
 8003088:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800308a:	aa0e      	add	r2, sp, #56	; 0x38
 800308c:	2190      	movs	r1, #144	; 0x90
 800308e:	4628      	mov	r0, r5
 8003090:	f001 f9ee 	bl	8004470 <VL53L0X_RdDWord>
 8003094:	4304      	orrs	r4, r0
 8003096:	b264      	sxtb	r4, r4
			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800309a:	0e5a      	lsrs	r2, r3, #25
 800309c:	f88d 2018 	strb.w	r2, [sp, #24]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80030a0:	f3c3 4286 	ubfx	r2, r3, #18, #7
 80030a4:	f88d 2019 	strb.w	r2, [sp, #25]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80030a8:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 80030ac:	f88d 201a 	strb.w	r2, [sp, #26]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80030b0:	f3c3 1206 	ubfx	r2, r3, #4, #7
 80030b4:	f88d 201b 	strb.w	r2, [sp, #27]
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80030be:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80030c2:	2278      	movs	r2, #120	; 0x78
 80030c4:	2194      	movs	r1, #148	; 0x94
 80030c6:	4628      	mov	r0, r5
 80030c8:	f001 f9fa 	bl	80044c0 <VL53L0X_WrByte>
 80030cc:	4304      	orrs	r4, r0
 80030ce:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7ff feaa 	bl	8002e2a <VL53L0X_device_read_strobe>
 80030d6:	4304      	orrs	r4, r0
 80030d8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80030da:	aa0e      	add	r2, sp, #56	; 0x38
 80030dc:	2190      	movs	r1, #144	; 0x90
 80030de:	4628      	mov	r0, r5
 80030e0:	f001 f9c6 	bl	8004470 <VL53L0X_RdDWord>
 80030e4:	4304      	orrs	r4, r0
 80030e6:	b264      	sxtb	r4, r4
					((TmpDWord >> 29) & 0x07f));
 80030e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			ProductId[4] = (char)(byte +
 80030ea:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 80030ee:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 80030f2:	f88d 201c 	strb.w	r2, [sp, #28]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80030f6:	f3c3 5286 	ubfx	r2, r3, #22, #7
 80030fa:	f88d 201d 	strb.w	r2, [sp, #29]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80030fe:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8003102:	f88d 201e 	strb.w	r2, [sp, #30]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003106:	f3c3 2206 	ubfx	r2, r3, #8, #7
 800310a:	f88d 201f 	strb.w	r2, [sp, #31]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800310e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8003112:	f88d 2020 	strb.w	r2, [sp, #32]
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003116:	019b      	lsls	r3, r3, #6
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003120:	2279      	movs	r2, #121	; 0x79
 8003122:	2194      	movs	r1, #148	; 0x94
 8003124:	4628      	mov	r0, r5
 8003126:	f001 f9cb 	bl	80044c0 <VL53L0X_WrByte>
 800312a:	4304      	orrs	r4, r0
 800312c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 800312e:	4628      	mov	r0, r5
 8003130:	f7ff fe7b 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003134:	4304      	orrs	r4, r0
 8003136:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003138:	aa0e      	add	r2, sp, #56	; 0x38
 800313a:	2190      	movs	r1, #144	; 0x90
 800313c:	4628      	mov	r0, r5
 800313e:	f001 f997 	bl	8004470 <VL53L0X_RdDWord>
 8003142:	4304      	orrs	r4, r0
 8003144:	b264      	sxtb	r4, r4
					((TmpDWord >> 26) & 0x07f));
 8003146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			ProductId[9] = (char)(byte +
 8003148:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800314c:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8003150:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003154:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8003158:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800315c:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8003160:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003164:	f3c3 1246 	ubfx	r2, r3, #5, #7
 8003168:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003172:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003176:	227a      	movs	r2, #122	; 0x7a
 8003178:	2194      	movs	r1, #148	; 0x94
 800317a:	4628      	mov	r0, r5
 800317c:	f001 f9a0 	bl	80044c0 <VL53L0X_WrByte>
 8003180:	4304      	orrs	r4, r0
 8003182:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff fe50 	bl	8002e2a <VL53L0X_device_read_strobe>
 800318a:	4320      	orrs	r0, r4
 800318c:	b244      	sxtb	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800318e:	aa0e      	add	r2, sp, #56	; 0x38
 8003190:	2190      	movs	r1, #144	; 0x90
 8003192:	4628      	mov	r0, r5
 8003194:	f001 f96c 	bl	8004470 <VL53L0X_RdDWord>
 8003198:	4320      	orrs	r0, r4
 800319a:	b244      	sxtb	r4, r0
					((TmpDWord >> 30) & 0x07f));
 800319c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			ProductId[13] = (char)(byte +
 800319e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 80031a2:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 80031a6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80031aa:	f3c3 52c6 	ubfx	r2, r3, #23, #7
 80031ae:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80031b2:	f3c3 4206 	ubfx	r2, r3, #16, #7
 80031b6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80031ba:	f3c3 2246 	ubfx	r2, r3, #9, #7
 80031be:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80031c2:	f3c3 0386 	ubfx	r3, r3, #2, #7
 80031c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
			ProductId[18] = '\0';
 80031ca:	2300      	movs	r3, #0
 80031cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031d0:	e718      	b.n	8003004 <VL53L0X_get_info_from_device+0x182>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80031d2:	227b      	movs	r2, #123	; 0x7b
 80031d4:	2194      	movs	r1, #148	; 0x94
 80031d6:	4628      	mov	r0, r5
 80031d8:	f001 f972 	bl	80044c0 <VL53L0X_WrByte>
 80031dc:	4683      	mov	fp, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80031de:	4628      	mov	r0, r5
 80031e0:	f7ff fe23 	bl	8002e2a <VL53L0X_device_read_strobe>
 80031e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80031e8:	ea44 040b 	orr.w	r4, r4, fp
 80031ec:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80031ee:	aa0c      	add	r2, sp, #48	; 0x30
 80031f0:	2190      	movs	r1, #144	; 0x90
 80031f2:	4628      	mov	r0, r5
 80031f4:	f001 f93c 	bl	8004470 <VL53L0X_RdDWord>
 80031f8:	4304      	orrs	r4, r0
 80031fa:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80031fc:	227c      	movs	r2, #124	; 0x7c
 80031fe:	2194      	movs	r1, #148	; 0x94
 8003200:	4628      	mov	r0, r5
 8003202:	f001 f95d 	bl	80044c0 <VL53L0X_WrByte>
 8003206:	4304      	orrs	r4, r0
 8003208:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 800320a:	4628      	mov	r0, r5
 800320c:	f7ff fe0d 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003210:	4304      	orrs	r4, r0
 8003212:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003214:	aa0b      	add	r2, sp, #44	; 0x2c
 8003216:	2190      	movs	r1, #144	; 0x90
 8003218:	4628      	mov	r0, r5
 800321a:	f001 f929 	bl	8004470 <VL53L0X_RdDWord>
 800321e:	4304      	orrs	r4, r0
 8003220:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003222:	2273      	movs	r2, #115	; 0x73
 8003224:	2194      	movs	r1, #148	; 0x94
 8003226:	4628      	mov	r0, r5
 8003228:	f001 f94a 	bl	80044c0 <VL53L0X_WrByte>
 800322c:	4304      	orrs	r4, r0
 800322e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8003230:	4628      	mov	r0, r5
 8003232:	f7ff fdfa 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003236:	4304      	orrs	r4, r0
 8003238:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800323a:	aa0e      	add	r2, sp, #56	; 0x38
 800323c:	2190      	movs	r1, #144	; 0x90
 800323e:	4628      	mov	r0, r5
 8003240:	f001 f916 	bl	8004470 <VL53L0X_RdDWord>
 8003244:	4304      	orrs	r4, r0
 8003246:	b264      	sxtb	r4, r4
				0x000000ff) << 8;
 8003248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800324a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800324c:	fa1f fb83 	uxth.w	fp, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003250:	2274      	movs	r2, #116	; 0x74
 8003252:	2194      	movs	r1, #148	; 0x94
 8003254:	4628      	mov	r0, r5
 8003256:	f001 f933 	bl	80044c0 <VL53L0X_WrByte>
 800325a:	4304      	orrs	r4, r0
 800325c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 800325e:	4628      	mov	r0, r5
 8003260:	f7ff fde3 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003264:	4304      	orrs	r4, r0
 8003266:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003268:	aa0e      	add	r2, sp, #56	; 0x38
 800326a:	2190      	movs	r1, #144	; 0x90
 800326c:	4628      	mov	r0, r5
 800326e:	f001 f8ff 	bl	8004470 <VL53L0X_RdDWord>
 8003272:	4304      	orrs	r4, r0
 8003274:	b264      	sxtb	r4, r4
				0xff000000) >> 24);
 8003276:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800327a:	ea43 0b0b 	orr.w	fp, r3, fp
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800327e:	2275      	movs	r2, #117	; 0x75
 8003280:	2194      	movs	r1, #148	; 0x94
 8003282:	4628      	mov	r0, r5
 8003284:	f001 f91c 	bl	80044c0 <VL53L0X_WrByte>
 8003288:	4304      	orrs	r4, r0
 800328a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 800328c:	4628      	mov	r0, r5
 800328e:	f7ff fdcc 	bl	8002e2a <VL53L0X_device_read_strobe>
 8003292:	4304      	orrs	r4, r0
 8003294:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003296:	aa0e      	add	r2, sp, #56	; 0x38
 8003298:	2190      	movs	r1, #144	; 0x90
 800329a:	4628      	mov	r0, r5
 800329c:	f001 f8e8 	bl	8004470 <VL53L0X_RdDWord>
 80032a0:	4304      	orrs	r4, r0
 80032a2:	b264      	sxtb	r4, r4
							<< 8;
 80032a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032a6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80032ac:	2276      	movs	r2, #118	; 0x76
 80032ae:	2194      	movs	r1, #148	; 0x94
 80032b0:	4628      	mov	r0, r5
 80032b2:	f001 f905 	bl	80044c0 <VL53L0X_WrByte>
 80032b6:	4304      	orrs	r4, r0
 80032b8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80032ba:	4628      	mov	r0, r5
 80032bc:	f7ff fdb5 	bl	8002e2a <VL53L0X_device_read_strobe>
 80032c0:	4304      	orrs	r4, r0
 80032c2:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80032c4:	aa0e      	add	r2, sp, #56	; 0x38
 80032c6:	2190      	movs	r1, #144	; 0x90
 80032c8:	4628      	mov	r0, r5
 80032ca:	f001 f8d1 	bl	8004470 <VL53L0X_RdDWord>
 80032ce:	4304      	orrs	r4, r0
 80032d0:	b264      	sxtb	r4, r4
							>> 24);
 80032d2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80032d6:	9a03      	ldr	r2, [sp, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	e003      	b.n	80032e6 <VL53L0X_get_info_from_device+0x464>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80032de:	f04f 0b00 	mov.w	fp, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 80032e2:	f8cd b00c 	str.w	fp, [sp, #12]
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2181      	movs	r1, #129	; 0x81
 80032ea:	4628      	mov	r0, r5
 80032ec:	f001 f8e8 	bl	80044c0 <VL53L0X_WrByte>
 80032f0:	4304      	orrs	r4, r0
 80032f2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80032f4:	2206      	movs	r2, #6
 80032f6:	21ff      	movs	r1, #255	; 0xff
 80032f8:	4628      	mov	r0, r5
 80032fa:	f001 f8e1 	bl	80044c0 <VL53L0X_WrByte>
 80032fe:	4304      	orrs	r4, r0
 8003300:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003302:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8003306:	2183      	movs	r1, #131	; 0x83
 8003308:	4628      	mov	r0, r5
 800330a:	f001 f839 	bl	8004380 <VL53L0X_RdByte>
 800330e:	4304      	orrs	r4, r0
 8003310:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003312:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8003316:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800331a:	2183      	movs	r1, #131	; 0x83
 800331c:	4628      	mov	r0, r5
 800331e:	f001 f8cf 	bl	80044c0 <VL53L0X_WrByte>
 8003322:	4304      	orrs	r4, r0
 8003324:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003326:	2201      	movs	r2, #1
 8003328:	21ff      	movs	r1, #255	; 0xff
 800332a:	4628      	mov	r0, r5
 800332c:	f001 f8c8 	bl	80044c0 <VL53L0X_WrByte>
 8003330:	4304      	orrs	r4, r0
 8003332:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003334:	2201      	movs	r2, #1
 8003336:	2100      	movs	r1, #0
 8003338:	4628      	mov	r0, r5
 800333a:	f001 f8c1 	bl	80044c0 <VL53L0X_WrByte>
 800333e:	4304      	orrs	r4, r0
 8003340:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003342:	2200      	movs	r2, #0
 8003344:	21ff      	movs	r1, #255	; 0xff
 8003346:	4628      	mov	r0, r5
 8003348:	f001 f8ba 	bl	80044c0 <VL53L0X_WrByte>
 800334c:	4304      	orrs	r4, r0
 800334e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	4628      	mov	r0, r5
 8003356:	f001 f8b3 	bl	80044c0 <VL53L0X_WrByte>
 800335a:	4304      	orrs	r4, r0
 800335c:	b264      	sxtb	r4, r4
	if ((Status == VL53L0X_ERROR_NONE) &&
 800335e:	2c00      	cmp	r4, #0
 8003360:	f47f ad9a 	bne.w	8002e98 <VL53L0X_get_info_from_device+0x16>
		if (((option & 1) == 1) &&
 8003364:	f1b8 0f00 	cmp.w	r8, #0
 8003368:	d013      	beq.n	8003392 <VL53L0X_get_info_from_device+0x510>
 800336a:	f017 0f01 	tst.w	r7, #1
 800336e:	d110      	bne.n	8003392 <VL53L0X_get_info_from_device+0x510>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003376:	9b02      	ldr	r3, [sp, #8]
 8003378:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800337c:	aa04      	add	r2, sp, #16
 800337e:	f205 1329 	addw	r3, r5, #297	; 0x129
 8003382:	f205 102f 	addw	r0, r5, #303	; 0x12f
					NvmRefGoodSpadMap[i];
 8003386:	f812 1b01 	ldrb.w	r1, [r2], #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800338a:	f803 1f01 	strb.w	r1, [r3, #1]!
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800338e:	4298      	cmp	r0, r3
 8003390:	d1f9      	bne.n	8003386 <VL53L0X_get_info_from_device+0x504>
		if (((option & 2) == 2) &&
 8003392:	f1ba 0f00 	cmp.w	sl, #0
 8003396:	d002      	beq.n	800339e <VL53L0X_get_info_from_device+0x51c>
 8003398:	f017 0f02 	tst.w	r7, #2
 800339c:	d01f      	beq.n	80033de <VL53L0X_get_info_from_device+0x55c>
		if (((option & 4) == 4) &&
 800339e:	f1b9 0f00 	cmp.w	r9, #0
 80033a2:	d018      	beq.n	80033d6 <VL53L0X_get_info_from_device+0x554>
 80033a4:	f017 0f04 	tst.w	r7, #4
 80033a8:	d115      	bne.n	80033d6 <VL53L0X_get_info_from_device+0x554>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80033aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033ac:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80033b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033b2:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
			SignalRateMeasFixed400mmFix =
 80033b6:	ea4f 234b 	mov.w	r3, fp, lsl #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80033ba:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
			if (DistMeasFixed1104_400_mm != 0) {
 80033be:	9b03      	ldr	r3, [sp, #12]
 80033c0:	b1db      	cbz	r3, 80033fa <VL53L0X_get_info_from_device+0x578>
					OffsetFixed1104_mm =
 80033c2:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
						* 1000) >> 4;
 80033c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 80033d0:	425b      	negs	r3, r3
 80033d2:	b21b      	sxth	r3, r3
			PALDevDataSet(Dev,
 80033d4:	60eb      	str	r3, [r5, #12]
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80033d6:	4337      	orrs	r7, r6
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80033d8:	f885 70f0 	strb.w	r7, [r5, #240]	; 0xf0
 80033dc:	e55c      	b.n	8002e98 <VL53L0X_get_info_from_device+0x16>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80033de:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80033e2:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80033e6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80033ea:	f885 30f2 	strb.w	r3, [r5, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80033ee:	a906      	add	r1, sp, #24
 80033f0:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
 80033f4:	f005 f9f7 	bl	80087e6 <strcpy>
 80033f8:	e7d1      	b.n	800339e <VL53L0X_get_info_from_device+0x51c>
			OffsetMicroMeters = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e7ea      	b.n	80033d4 <VL53L0X_get_info_from_device+0x552>

080033fe <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 80033fe:	b188      	cbz	r0, 8003424 <VL53L0X_encode_timeout+0x26>
		ls_byte = timeout_macro_clks - 1;
 8003400:	1e43      	subs	r3, r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003402:	f033 02ff 	bics.w	r2, r3, #255	; 0xff
 8003406:	d00b      	beq.n	8003420 <VL53L0X_encode_timeout+0x22>
	uint16_t ms_byte = 0;
 8003408:	2200      	movs	r2, #0
			ls_byte = ls_byte >> 1;
 800340a:	085b      	lsrs	r3, r3, #1
			ms_byte++;
 800340c:	3201      	adds	r2, #1
 800340e:	b292      	uxth	r2, r2
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003410:	f033 01ff 	bics.w	r1, r3, #255	; 0xff
 8003414:	d1f9      	bne.n	800340a <VL53L0X_encode_timeout+0xc>
		}

		encoded_timeout = (ms_byte << 8)
				+ (uint16_t) (ls_byte & 0x000000FF);
 8003416:	b2d8      	uxtb	r0, r3
		encoded_timeout = (ms_byte << 8)
 8003418:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800341c:	b280      	uxth	r0, r0
 800341e:	4770      	bx	lr
	uint16_t ms_byte = 0;
 8003420:	2200      	movs	r2, #0
 8003422:	e7f8      	b.n	8003416 <VL53L0X_encode_timeout+0x18>
	uint16_t encoded_timeout = 0;
 8003424:	2000      	movs	r0, #0
	}

	return encoded_timeout;

}
 8003426:	4770      	bx	lr

08003428 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003428:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800342a:	0a00      	lsrs	r0, r0, #8
 800342c:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8003430:	3001      	adds	r0, #1
 8003432:	4770      	bx	lr

08003434 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <VL53L0X_calc_timeout_mclks+0x2c>)
 8003436:	fb03 f202 	mul.w	r2, r3, r2
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800343a:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4

	if (macro_period_ns == 0) {
 800343e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003442:	d30b      	bcc.n	800345c <VL53L0X_calc_timeout_mclks+0x28>
		return 0;
	}
	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <VL53L0X_calc_timeout_mclks+0x30>)
 8003446:	fba3 3202 	umull	r3, r2, r3, r2
 800344a:	09d0      	lsrs	r0, r2, #7
 800344c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003450:	fb03 0001 	mla	r0, r3, r1, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003454:	0992      	lsrs	r2, r2, #6
	timeout_period_mclks =
 8003456:	fbb0 f0f2 	udiv	r0, r0, r2

	return timeout_period_mclks;
 800345a:	4770      	bx	lr
		return 0;
 800345c:	2000      	movs	r0, #0
}
 800345e:	4770      	bx	lr
 8003460:	003a2f00 	.word	0x003a2f00
 8003464:	10624dd3 	.word	0x10624dd3

08003468 <VL53L0X_calc_timeout_us>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <VL53L0X_calc_timeout_us+0x20>)
 800346a:	fb03 f202 	mul.w	r2, r3, r2
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800346e:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <VL53L0X_calc_timeout_us+0x24>)
 8003474:	fba3 0202 	umull	r0, r2, r3, r2
 8003478:	0990      	lsrs	r0, r2, #6

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
		+ (macro_period_ns / 2)) / 1000;
 800347a:	09d2      	lsrs	r2, r2, #7
 800347c:	fb01 2200 	mla	r2, r1, r0, r2
	actual_timeout_period_us =
 8003480:	fba3 3002 	umull	r3, r0, r3, r2

	return actual_timeout_period_us;
}
 8003484:	0980      	lsrs	r0, r0, #6
 8003486:	4770      	bx	lr
 8003488:	003a2f00 	.word	0x003a2f00
 800348c:	10624dd3 	.word	0x10624dd3

08003490 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	4604      	mov	r4, r0
 8003496:	4615      	mov	r5, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint32_t TimeoutMicroSeconds = 0;
	uint16_t PreRangeEncodedTimeOut = 0;
 800349e:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80034a2:	2902      	cmp	r1, #2
 80034a4:	d909      	bls.n	80034ba <get_sequence_step_timeout+0x2a>
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80034a6:	2903      	cmp	r1, #3
 80034a8:	d021      	beq.n	80034ee <get_sequence_step_timeout+0x5e>

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80034aa:	2904      	cmp	r1, #4
 80034ac:	d042      	beq.n	8003534 <get_sequence_step_timeout+0xa4>
	uint32_t TimeoutMicroSeconds = 0;
 80034ae:	2000      	movs	r0, #0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034b0:	4606      	mov	r6, r0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80034b2:	6028      	str	r0, [r5, #0]

	return Status;
}
 80034b4:	4630      	mov	r0, r6
 80034b6:	b005      	add	sp, #20
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80034ba:	f10d 020f 	add.w	r2, sp, #15
 80034be:	4619      	mov	r1, r3
 80034c0:	f7fe fa64 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80034c4:	4606      	mov	r6, r0
 80034c6:	b150      	cbz	r0, 80034de <get_sequence_step_timeout+0x4e>
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80034c8:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80034cc:	f7ff ffac 	bl	8003428 <VL53L0X_decode_timeout>
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80034d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80034d4:	b281      	uxth	r1, r0
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7ff ffc6 	bl	8003468 <VL53L0X_calc_timeout_us>
 80034dc:	e7e9      	b.n	80034b2 <get_sequence_step_timeout+0x22>
			Status = VL53L0X_RdByte(Dev,
 80034de:	f10d 020e 	add.w	r2, sp, #14
 80034e2:	2146      	movs	r1, #70	; 0x46
 80034e4:	4620      	mov	r0, r4
 80034e6:	f000 ff4b 	bl	8004380 <VL53L0X_RdByte>
 80034ea:	4606      	mov	r6, r0
 80034ec:	e7ec      	b.n	80034c8 <get_sequence_step_timeout+0x38>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80034ee:	f10d 020f 	add.w	r2, sp, #15
 80034f2:	2100      	movs	r1, #0
 80034f4:	f7fe fa4a 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80034f8:	4606      	mov	r6, r0
 80034fa:	b108      	cbz	r0, 8003500 <get_sequence_step_timeout+0x70>
	uint32_t TimeoutMicroSeconds = 0;
 80034fc:	2000      	movs	r0, #0
 80034fe:	e7d8      	b.n	80034b2 <get_sequence_step_timeout+0x22>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003500:	f10d 020f 	add.w	r2, sp, #15
 8003504:	2100      	movs	r1, #0
 8003506:	4620      	mov	r0, r4
 8003508:	f7fe fa40 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 800350c:	4606      	mov	r6, r0
 800350e:	b150      	cbz	r0, 8003526 <get_sequence_step_timeout+0x96>
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003510:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8003514:	f7ff ff88 	bl	8003428 <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003518:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800351c:	b281      	uxth	r1, r0
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff ffa2 	bl	8003468 <VL53L0X_calc_timeout_us>
 8003524:	e7c5      	b.n	80034b2 <get_sequence_step_timeout+0x22>
				Status = VL53L0X_RdWord(Dev,
 8003526:	aa03      	add	r2, sp, #12
 8003528:	2151      	movs	r1, #81	; 0x51
 800352a:	4620      	mov	r0, r4
 800352c:	f000 ff7e 	bl	800442c <VL53L0X_RdWord>
 8003530:	4606      	mov	r6, r0
 8003532:	e7ed      	b.n	8003510 <get_sequence_step_timeout+0x80>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003534:	a901      	add	r1, sp, #4
 8003536:	f7fe faa7 	bl	8001a88 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800353a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800353e:	b1bb      	cbz	r3, 8003570 <get_sequence_step_timeout+0xe0>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003540:	f10d 020f 	add.w	r2, sp, #15
 8003544:	2100      	movs	r1, #0
 8003546:	4620      	mov	r0, r4
 8003548:	f7fe fa20 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 800354c:	4606      	mov	r6, r0
 800354e:	b110      	cbz	r0, 8003556 <get_sequence_step_timeout+0xc6>
		PreRangeTimeOutMClks = 0;
 8003550:	2700      	movs	r7, #0
	uint16_t FinalRangeTimeOutMClks = 0;
 8003552:	2100      	movs	r1, #0
 8003554:	e016      	b.n	8003584 <get_sequence_step_timeout+0xf4>
				Status = VL53L0X_RdWord(Dev,
 8003556:	aa03      	add	r2, sp, #12
 8003558:	2151      	movs	r1, #81	; 0x51
 800355a:	4620      	mov	r0, r4
 800355c:	f000 ff66 	bl	800442c <VL53L0X_RdWord>
 8003560:	4606      	mov	r6, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003562:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8003566:	f7ff ff5f 	bl	8003428 <VL53L0X_decode_timeout>
 800356a:	b287      	uxth	r7, r0
		if (Status == VL53L0X_ERROR_NONE) {
 800356c:	b10e      	cbz	r6, 8003572 <get_sequence_step_timeout+0xe2>
 800356e:	e7f0      	b.n	8003552 <get_sequence_step_timeout+0xc2>
		PreRangeTimeOutMClks = 0;
 8003570:	2700      	movs	r7, #0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003572:	f10d 020f 	add.w	r2, sp, #15
 8003576:	2101      	movs	r1, #1
 8003578:	4620      	mov	r0, r4
 800357a:	f7fe fa07 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 800357e:	4606      	mov	r6, r0
 8003580:	b140      	cbz	r0, 8003594 <get_sequence_step_timeout+0x104>
	uint16_t FinalRangeTimeOutMClks = 0;
 8003582:	2100      	movs	r1, #0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8003584:	1bc9      	subs	r1, r1, r7
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003586:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800358a:	b289      	uxth	r1, r1
 800358c:	4620      	mov	r0, r4
 800358e:	f7ff ff6b 	bl	8003468 <VL53L0X_calc_timeout_us>
 8003592:	e78e      	b.n	80034b2 <get_sequence_step_timeout+0x22>
			Status = VL53L0X_RdWord(Dev,
 8003594:	f10d 020a 	add.w	r2, sp, #10
 8003598:	2171      	movs	r1, #113	; 0x71
 800359a:	4620      	mov	r0, r4
 800359c:	f000 ff46 	bl	800442c <VL53L0X_RdWord>
 80035a0:	4606      	mov	r6, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80035a2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80035a6:	f7ff ff3f 	bl	8003428 <VL53L0X_decode_timeout>
 80035aa:	b281      	uxth	r1, r0
 80035ac:	e7ea      	b.n	8003584 <get_sequence_step_timeout+0xf4>

080035ae <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80035ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b0:	b085      	sub	sp, #20
 80035b2:	4604      	mov	r4, r0
 80035b4:	4616      	mov	r6, r2
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80035b6:	2902      	cmp	r1, #2
 80035b8:	d921      	bls.n	80035fe <set_sequence_step_timeout+0x50>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80035ba:	2903      	cmp	r1, #3
 80035bc:	d03d      	beq.n	800363a <set_sequence_step_timeout+0x8c>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80035be:	2904      	cmp	r1, #4
 80035c0:	d17b      	bne.n	80036ba <set_sequence_step_timeout+0x10c>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80035c2:	a901      	add	r1, sp, #4
 80035c4:	f7fe fa60 	bl	8001a88 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
			if (SchedulerSequenceSteps.PreRangeOn) {
 80035c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d052      	beq.n	8003676 <set_sequence_step_timeout+0xc8>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80035d0:	f10d 020f 	add.w	r2, sp, #15
 80035d4:	2100      	movs	r1, #0
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7fe f9d8 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80035dc:	4605      	mov	r5, r0
 80035de:	2800      	cmp	r0, #0
 80035e0:	d152      	bne.n	8003688 <set_sequence_step_timeout+0xda>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80035e2:	aa03      	add	r2, sp, #12
 80035e4:	2151      	movs	r1, #81	; 0x51
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 ff20 	bl	800442c <VL53L0X_RdWord>
 80035ec:	4605      	mov	r5, r0
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80035ee:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80035f2:	f7ff ff19 	bl	8003428 <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 80035f6:	b287      	uxth	r7, r0
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	d03d      	beq.n	8003678 <set_sequence_step_timeout+0xca>
 80035fc:	e044      	b.n	8003688 <set_sequence_step_timeout+0xda>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80035fe:	f10d 020f 	add.w	r2, sp, #15
 8003602:	2100      	movs	r1, #0
 8003604:	f7fe f9c2 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8003608:	4605      	mov	r5, r0
 800360a:	2800      	cmp	r0, #0
 800360c:	d13c      	bne.n	8003688 <set_sequence_step_timeout+0xda>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800360e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003612:	4631      	mov	r1, r6
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff ff0d 	bl	8003434 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 800361a:	b283      	uxth	r3, r0
 800361c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
 8003620:	bf9a      	itte	ls
 8003622:	f100 32ff 	addls.w	r2, r0, #4294967295
 8003626:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8003628:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800362a:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
 800362e:	2146      	movs	r1, #70	; 0x46
 8003630:	4620      	mov	r0, r4
 8003632:	f000 ff45 	bl	80044c0 <VL53L0X_WrByte>
 8003636:	4605      	mov	r5, r0
 8003638:	e026      	b.n	8003688 <set_sequence_step_timeout+0xda>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800363a:	f10d 020f 	add.w	r2, sp, #15
 800363e:	2100      	movs	r1, #0
 8003640:	f7fe f9a4 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
 8003644:	4605      	mov	r5, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8003646:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800364a:	4631      	mov	r1, r6
 800364c:	4620      	mov	r0, r4
 800364e:	f7ff fef1 	bl	8003434 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8003652:	b280      	uxth	r0, r0
 8003654:	f7ff fed3 	bl	80033fe <VL53L0X_encode_timeout>
 8003658:	f8ad 000c 	strh.w	r0, [sp, #12]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800365c:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8003660:	b995      	cbnz	r5, 8003688 <set_sequence_step_timeout+0xda>
				Status = VL53L0X_WrWord(Dev,
 8003662:	4602      	mov	r2, r0
 8003664:	2151      	movs	r1, #81	; 0x51
 8003666:	4620      	mov	r0, r4
 8003668:	f000 ff3a 	bl	80044e0 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 800366c:	4605      	mov	r5, r0
 800366e:	b958      	cbnz	r0, 8003688 <set_sequence_step_timeout+0xda>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003670:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
 8003674:	e008      	b.n	8003688 <set_sequence_step_timeout+0xda>
			PreRangeTimeOutMClks = 0;
 8003676:	2700      	movs	r7, #0

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003678:	f10d 020f 	add.w	r2, sp, #15
 800367c:	2101      	movs	r1, #1
 800367e:	4620      	mov	r0, r4
 8003680:	f7fe f984 	bl	800198c <VL53L0X_GetVcselPulsePeriod>
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003684:	4605      	mov	r5, r0
 8003686:	b110      	cbz	r0, 800368e <set_sequence_step_timeout+0xe0>
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8003688:	4628      	mov	r0, r5
 800368a:	b005      	add	sp, #20
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					VL53L0X_calc_timeout_mclks(Dev,
 800368e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003692:	4631      	mov	r1, r6
 8003694:	4620      	mov	r0, r4
 8003696:	f7ff fecd 	bl	8003434 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800369a:	fa17 f080 	uxtah	r0, r7, r0
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800369e:	b280      	uxth	r0, r0
 80036a0:	f7ff fead 	bl	80033fe <VL53L0X_encode_timeout>
 80036a4:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 80036a6:	2171      	movs	r1, #113	; 0x71
 80036a8:	4620      	mov	r0, r4
 80036aa:	f000 ff19 	bl	80044e0 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 80036ae:	4605      	mov	r5, r0
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d1e9      	bne.n	8003688 <set_sequence_step_timeout+0xda>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80036b4:	f8c4 60dc 	str.w	r6, [r4, #220]	; 0xdc
 80036b8:	e7e6      	b.n	8003688 <set_sequence_step_timeout+0xda>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80036ba:	f06f 0503 	mvn.w	r5, #3
 80036be:	e7e3      	b.n	8003688 <set_sequence_step_timeout+0xda>

080036c0 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	b084      	sub	sp, #16
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f88d 3003 	strb.w	r3, [sp, #3]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80036ca:	f012 0f01 	tst.w	r2, #1
 80036ce:	f040 8153 	bne.w	8003978 <VL53L0X_set_vcsel_pulse_period+0x2b8>
 80036d2:	4604      	mov	r4, r0
 80036d4:	4615      	mov	r5, r2
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80036d6:	2900      	cmp	r1, #0
 80036d8:	f040 8157 	bne.w	800398a <VL53L0X_set_vcsel_pulse_period+0x2ca>
 80036dc:	f1a2 030c 	sub.w	r3, r2, #12
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	f200 814b 	bhi.w	800397e <VL53L0X_set_vcsel_pulse_period+0x2be>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80036e8:	f1a2 030c 	sub.w	r3, r2, #12
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	f200 810e 	bhi.w	800390e <VL53L0X_set_vcsel_pulse_period+0x24e>
 80036f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036f6:	0007      	.short	0x0007
 80036f8:	002d010c 	.word	0x002d010c
 80036fc:	0037010c 	.word	0x0037010c
 8003700:	0041010c 	.word	0x0041010c

			Status = VL53L0X_WrByte(Dev,
 8003704:	2218      	movs	r2, #24
 8003706:	2157      	movs	r1, #87	; 0x57
 8003708:	f000 feda 	bl	80044c0 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800370c:	2208      	movs	r2, #8
 800370e:	2156      	movs	r1, #86	; 0x56
 8003710:	4620      	mov	r0, r4
 8003712:	f000 fed5 	bl	80044c0 <VL53L0X_WrByte>
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8003716:	b9c8      	cbnz	r0, 800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003718:	086e      	lsrs	r6, r5, #1
 800371a:	3e01      	subs	r6, #1
 800371c:	b2f6      	uxtb	r6, r6
		* For the MSRC timeout, the same applies - this timeout being
		* dependent on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800371e:	aa02      	add	r2, sp, #8
 8003720:	2103      	movs	r1, #3
 8003722:	4620      	mov	r0, r4
 8003724:	f7ff feb4 	bl	8003490 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8003728:	2800      	cmp	r0, #0
 800372a:	f000 80fb 	beq.w	8003924 <VL53L0X_set_vcsel_pulse_period+0x264>
			if (Status == VL53L0X_ERROR_NONE)
				Status = set_sequence_step_timeout(Dev,
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800372e:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8003732:	b958      	cbnz	r0, 800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
		VL53L0X_GETPARAMETERFIELD(Dev,
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003734:	6961      	ldr	r1, [r4, #20]
 8003736:	4620      	mov	r0, r4
 8003738:	f7fe f920 	bl	800197c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800373c:	b930      	cbnz	r0, 800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
		Status = VL53L0X_perform_phase_calibration(
 800373e:	2301      	movs	r3, #1
 8003740:	2200      	movs	r2, #0
 8003742:	f10d 0103 	add.w	r1, sp, #3
 8003746:	4620      	mov	r0, r4
 8003748:	f7ff f999 	bl	8002a7e <VL53L0X_perform_phase_calibration>
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 800374c:	b004      	add	sp, #16
 800374e:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrByte(Dev,
 8003750:	2230      	movs	r2, #48	; 0x30
 8003752:	2157      	movs	r1, #87	; 0x57
 8003754:	f000 feb4 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8003758:	2208      	movs	r2, #8
 800375a:	2156      	movs	r1, #86	; 0x56
 800375c:	4620      	mov	r0, r4
 800375e:	f000 feaf 	bl	80044c0 <VL53L0X_WrByte>
 8003762:	e7d8      	b.n	8003716 <VL53L0X_set_vcsel_pulse_period+0x56>
			Status = VL53L0X_WrByte(Dev,
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	2157      	movs	r1, #87	; 0x57
 8003768:	f000 feaa 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800376c:	2208      	movs	r2, #8
 800376e:	2156      	movs	r1, #86	; 0x56
 8003770:	4620      	mov	r0, r4
 8003772:	f000 fea5 	bl	80044c0 <VL53L0X_WrByte>
 8003776:	e7ce      	b.n	8003716 <VL53L0X_set_vcsel_pulse_period+0x56>
			Status = VL53L0X_WrByte(Dev,
 8003778:	2250      	movs	r2, #80	; 0x50
 800377a:	2157      	movs	r1, #87	; 0x57
 800377c:	f000 fea0 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8003780:	2208      	movs	r2, #8
 8003782:	2156      	movs	r1, #86	; 0x56
 8003784:	4620      	mov	r0, r4
 8003786:	f000 fe9b 	bl	80044c0 <VL53L0X_WrByte>
 800378a:	e7c4      	b.n	8003716 <VL53L0X_set_vcsel_pulse_period+0x56>
			Status = VL53L0X_WrByte(Dev,
 800378c:	2210      	movs	r2, #16
 800378e:	2148      	movs	r1, #72	; 0x48
 8003790:	4620      	mov	r0, r4
 8003792:	f000 fe95 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8003796:	2208      	movs	r2, #8
 8003798:	2147      	movs	r1, #71	; 0x47
 800379a:	4620      	mov	r0, r4
 800379c:	f000 fe90 	bl	80044c0 <VL53L0X_WrByte>
 80037a0:	4606      	mov	r6, r0
			Status |= VL53L0X_WrByte(Dev,
 80037a2:	2202      	movs	r2, #2
 80037a4:	2132      	movs	r1, #50	; 0x32
 80037a6:	4620      	mov	r0, r4
 80037a8:	f000 fe8a 	bl	80044c0 <VL53L0X_WrByte>
 80037ac:	4306      	orrs	r6, r0
 80037ae:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 80037b0:	220c      	movs	r2, #12
 80037b2:	2130      	movs	r1, #48	; 0x30
 80037b4:	4620      	mov	r0, r4
 80037b6:	f000 fe83 	bl	80044c0 <VL53L0X_WrByte>
 80037ba:	4306      	orrs	r6, r0
 80037bc:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80037be:	2201      	movs	r2, #1
 80037c0:	21ff      	movs	r1, #255	; 0xff
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 fe7c 	bl	80044c0 <VL53L0X_WrByte>
 80037c8:	4306      	orrs	r6, r0
 80037ca:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 80037cc:	2230      	movs	r2, #48	; 0x30
 80037ce:	4611      	mov	r1, r2
 80037d0:	4620      	mov	r0, r4
 80037d2:	f000 fe75 	bl	80044c0 <VL53L0X_WrByte>
 80037d6:	4306      	orrs	r6, r0
 80037d8:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80037da:	2200      	movs	r2, #0
 80037dc:	21ff      	movs	r1, #255	; 0xff
 80037de:	4620      	mov	r0, r4
 80037e0:	f000 fe6e 	bl	80044c0 <VL53L0X_WrByte>
 80037e4:	4330      	orrs	r0, r6
 80037e6:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d1af      	bne.n	800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80037ec:	086e      	lsrs	r6, r5, #1
 80037ee:	3e01      	subs	r6, #1
 80037f0:	b2f6      	uxtb	r6, r6
		switch (VcselPeriodType) {
 80037f2:	e0ea      	b.n	80039ca <VL53L0X_set_vcsel_pulse_period+0x30a>
			Status = VL53L0X_WrByte(Dev,
 80037f4:	2228      	movs	r2, #40	; 0x28
 80037f6:	2148      	movs	r1, #72	; 0x48
 80037f8:	4620      	mov	r0, r4
 80037fa:	f000 fe61 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80037fe:	2208      	movs	r2, #8
 8003800:	2147      	movs	r1, #71	; 0x47
 8003802:	4620      	mov	r0, r4
 8003804:	f000 fe5c 	bl	80044c0 <VL53L0X_WrByte>
 8003808:	4606      	mov	r6, r0
			Status |= VL53L0X_WrByte(Dev,
 800380a:	2203      	movs	r2, #3
 800380c:	2132      	movs	r1, #50	; 0x32
 800380e:	4620      	mov	r0, r4
 8003810:	f000 fe56 	bl	80044c0 <VL53L0X_WrByte>
 8003814:	4306      	orrs	r6, r0
 8003816:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 8003818:	2209      	movs	r2, #9
 800381a:	2130      	movs	r1, #48	; 0x30
 800381c:	4620      	mov	r0, r4
 800381e:	f000 fe4f 	bl	80044c0 <VL53L0X_WrByte>
 8003822:	4306      	orrs	r6, r0
 8003824:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003826:	2201      	movs	r2, #1
 8003828:	21ff      	movs	r1, #255	; 0xff
 800382a:	4620      	mov	r0, r4
 800382c:	f000 fe48 	bl	80044c0 <VL53L0X_WrByte>
 8003830:	4306      	orrs	r6, r0
 8003832:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 8003834:	2220      	movs	r2, #32
 8003836:	2130      	movs	r1, #48	; 0x30
 8003838:	4620      	mov	r0, r4
 800383a:	f000 fe41 	bl	80044c0 <VL53L0X_WrByte>
 800383e:	4306      	orrs	r6, r0
 8003840:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003842:	2200      	movs	r2, #0
 8003844:	21ff      	movs	r1, #255	; 0xff
 8003846:	4620      	mov	r0, r4
 8003848:	f000 fe3a 	bl	80044c0 <VL53L0X_WrByte>
 800384c:	4330      	orrs	r0, r6
 800384e:	b240      	sxtb	r0, r0
 8003850:	e7ca      	b.n	80037e8 <VL53L0X_set_vcsel_pulse_period+0x128>
			Status = VL53L0X_WrByte(Dev,
 8003852:	2238      	movs	r2, #56	; 0x38
 8003854:	2148      	movs	r1, #72	; 0x48
 8003856:	4620      	mov	r0, r4
 8003858:	f000 fe32 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800385c:	2208      	movs	r2, #8
 800385e:	2147      	movs	r1, #71	; 0x47
 8003860:	4620      	mov	r0, r4
 8003862:	f000 fe2d 	bl	80044c0 <VL53L0X_WrByte>
 8003866:	4606      	mov	r6, r0
			Status |= VL53L0X_WrByte(Dev,
 8003868:	2203      	movs	r2, #3
 800386a:	2132      	movs	r1, #50	; 0x32
 800386c:	4620      	mov	r0, r4
 800386e:	f000 fe27 	bl	80044c0 <VL53L0X_WrByte>
 8003872:	4306      	orrs	r6, r0
 8003874:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 8003876:	2208      	movs	r2, #8
 8003878:	2130      	movs	r1, #48	; 0x30
 800387a:	4620      	mov	r0, r4
 800387c:	f000 fe20 	bl	80044c0 <VL53L0X_WrByte>
 8003880:	4306      	orrs	r6, r0
 8003882:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003884:	2201      	movs	r2, #1
 8003886:	21ff      	movs	r1, #255	; 0xff
 8003888:	4620      	mov	r0, r4
 800388a:	f000 fe19 	bl	80044c0 <VL53L0X_WrByte>
 800388e:	4306      	orrs	r6, r0
 8003890:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 8003892:	2220      	movs	r2, #32
 8003894:	2130      	movs	r1, #48	; 0x30
 8003896:	4620      	mov	r0, r4
 8003898:	f000 fe12 	bl	80044c0 <VL53L0X_WrByte>
 800389c:	4306      	orrs	r6, r0
 800389e:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80038a0:	2200      	movs	r2, #0
 80038a2:	21ff      	movs	r1, #255	; 0xff
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 fe0b 	bl	80044c0 <VL53L0X_WrByte>
 80038aa:	4330      	orrs	r0, r6
 80038ac:	b240      	sxtb	r0, r0
 80038ae:	e79b      	b.n	80037e8 <VL53L0X_set_vcsel_pulse_period+0x128>
			Status = VL53L0X_WrByte(Dev,
 80038b0:	2248      	movs	r2, #72	; 0x48
 80038b2:	4611      	mov	r1, r2
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 fe03 	bl	80044c0 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80038ba:	2208      	movs	r2, #8
 80038bc:	2147      	movs	r1, #71	; 0x47
 80038be:	4620      	mov	r0, r4
 80038c0:	f000 fdfe 	bl	80044c0 <VL53L0X_WrByte>
 80038c4:	4606      	mov	r6, r0
			Status |= VL53L0X_WrByte(Dev,
 80038c6:	2203      	movs	r2, #3
 80038c8:	2132      	movs	r1, #50	; 0x32
 80038ca:	4620      	mov	r0, r4
 80038cc:	f000 fdf8 	bl	80044c0 <VL53L0X_WrByte>
 80038d0:	4306      	orrs	r6, r0
 80038d2:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 80038d4:	2207      	movs	r2, #7
 80038d6:	2130      	movs	r1, #48	; 0x30
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 fdf1 	bl	80044c0 <VL53L0X_WrByte>
 80038de:	4306      	orrs	r6, r0
 80038e0:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80038e2:	2201      	movs	r2, #1
 80038e4:	21ff      	movs	r1, #255	; 0xff
 80038e6:	4620      	mov	r0, r4
 80038e8:	f000 fdea 	bl	80044c0 <VL53L0X_WrByte>
 80038ec:	4306      	orrs	r6, r0
 80038ee:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev,
 80038f0:	2220      	movs	r2, #32
 80038f2:	2130      	movs	r1, #48	; 0x30
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 fde3 	bl	80044c0 <VL53L0X_WrByte>
 80038fa:	4306      	orrs	r6, r0
 80038fc:	b276      	sxtb	r6, r6
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80038fe:	2200      	movs	r2, #0
 8003900:	21ff      	movs	r1, #255	; 0xff
 8003902:	4620      	mov	r0, r4
 8003904:	f000 fddc 	bl	80044c0 <VL53L0X_WrByte>
 8003908:	4330      	orrs	r0, r6
 800390a:	b240      	sxtb	r0, r0
 800390c:	e76c      	b.n	80037e8 <VL53L0X_set_vcsel_pulse_period+0x128>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800390e:	086e      	lsrs	r6, r5, #1
 8003910:	3e01      	subs	r6, #1
 8003912:	b2f6      	uxtb	r6, r6
		switch (VcselPeriodType) {
 8003914:	2900      	cmp	r1, #0
 8003916:	f43f af02 	beq.w	800371e <VL53L0X_set_vcsel_pulse_period+0x5e>
 800391a:	2901      	cmp	r1, #1
 800391c:	d055      	beq.n	80039ca <VL53L0X_set_vcsel_pulse_period+0x30a>
 800391e:	f06f 0003 	mvn.w	r0, #3
 8003922:	e713      	b.n	800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
				Status = get_sequence_step_timeout(Dev,
 8003924:	aa01      	add	r2, sp, #4
 8003926:	2102      	movs	r1, #2
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff fdb1 	bl	8003490 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 800392e:	2800      	cmp	r0, #0
 8003930:	f47f aefd 	bne.w	800372e <VL53L0X_set_vcsel_pulse_period+0x6e>
				Status = VL53L0X_WrByte(Dev,
 8003934:	4632      	mov	r2, r6
 8003936:	2150      	movs	r1, #80	; 0x50
 8003938:	4620      	mov	r0, r4
 800393a:	f000 fdc1 	bl	80044c0 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 800393e:	2800      	cmp	r0, #0
 8003940:	f47f aef5 	bne.w	800372e <VL53L0X_set_vcsel_pulse_period+0x6e>
				Status = set_sequence_step_timeout(Dev,
 8003944:	9a02      	ldr	r2, [sp, #8]
 8003946:	2103      	movs	r1, #3
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff fe30 	bl	80035ae <set_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 800394e:	2800      	cmp	r0, #0
 8003950:	f47f aeed 	bne.w	800372e <VL53L0X_set_vcsel_pulse_period+0x6e>
				Status = set_sequence_step_timeout(Dev,
 8003954:	9a01      	ldr	r2, [sp, #4]
 8003956:	2102      	movs	r1, #2
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fe28 	bl	80035ae <set_sequence_step_timeout>
 800395e:	e6e6      	b.n	800372e <VL53L0X_set_vcsel_pulse_period+0x6e>
				Status = VL53L0X_WrByte(Dev,
 8003960:	4632      	mov	r2, r6
 8003962:	2170      	movs	r1, #112	; 0x70
 8003964:	4620      	mov	r0, r4
 8003966:	f000 fdab 	bl	80044c0 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 800396a:	bba8      	cbnz	r0, 80039d8 <VL53L0X_set_vcsel_pulse_period+0x318>
				Status = set_sequence_step_timeout(Dev,
 800396c:	9a03      	ldr	r2, [sp, #12]
 800396e:	2104      	movs	r1, #4
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff fe1c 	bl	80035ae <set_sequence_step_timeout>
 8003976:	e02f      	b.n	80039d8 <VL53L0X_set_vcsel_pulse_period+0x318>
 8003978:	f06f 0003 	mvn.w	r0, #3
 800397c:	e6e6      	b.n	800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
 800397e:	f06f 0003 	mvn.w	r0, #3
 8003982:	e6e3      	b.n	800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
 8003984:	f06f 0003 	mvn.w	r0, #3
 8003988:	e6e0      	b.n	800374c <VL53L0X_set_vcsel_pulse_period+0x8c>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800398a:	2901      	cmp	r1, #1
 800398c:	d1bf      	bne.n	800390e <VL53L0X_set_vcsel_pulse_period+0x24e>
 800398e:	f1a5 0308 	sub.w	r3, r5, #8
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b06      	cmp	r3, #6
 8003996:	d8f5      	bhi.n	8003984 <VL53L0X_set_vcsel_pulse_period+0x2c4>
		if (VCSELPulsePeriodPCLK == 8) {
 8003998:	f1a5 0308 	sub.w	r3, r5, #8
 800399c:	2b06      	cmp	r3, #6
 800399e:	d811      	bhi.n	80039c4 <VL53L0X_set_vcsel_pulse_period+0x304>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <VL53L0X_set_vcsel_pulse_period+0x2e8>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	0800378d 	.word	0x0800378d
 80039ac:	080039c5 	.word	0x080039c5
 80039b0:	080037f5 	.word	0x080037f5
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	08003853 	.word	0x08003853
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	080038b1 	.word	0x080038b1
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80039c4:	086e      	lsrs	r6, r5, #1
 80039c6:	3e01      	subs	r6, #1
 80039c8:	b2f6      	uxtb	r6, r6
			Status = get_sequence_step_timeout(Dev,
 80039ca:	aa03      	add	r2, sp, #12
 80039cc:	2104      	movs	r1, #4
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff fd5e 	bl	8003490 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d0c3      	beq.n	8003960 <VL53L0X_set_vcsel_pulse_period+0x2a0>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80039d8:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
			break;
 80039dc:	e6a9      	b.n	8003732 <VL53L0X_set_vcsel_pulse_period+0x72>
 80039de:	bf00      	nop

080039e0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80039e6:	b129      	cbz	r1, 80039f4 <VL53L0X_get_vcsel_pulse_period+0x14>
 80039e8:	2901      	cmp	r1, #1
 80039ea:	d010      	beq.n	8003a0e <VL53L0X_get_vcsel_pulse_period+0x2e>
 80039ec:	f06f 0003 	mvn.w	r0, #3
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80039f0:	b002      	add	sp, #8
 80039f2:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80039f4:	f10d 0207 	add.w	r2, sp, #7
 80039f8:	2150      	movs	r1, #80	; 0x50
 80039fa:	f000 fcc1 	bl	8004380 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1f6      	bne.n	80039f0 <VL53L0X_get_vcsel_pulse_period+0x10>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a06:	3301      	adds	r3, #1
 8003a08:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8003a0a:	7023      	strb	r3, [r4, #0]
 8003a0c:	e7f0      	b.n	80039f0 <VL53L0X_get_vcsel_pulse_period+0x10>
		Status = VL53L0X_RdByte(Dev,
 8003a0e:	f10d 0207 	add.w	r2, sp, #7
 8003a12:	2170      	movs	r1, #112	; 0x70
 8003a14:	f000 fcb4 	bl	8004380 <VL53L0X_RdByte>
	break;
 8003a18:	e7f1      	b.n	80039fe <VL53L0X_get_vcsel_pulse_period+0x1e>

08003a1a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1c:	b085      	sub	sp, #20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8003a1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003a22:	9301      	str	r3, [sp, #4]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	9300      	str	r3, [sp, #0]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8003a28:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003a2c:	4299      	cmp	r1, r3
 8003a2e:	d958      	bls.n	8003ae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
 8003a30:	4604      	mov	r4, r0
 8003a32:	460d      	mov	r5, r1

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003a34:	a902      	add	r1, sp, #8
 8003a36:	f7fe f827 	bl	8001a88 <VL53L0X_GetSequenceStepEnables>

	if (Status == VL53L0X_ERROR_NONE &&
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d14b      	bne.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
	FinalRangeTimingBudgetMicroSeconds =
 8003a40:	f6a5 07e8 	subw	r7, r5, #2280	; 0x8e8
		(SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
 8003a44:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003a48:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d01a      	beq.n	8003a8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x72>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8003a56:	aa01      	add	r2, sp, #4
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff fd18 	bl	8003490 <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d141      	bne.n	8003ae8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xce>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8003a64:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003a68:	b12b      	cbz	r3, 8003a76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x5c>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8003a6a:	9b01      	ldr	r3, [sp, #4]
 8003a6c:	f203 234e 	addw	r3, r3, #590	; 0x24e
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
 8003a70:	429f      	cmp	r7, r3
 8003a72:	d93b      	bls.n	8003aec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8003a74:	1aff      	subs	r7, r7, r3
			LOG_FUNCTION_END(Status);
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8003a76:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003a7a:	b1b3      	cbz	r3, 8003aaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x90>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8003a7c:	9b01      	ldr	r3, [sp, #4]
 8003a7e:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8003a82:	005a      	lsls	r2, r3, #1
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8003a84:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 8003a88:	d933      	bls.n	8003af2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8003a8a:	1abf      	subs	r7, r7, r2
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8003a8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003a90:	b9b3      	cbnz	r3, 8003ac0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa6>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8003a92:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003a96:	b1fb      	cbz	r3, 8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8003a98:	f2a7 2226 	subw	r2, r7, #550	; 0x226
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7ff fd85 	bl	80035ae <set_sequence_step_timeout>
 8003aa4:	4606      	mov	r6, r0
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8003aa6:	6165      	str	r5, [r4, #20]
 8003aa8:	e016      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8003aaa:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ec      	beq.n	8003a8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x72>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8003ab2:	9b01      	ldr	r3, [sp, #4]
 8003ab4:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8003ab8:	429f      	cmp	r7, r3
 8003aba:	d91d      	bls.n	8003af8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xde>
							-= SubTimeout;
 8003abc:	1aff      	subs	r7, r7, r3
 8003abe:	e7e5      	b.n	8003a8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x72>
		Status = get_sequence_step_timeout(Dev,
 8003ac0:	466a      	mov	r2, sp
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff fce3 	bl	8003490 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8003aca:	9b00      	ldr	r3, [sp, #0]
 8003acc:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8003ad0:	42bb      	cmp	r3, r7
 8003ad2:	d214      	bcs.n	8003afe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe4>
	if (Status == VL53L0X_ERROR_NONE &&
 8003ad4:	b118      	cbz	r0, 8003ade <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc4>
		Status = get_sequence_step_timeout(Dev,
 8003ad6:	4606      	mov	r6, r0
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003ad8:	4630      	mov	r0, r6
 8003ada:	b005      	add	sp, #20
 8003adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8003ade:	1aff      	subs	r7, r7, r3
 8003ae0:	e7d7      	b.n	8003a92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		return Status;
 8003ae2:	f06f 0603 	mvn.w	r6, #3
 8003ae6:	e7f7      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			return Status;
 8003ae8:	4606      	mov	r6, r0
 8003aea:	e7f5      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
 8003aec:	f06f 0603 	mvn.w	r6, #3
 8003af0:	e7f2      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003af2:	f06f 0603 	mvn.w	r6, #3
 8003af6:	e7ef      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003af8:	f06f 0603 	mvn.w	r6, #3
 8003afc:	e7ec      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003afe:	f06f 0603 	mvn.w	r6, #3
 8003b02:	e7e9      	b.n	8003ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>

08003b04 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	4605      	mov	r5, r0
 8003b0a:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8003b0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b10:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	9301      	str	r3, [sp, #4]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8003b16:	f640 3336 	movw	r3, #2870	; 0xb36
 8003b1a:	600b      	str	r3, [r1, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003b1c:	a904      	add	r1, sp, #16
 8003b1e:	f7fd ffb3 	bl	8001a88 <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 8003b22:	4606      	mov	r6, r0
 8003b24:	bb58      	cbnz	r0, 8003b7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
 8003b26:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003b2a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	d01a      	beq.n	8003b6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8003b38:	aa02      	add	r2, sp, #8
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7ff fca7 	bl	8003490 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8003b42:	4603      	mov	r3, r0
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d136      	bne.n	8003bb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
			if (SchedulerSequenceSteps.TccOn) {
 8003b48:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003b4c:	b12b      	cbz	r3, 8003b5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8003b4e:	9b02      	ldr	r3, [sp, #8]
 8003b50:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8003b5a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003b5e:	b18b      	cbz	r3, 8003b84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8003b60:	9b02      	ldr	r3, [sp, #8]
 8003b62:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003b6c:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8003b6e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003b72:	b993      	cbnz	r3, 8003b9a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x96>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8003b74:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003b78:	b9fb      	cbnz	r3, 8003bba <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb6>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	616b      	str	r3, [r5, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003b7e:	4630      	mov	r0, r6
 8003b80:	b006      	add	sp, #24
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8003b84:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	e7e9      	b.n	8003b6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
			Status = get_sequence_step_timeout(Dev,
 8003b9a:	aa01      	add	r2, sp, #4
 8003b9c:	2103      	movs	r1, #3
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7ff fc76 	bl	8003490 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0de      	beq.n	8003b74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
			Status = get_sequence_step_timeout(Dev,
 8003bb6:	461e      	mov	r6, r3
 8003bb8:	e7e1      	b.n	8003b7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
 8003bba:	aa03      	add	r2, sp, #12
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7ff fc66 	bl	8003490 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d0d2      	beq.n	8003b7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x76>
			Status = get_sequence_step_timeout(Dev,
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	e7d2      	b.n	8003b7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>

08003bd8 <VL53L0X_load_tuning_settings>:

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8003bd8:	780b      	ldrb	r3, [r1, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d060      	beq.n	8003ca0 <VL53L0X_load_tuning_settings+0xc8>
{
 8003bde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003be2:	b083      	sub	sp, #12
 8003be4:	4606      	mov	r6, r0
 8003be6:	460d      	mov	r5, r1
	Index = 0;
 8003be8:	2400      	movs	r4, #0
 8003bea:	1c4f      	adds	r7, r1, #1
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
			switch (SelectParam) {
 8003bec:	f06f 0803 	mvn.w	r8, #3
 8003bf0:	e047      	b.n	8003c82 <VL53L0X_load_tuning_settings+0xaa>
			Index++;
 8003bf2:	1ca1      	adds	r1, r4, #2
			switch (SelectParam) {
 8003bf4:	5cab      	ldrb	r3, [r5, r2]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d84f      	bhi.n	8003c9a <VL53L0X_load_tuning_settings+0xc2>
 8003bfa:	e8df f003 	tbb	[pc, r3]
 8003bfe:	0e02      	.short	0x0e02
 8003c00:	2017      	.short	0x2017
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
 8003c02:	192b      	adds	r3, r5, r4
 8003c04:	78db      	ldrb	r3, [r3, #3]
				Index++;
 8003c06:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003c08:	5c6a      	ldrb	r2, [r5, r1]
 8003c0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8003c0e:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8003c12:	5d2b      	ldrb	r3, [r5, r4]
 8003c14:	bbab      	cbnz	r3, 8003c82 <VL53L0X_load_tuning_settings+0xaa>
 8003c16:	2000      	movs	r0, #0
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c18:	e03a      	b.n	8003c90 <VL53L0X_load_tuning_settings+0xb8>
				lsb = *(pTuningSettingBuffer + Index);
 8003c1a:	192b      	adds	r3, r5, r4
 8003c1c:	78db      	ldrb	r3, [r3, #3]
				Index++;
 8003c1e:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003c20:	5c6a      	ldrb	r2, [r5, r1]
 8003c22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8003c26:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 8003c2a:	e7f2      	b.n	8003c12 <VL53L0X_load_tuning_settings+0x3a>
				lsb = *(pTuningSettingBuffer + Index);
 8003c2c:	192b      	adds	r3, r5, r4
 8003c2e:	78db      	ldrb	r3, [r3, #3]
				Index++;
 8003c30:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003c32:	5c6a      	ldrb	r2, [r5, r1]
 8003c34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8003c38:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 8003c3c:	e7e9      	b.n	8003c12 <VL53L0X_load_tuning_settings+0x3a>
				lsb = *(pTuningSettingBuffer + Index);
 8003c3e:	192b      	adds	r3, r5, r4
 8003c40:	78db      	ldrb	r3, [r3, #3]
				Index++;
 8003c42:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003c44:	5c6a      	ldrb	r2, [r5, r1]
 8003c46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8003c4a:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
				break;
 8003c4e:	e7e0      	b.n	8003c12 <VL53L0X_load_tuning_settings+0x3a>
			Address = *(pTuningSettingBuffer + Index);
 8003c50:	5ca9      	ldrb	r1, [r5, r2]
			Index++;
 8003c52:	f104 0e02 	add.w	lr, r4, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8003c56:	b1f3      	cbz	r3, 8003c96 <VL53L0X_load_tuning_settings+0xbe>
 8003c58:	1c62      	adds	r2, r4, #1
 8003c5a:	442a      	add	r2, r5
 8003c5c:	a801      	add	r0, sp, #4
 8003c5e:	4699      	mov	r9, r3
 8003c60:	443c      	add	r4, r7
 8003c62:	441c      	add	r4, r3
				localBuffer[i] = *(pTuningSettingBuffer +
 8003c64:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8003c68:	f800 cb01 	strb.w	ip, [r0], #1
			for (i = 0; i < NumberOfWrites; i++) {
 8003c6c:	42a2      	cmp	r2, r4
 8003c6e:	d1f9      	bne.n	8003c64 <VL53L0X_load_tuning_settings+0x8c>
 8003c70:	eb0e 0409 	add.w	r4, lr, r9
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8003c74:	aa01      	add	r2, sp, #4
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 fb9e 	bl	80043b8 <VL53L0X_WriteMulti>
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8003c7c:	5d2b      	ldrb	r3, [r5, r4]
 8003c7e:	b13b      	cbz	r3, 8003c90 <VL53L0X_load_tuning_settings+0xb8>
 8003c80:	b930      	cbnz	r0, 8003c90 <VL53L0X_load_tuning_settings+0xb8>
		Index++;
 8003c82:	1c62      	adds	r2, r4, #1
		if (NumberOfWrites == 0xFF) {
 8003c84:	2bff      	cmp	r3, #255	; 0xff
 8003c86:	d0b4      	beq.n	8003bf2 <VL53L0X_load_tuning_settings+0x1a>
		} else if (NumberOfWrites <= 4) {
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d9e1      	bls.n	8003c50 <VL53L0X_load_tuning_settings+0x78>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003c8c:	f06f 0003 	mvn.w	r0, #3
}
 8003c90:	b003      	add	sp, #12
 8003c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			Index++;
 8003c96:	4674      	mov	r4, lr
 8003c98:	e7ec      	b.n	8003c74 <VL53L0X_load_tuning_settings+0x9c>
			switch (SelectParam) {
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	e7ed      	b.n	8003c7c <VL53L0X_load_tuning_settings+0xa4>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ca0:	2000      	movs	r0, #0
}
 8003ca2:	4770      	bx	lr

08003ca4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	4605      	mov	r5, r0
 8003caa:	460e      	mov	r6, r1
 8003cac:	4614      	mov	r4, r2

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8003cb2:	f10d 0107 	add.w	r1, sp, #7
 8003cb6:	f7fd ff62 	bl	8001b7e <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8003cba:	b948      	cbnz	r0, 8003cd0 <VL53L0X_get_total_xtalk_rate+0x2c>

		if (xtalkCompEnable) {
 8003cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003cc0:	b133      	cbz	r3, 8003cd0 <VL53L0X_get_total_xtalk_rate+0x2c>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8003cc2:	8ab3      	ldrh	r3, [r6, #20]
			totalXtalkMegaCps =
 8003cc4:	6a2a      	ldr	r2, [r5, #32]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8003cca:	3380      	adds	r3, #128	; 0x80
 8003ccc:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8003cce:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	4614      	mov	r4, r2
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8003cda:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8003cdc:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8003cde:	aa01      	add	r2, sp, #4
 8003ce0:	f7ff ffe0 	bl	8003ca4 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8003ce4:	b918      	cbnz	r0, 8003cee <VL53L0X_get_total_signal_rate+0x1a>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	9a01      	ldr	r2, [sp, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	6023      	str	r3, [r4, #0]

	return Status;
}
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd10      	pop	{r4, pc}
	...

08003cf4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	9e07      	ldr	r6, [sp, #28]
 8003cf8:	9f08      	ldr	r7, [sp, #32]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8003cfa:	f8b0 5150 	ldrh.w	r5, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8003cfe:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
 8003d02:	fb05 f404 	mul.w	r4, r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8003d06:	3480      	adds	r4, #128	; 0x80
 8003d08:	0a24      	lsrs	r4, r4, #8
	SignalAt0mm *= dmaxCalRange_mm;
 8003d0a:	fb04 f505 	mul.w	r5, r4, r5

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8003d0e:	4614      	mov	r4, r2
 8003d10:	b15a      	cbz	r2, 8003d2a <VL53L0X_calc_dmax+0x36>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8003d12:	0289      	lsls	r1, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8003d14:	eb01 0152 	add.w	r1, r1, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8003d18:	fbb1 f1f2 	udiv	r1, r1, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8003d1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8003d20:	fb01 f101 	mul.w	r1, r1, r1

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8003d24:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8003d28:	0c0c      	lsrs	r4, r1, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8003d2a:	9a06      	ldr	r2, [sp, #24]
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8003d30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003d34:	0c1b      	lsrs	r3, r3, #16

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8003d36:	fb03 f303 	mul.w	r3, r3, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8003d3a:	f506 4200 	add.w	r2, r6, #32768	; 0x8000
 8003d3e:	0c12      	lsrs	r2, r2, #16
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8003d40:	3203      	adds	r2, #3
 8003d42:	4925      	ldr	r1, [pc, #148]	; (8003dd8 <VL53L0X_calc_dmax+0xe4>)
 8003d44:	fba1 1202 	umull	r1, r2, r1, r2
 8003d48:	0892      	lsrs	r2, r2, #2
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8003d4a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 8003d4e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d52:	d23c      	bcs.n	8003dce <VL53L0X_calc_dmax+0xda>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8003d54:	1cf2      	adds	r2, r6, #3
 8003d56:	4920      	ldr	r1, [pc, #128]	; (8003dd8 <VL53L0X_calc_dmax+0xe4>)
 8003d58:	fba1 1202 	umull	r1, r2, r1, r2
 8003d5c:	0892      	lsrs	r2, r2, #2
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8003d5e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8003d62:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003d66:	0c12      	lsrs	r2, r2, #16

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8003d68:	fb02 f202 	mul.w	r2, r2, r2

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8003d6c:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 8003d70:	4413      	add	r3, r2
	minSignalNeeded /= peakVcselDuration_us;
 8003d72:	fbb3 f3f7 	udiv	r3, r3, r7

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8003d76:	039b      	lsls	r3, r3, #14

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8003d78:	337f      	adds	r3, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <VL53L0X_calc_dmax+0xe8>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	099b      	lsrs	r3, r3, #6

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8003d84:	fb03 f404 	mul.w	r4, r3, r4
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003d88:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <VL53L0X_calc_dmax+0xec>)
 8003d8e:	fba3 3404 	umull	r3, r4, r3, r4
 8003d92:	09a4      	lsrs	r4, r4, #6
	minSignalNeeded <<= 4;
 8003d94:	0124      	lsls	r4, r4, #4

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003d96:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8003d9a:	f105 0020 	add.w	r0, r5, #32
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8003d9e:	0980      	lsrs	r0, r0, #6
 8003da0:	f7ff f829 	bl	8002df6 <VL53L0X_isqrt>
 8003da4:	4606      	mov	r6, r0

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8003da6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8003daa:	d312      	bcc.n	8003dd2 <VL53L0X_calc_dmax+0xde>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <VL53L0X_calc_dmax+0xec>)
 8003dae:	fba3 3404 	umull	r3, r4, r3, r4
 8003db2:	eb05 10d4 	add.w	r0, r5, r4, lsr #7
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003db6:	09a4      	lsrs	r4, r4, #6
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8003db8:	fbb0 f0f4 	udiv	r0, r0, r4
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8003dbc:	f7ff f81b 	bl	8002df6 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
 8003dc0:	4286      	cmp	r6, r0
 8003dc2:	bf28      	it	cs
 8003dc4:	4606      	movcs	r6, r0
 8003dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc8:	601e      	str	r6, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003dca:	2000      	movs	r0, #0
 8003dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		minSignalNeeded_p3 = 0xfff00000;
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <VL53L0X_calc_dmax+0xf0>)
 8003dd0:	e7cc      	b.n	8003d6c <VL53L0X_calc_dmax+0x78>
		dmaxAmbient = 0;
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e7f2      	b.n	8003dbc <VL53L0X_calc_dmax+0xc8>
 8003dd6:	bf00      	nop
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab
 8003ddc:	81020409 	.word	0x81020409
 8003de0:	10624dd3 	.word	0x10624dd3
 8003de4:	fff00000 	.word	0xfff00000

08003de8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	b08f      	sub	sp, #60	; 0x3c
 8003dee:	4604      	mov	r4, r0
 8003df0:	460d      	mov	r5, r1
 8003df2:	9205      	str	r2, [sp, #20]
 8003df4:	469b      	mov	fp, r3
 8003df6:	9307      	str	r3, [sp, #28]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8003df8:	6a03      	ldr	r3, [r0, #32]
 8003dfa:	930d      	str	r3, [sp, #52]	; 0x34
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8003dfc:	f8d1 8010 	ldr.w	r8, [r1, #16]

	correctedSignalRate_mcps =
 8003e00:	68ce      	ldr	r6, [r1, #12]
 8003e02:	9606      	str	r6, [sp, #24]
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8003e04:	aa0c      	add	r2, sp, #48	; 0x30
 8003e06:	f7ff ff65 	bl	8003cd4 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8003e0a:	aa0d      	add	r2, sp, #52	; 0x34
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff ff48 	bl	8003ca4 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8003e14:	bb38      	cbnz	r0, 8003e66 <VL53L0X_calc_sigma_estimate+0x7e>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003e16:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
 8003e1a:	910a      	str	r1, [sp, #40]	; 0x28
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003e1c:	f894 70e0 	ldrb.w	r7, [r4, #224]	; 0xe0

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003e20:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003e24:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
			vcselWidth = 2;
 8003e28:	2f08      	cmp	r7, #8
 8003e2a:	bf14      	ite	ne
 8003e2c:	f04f 0903 	movne.w	r9, #3
 8003e30:	f04f 0902 	moveq.w	r9, #2
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8003e34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3a:	fb06 f303 	mul.w	r3, r6, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8003e3e:	f503 4a00 	add.w	sl, r3, #32768	; 0x8000
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8003e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8003e44:	3680      	adds	r6, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8003e46:	f026 01ff 	bic.w	r1, r6, #255	; 0xff
 8003e4a:	9108      	str	r1, [sp, #32]
 8003e4c:	910c      	str	r1, [sp, #48]	; 0x30
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 8003e4e:	ea5f 411a 	movs.w	r1, sl, lsr #16
 8003e52:	9109      	str	r1, [sp, #36]	; 0x24
 8003e54:	d10a      	bne.n	8003e6c <VL53L0X_calc_sigma_estimate+0x84>
		*pSigmaEstimate = cSigmaEstMax;
 8003e56:	4b62      	ldr	r3, [pc, #392]	; (8003fe0 <VL53L0X_calc_sigma_estimate+0x1f8>)
 8003e58:	9a05      	ldr	r2, [sp, #20]
 8003e5a:	6013      	str	r3, [r2, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8003e5c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		*pDmax_mm = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8cb 3000 	str.w	r3, [fp]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003e66:	b00f      	add	sp, #60	; 0x3c
 8003e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8003e6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e70:	fb01 fb03 	mul.w	fp, r1, r3
 8003e74:	f5bb 1f48 	cmp.w	fp, #3276800	; 0x320000
 8003e78:	bf28      	it	cs
 8003e7a:	f44f 1b48 	movcs.w	fp, #3276800	; 0x320000
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003e7e:	4661      	mov	r1, ip
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff fad7 	bl	8003434 <VL53L0X_calc_timeout_mclks>
 8003e86:	900b      	str	r0, [sp, #44]	; 0x2c
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003e88:	463a      	mov	r2, r7
 8003e8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fad1 	bl	8003434 <VL53L0X_calc_timeout_mclks>
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8003e92:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003e94:	4407      	add	r7, r0
		peakVcselDuration_us = vcselWidth * 2048 *
 8003e96:	fb09 f707 	mul.w	r7, r9, r7
 8003e9a:	02ff      	lsls	r7, r7, #11
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8003e9c:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8003ea0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8003ffc <VL53L0X_calc_sigma_estimate+0x214>
 8003ea4:	fba9 3707 	umull	r3, r7, r9, r7
 8003ea8:	09bf      	lsrs	r7, r7, #6
		peakVcselDuration_us *= cPllPeriod_ps;
 8003eaa:	f240 6377 	movw	r3, #1655	; 0x677
 8003eae:	fb03 f707 	mul.w	r7, r3, r7
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8003eb2:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8003eb6:	fba9 3707 	umull	r3, r7, r9, r7
 8003eba:	09bf      	lsrs	r7, r7, #6
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8003ebc:	0a30      	lsrs	r0, r6, #8
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8003ebe:	fb07 f000 	mul.w	r0, r7, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8003ec2:	3080      	adds	r0, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8003ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ec8:	fb01 f608 	mul.w	r6, r1, r8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8003ecc:	0c36      	lsrs	r6, r6, #16
 8003ece:	0436      	lsls	r6, r6, #16
 8003ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed2:	fbb6 f6f3 	udiv	r6, r6, r3
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <VL53L0X_calc_sigma_estimate+0x1fc>)
 8003ed8:	429e      	cmp	r6, r3
 8003eda:	bf28      	it	cs
 8003edc:	461e      	movcs	r6, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8003ede:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003ee2:	fb03 f606 	mul.w	r6, r3, r6
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8003ee6:	0a00      	lsrs	r0, r0, #8
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003ee8:	2801      	cmp	r0, #1
 8003eea:	bf38      	it	cc
 8003eec:	2001      	movcc	r0, #1
 8003eee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003ef2:	0080      	lsls	r0, r0, #2
 8003ef4:	f7fe ff7f 	bl	8002df6 <VL53L0X_isqrt>
 8003ef8:	4680      	mov	r8, r0
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8003efa:	ea4f 411a 	mov.w	r1, sl, lsr #16
 8003efe:	0409      	lsls	r1, r1, #16
 8003f00:	eba1 030b 	sub.w	r3, r1, fp
			xTalkCompRate_kcps) + 500)/1000;
 8003f04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8003f08:	fba9 2303 	umull	r2, r3, r9, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
		diff1_mcps <<= 8;
 8003f0e:	021b      	lsls	r3, r3, #8
			xTalkCompRate_kcps) + 500)/1000;
 8003f10:	f50b 72fa 	add.w	r2, fp, #500	; 0x1f4
 8003f14:	440a      	add	r2, r1
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8003f16:	fba9 9202 	umull	r9, r2, r9, r2
 8003f1a:	0992      	lsrs	r2, r2, #6
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8003f1c:	fbb3 f3f2 	udiv	r3, r3, r2
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8003f20:	892a      	ldrh	r2, [r5, #8]
 8003f22:	4931      	ldr	r1, [pc, #196]	; (8003fe8 <VL53L0X_calc_sigma_estimate+0x200>)
 8003f24:	fb01 f202 	mul.w	r2, r1, r2
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8003f28:	4930      	ldr	r1, [pc, #192]	; (8003fec <VL53L0X_calc_sigma_estimate+0x204>)
 8003f2a:	fba1 1202 	umull	r1, r2, r1, r2
 8003f2e:	0a92      	lsrs	r2, r2, #10
		xTalkCorrection <<= 8;
 8003f30:	021d      	lsls	r5, r3, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8003f32:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
 8003f36:	fb02 f505 	mul.w	r5, r2, r5
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8003f3a:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8003f3e:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 8003f40:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8003f44:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8003f46:	fb05 f505 	mul.w	r5, r5, r5
		pwMult >>= 14;
 8003f4a:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8003f4c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003f50:	fb05 f000 	mul.w	r0, r5, r0
		sqr1 = (sqr1 + 0x8000) >> 16;
 8003f54:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8003f58:	0c00      	lsrs	r0, r0, #16
		sqr2 = (sqr2 + 0x8000) >> 16;
 8003f5a:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8003f5e:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8003f60:	fb03 f303 	mul.w	r3, r3, r3
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8003f64:	fb00 3000 	mla	r0, r0, r0, r3
 8003f68:	f7fe ff45 	bl	8002df6 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 8003f6c:	0403      	lsls	r3, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <VL53L0X_calc_sigma_estimate+0x208>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003f78:	ea4f 0848 	mov.w	r8, r8, lsl #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8003f7c:	fbb3 f3f8 	udiv	r3, r3, r8
		sigmaEstRtn		 += 5000;
 8003f80:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8003f84:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f88:	fb02 0003 	mla	r0, r2, r3, r0
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <VL53L0X_calc_sigma_estimate+0x20c>)
 8003f8e:	4298      	cmp	r0, r3
		sigmaEstRtn		 /= 10000;
 8003f90:	bf9d      	ittte	ls
 8003f92:	4b19      	ldrls	r3, [pc, #100]	; (8003ff8 <VL53L0X_calc_sigma_estimate+0x210>)
 8003f94:	fba3 3000 	umullls	r3, r0, r3, r0
 8003f98:	0b40      	lsrls	r0, r0, #13
			sigmaEstRtn = cSigmaEstRtnMax;
 8003f9a:	f44f 4070 	movhi.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8003f9e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003fa2:	fb00 3000 	mla	r0, r0, r0, r3
 8003fa6:	f7fe ff26 	bl	8002df6 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 8003faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fae:	fb03 f000 	mul.w	r0, r3, r0
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <VL53L0X_calc_sigma_estimate+0x1f8>)
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	bf28      	it	cs
 8003fb8:	4618      	movcs	r0, r3
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8003fba:	9b05      	ldr	r3, [sp, #20]
 8003fbc:	6018      	str	r0, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8003fbe:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8003fc2:	9b07      	ldr	r3, [sp, #28]
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	9702      	str	r7, [sp, #8]
 8003fc8:	9601      	str	r6, [sp, #4]
 8003fca:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	9a06      	ldr	r2, [sp, #24]
 8003fd4:	9908      	ldr	r1, [sp, #32]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7ff fe8c 	bl	8003cf4 <VL53L0X_calc_dmax>
 8003fdc:	e743      	b.n	8003e66 <VL53L0X_calc_sigma_estimate+0x7e>
 8003fde:	bf00      	nop
 8003fe0:	028f87ae 	.word	0x028f87ae
 8003fe4:	00666666 	.word	0x00666666
 8003fe8:	0006999a 	.word	0x0006999a
 8003fec:	37c67b51 	.word	0x37c67b51
 8003ff0:	51eb851f 	.word	0x51eb851f
 8003ff4:	249f270f 	.word	0x249f270f
 8003ff8:	d1b71759 	.word	0xd1b71759
 8003ffc:	10624dd3 	.word	0x10624dd3

08004000 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	b089      	sub	sp, #36	; 0x24
 8004006:	4604      	mov	r4, r0
 8004008:	4690      	mov	r8, r2
 800400a:	469a      	mov	sl, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	f88d 301f 	strb.w	r3, [sp, #31]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8004012:	f88d 301e 	strb.w	r3, [sp, #30]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8004016:	f88d 301d 	strb.w	r3, [sp, #29]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800401a:	f88d 301c 	strb.w	r3, [sp, #28]
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
 800401e:	f8ad 300a 	strh.w	r3, [sp, #10]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8004022:	9301      	str	r3, [sp, #4]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8004024:	f3c1 0bc3 	ubfx	fp, r1, #3, #4

	if (DeviceRangeStatusInternal == 0 ||
 8004028:	f011 0f78 	tst.w	r1, #120	; 0x78
 800402c:	bf1d      	ittte	ne
 800402e:	f24f 09a0 	movwne	r9, #61600	; 0xf0a0
 8004032:	fa29 f90b 	lsrne.w	r9, r9, fp
 8004036:	f009 0901 	andne.w	r9, r9, #1
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800403a:	f04f 0901 	moveq.w	r9, #1
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800403e:	2201      	movs	r2, #1
 8004040:	21ff      	movs	r1, #255	; 0xff
 8004042:	f000 fa3d 	bl	80044c0 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8004046:	4603      	mov	r3, r0
 8004048:	2800      	cmp	r0, #0
 800404a:	d03e      	beq.n	80040ca <VL53L0X_get_pal_range_status+0xca>
		Status = VL53L0X_RdWord(Dev,
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800404c:	f8bd 500a 	ldrh.w	r5, [sp, #10]
 8004050:	026d      	lsls	r5, r5, #9

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8004052:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8004056:	f89d 701f 	ldrb.w	r7, [sp, #31]
 800405a:	2f00      	cmp	r7, #0
 800405c:	d06f      	beq.n	800413e <VL53L0X_get_pal_range_status+0x13e>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d052      	beq.n	8004108 <VL53L0X_get_pal_range_status+0x108>
	uint8_t SigmaLimitflag = 0;
 8004062:	2700      	movs	r7, #0
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8004064:	f89d 601d 	ldrb.w	r6, [sp, #29]
 8004068:	2e00      	cmp	r6, #0
 800406a:	d07e      	beq.n	800416a <VL53L0X_get_pal_range_status+0x16a>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d070      	beq.n	8004152 <VL53L0X_get_pal_range_status+0x152>
	uint8_t SignalRefClipflag = 0;
 8004070:	2600      	movs	r6, #0
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8004072:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8004076:	2d00      	cmp	r5, #0
 8004078:	f000 809c 	beq.w	80041b4 <VL53L0X_get_pal_range_status+0x1b4>
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8098 	bne.w	80041b2 <VL53L0X_get_pal_range_status+0x1b2>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8004082:	f1ba 0f00 	cmp.w	sl, #0
 8004086:	d07f      	beq.n	8004188 <VL53L0X_get_pal_range_status+0x188>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8004088:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800408c:	fbb8 f8fa 	udiv	r8, r8, sl
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004090:	aa03      	add	r2, sp, #12
 8004092:	2103      	movs	r1, #3
 8004094:	4620      	mov	r0, r4
 8004096:	f7fd fe11 	bl	8001cbc <VL53L0X_GetLimitCheckValue>
 800409a:	4603      	mov	r3, r0
	uint8_t RangeIgnoreThresholdflag = 0;
 800409c:	9d03      	ldr	r5, [sp, #12]
 800409e:	4545      	cmp	r5, r8
 80040a0:	bf94      	ite	ls
 80040a2:	2500      	movls	r5, #0
 80040a4:	2501      	movhi	r5, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 8084 	bne.w	80041b4 <VL53L0X_get_pal_range_status+0x1b4>
		if (NoneFlag == 1) {
 80040ac:	f1b9 0f00 	cmp.w	r9, #0
 80040b0:	f040 80bc 	bne.w	800422c <VL53L0X_get_pal_range_status+0x22c>
			*pPalRangeStatus = 255;	 /* NONE */
		} else if (DeviceRangeStatusInternal == 1 ||
 80040b4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d86c      	bhi.n	8004196 <VL53L0X_get_pal_range_status+0x196>
 80040bc:	e8df f003 	tbb	[pc, r3]
 80040c0:	6b676767 	.word	0x6b676767
 80040c4:	ba6b696b 	.word	0xba6b696b
 80040c8:	ba69      	.short	0xba69
		Status = VL53L0X_RdWord(Dev,
 80040ca:	f10d 020a 	add.w	r2, sp, #10
 80040ce:	21b6      	movs	r1, #182	; 0xb6
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 f9ab 	bl	800442c <VL53L0X_RdWord>
	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80040d6:	f8bd 500a 	ldrh.w	r5, [sp, #10]
 80040da:	026d      	lsls	r5, r5, #9
	if (Status == VL53L0X_ERROR_NONE)
 80040dc:	4603      	mov	r3, r0
 80040de:	2800      	cmp	r0, #0
 80040e0:	d1b7      	bne.n	8004052 <VL53L0X_get_pal_range_status+0x52>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80040e2:	2200      	movs	r2, #0
 80040e4:	21ff      	movs	r1, #255	; 0xff
 80040e6:	4620      	mov	r0, r4
 80040e8:	f000 f9ea 	bl	80044c0 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80040ec:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
	if (Status == VL53L0X_ERROR_NONE)
 80040f0:	4603      	mov	r3, r0
 80040f2:	2800      	cmp	r0, #0
 80040f4:	f040 80a8 	bne.w	8004248 <VL53L0X_get_pal_range_status+0x248>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80040f8:	f10d 021f 	add.w	r2, sp, #31
 80040fc:	2100      	movs	r1, #0
 80040fe:	4620      	mov	r0, r4
 8004100:	f7fd fda1 	bl	8001c46 <VL53L0X_GetLimitCheckEnable>
 8004104:	4603      	mov	r3, r0
 8004106:	e7a6      	b.n	8004056 <VL53L0X_get_pal_range_status+0x56>
		Status = VL53L0X_calc_sigma_estimate(
 8004108:	ab01      	add	r3, sp, #4
 800410a:	aa06      	add	r2, sp, #24
 800410c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800410e:	4620      	mov	r0, r4
 8004110:	f7ff fe6a 	bl	8003de8 <VL53L0X_calc_sigma_estimate>
		if (Status == VL53L0X_ERROR_NONE)
 8004114:	4603      	mov	r3, r0
 8004116:	2800      	cmp	r0, #0
 8004118:	d1a3      	bne.n	8004062 <VL53L0X_get_pal_range_status+0x62>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800411a:	9b01      	ldr	r3, [sp, #4]
 800411c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800411e:	8153      	strh	r3, [r2, #10]
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8004120:	aa05      	add	r2, sp, #20
 8004122:	2100      	movs	r1, #0
 8004124:	4620      	mov	r0, r4
 8004126:	f7fd fdc9 	bl	8001cbc <VL53L0X_GetLimitCheckValue>
 800412a:	4603      	mov	r3, r0
			if ((SigmaLimitValue > 0) &&
 800412c:	9f05      	ldr	r7, [sp, #20]
 800412e:	b12f      	cbz	r7, 800413c <VL53L0X_get_pal_range_status+0x13c>
	uint8_t SigmaLimitflag = 0;
 8004130:	9a06      	ldr	r2, [sp, #24]
 8004132:	4297      	cmp	r7, r2
 8004134:	bf2c      	ite	cs
 8004136:	2700      	movcs	r7, #0
 8004138:	2701      	movcc	r7, #1
 800413a:	e000      	b.n	800413e <VL53L0X_get_pal_range_status+0x13e>
 800413c:	2700      	movs	r7, #0
	if (Status == VL53L0X_ERROR_NONE)
 800413e:	2b00      	cmp	r3, #0
 8004140:	d190      	bne.n	8004064 <VL53L0X_get_pal_range_status+0x64>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004142:	f10d 021d 	add.w	r2, sp, #29
 8004146:	2102      	movs	r1, #2
 8004148:	4620      	mov	r0, r4
 800414a:	f7fd fd7c 	bl	8001c46 <VL53L0X_GetLimitCheckEnable>
 800414e:	4603      	mov	r3, r0
 8004150:	e788      	b.n	8004064 <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004152:	aa04      	add	r2, sp, #16
 8004154:	2102      	movs	r1, #2
 8004156:	4620      	mov	r0, r4
 8004158:	f7fd fdb0 	bl	8001cbc <VL53L0X_GetLimitCheckValue>
 800415c:	4603      	mov	r3, r0
		if ((SignalRefClipValue > 0) &&
 800415e:	9e04      	ldr	r6, [sp, #16]
 8004160:	b186      	cbz	r6, 8004184 <VL53L0X_get_pal_range_status+0x184>
	uint8_t SignalRefClipflag = 0;
 8004162:	42ae      	cmp	r6, r5
 8004164:	bf2c      	ite	cs
 8004166:	2600      	movcs	r6, #0
 8004168:	2601      	movcc	r6, #1
	if (Status == VL53L0X_ERROR_NONE)
 800416a:	2b00      	cmp	r3, #0
 800416c:	d181      	bne.n	8004072 <VL53L0X_get_pal_range_status+0x72>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800416e:	aa07      	add	r2, sp, #28
 8004170:	2103      	movs	r1, #3
 8004172:	4620      	mov	r0, r4
 8004174:	f7fd fd67 	bl	8001c46 <VL53L0X_GetLimitCheckEnable>
 8004178:	4603      	mov	r3, r0
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800417a:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800417e:	2d00      	cmp	r5, #0
 8004180:	d091      	beq.n	80040a6 <VL53L0X_get_pal_range_status+0xa6>
 8004182:	e77b      	b.n	800407c <VL53L0X_get_pal_range_status+0x7c>
	uint8_t SignalRefClipflag = 0;
 8004184:	2600      	movs	r6, #0
 8004186:	e7f0      	b.n	800416a <VL53L0X_get_pal_range_status+0x16a>
			SignalRatePerSpad = 0;
 8004188:	f04f 0800 	mov.w	r8, #0
 800418c:	e780      	b.n	8004090 <VL53L0X_get_pal_range_status+0x90>
		if (NoneFlag == 1) {
 800418e:	2305      	movs	r3, #5
 8004190:	e04d      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
					DeviceRangeStatusInternal == 2 ||
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
		} else if (DeviceRangeStatusInternal == 6 ||
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8004192:	2304      	movs	r3, #4
 8004194:	e04b      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
		} else if (DeviceRangeStatusInternal == 8 ||
					DeviceRangeStatusInternal == 10 ||
 8004196:	2e01      	cmp	r6, #1
 8004198:	d04e      	beq.n	8004238 <VL53L0X_get_pal_range_status+0x238>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
 800419a:	f1bb 0f04 	cmp.w	fp, #4
 800419e:	d04d      	beq.n	800423c <VL53L0X_get_pal_range_status+0x23c>
 80041a0:	2d01      	cmp	r5, #1
 80041a2:	d04d      	beq.n	8004240 <VL53L0X_get_pal_range_status+0x240>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
 80041a4:	2f01      	cmp	r7, #1
 80041a6:	d04d      	beq.n	8004244 <VL53L0X_get_pal_range_status+0x244>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80041a8:	2300      	movs	r3, #0
 80041aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80041ac:	7013      	strb	r3, [r2, #0]
 80041ae:	463d      	mov	r5, r7
 80041b0:	e003      	b.n	80041ba <VL53L0X_get_pal_range_status+0x1ba>
	uint8_t RangeIgnoreThresholdflag = 0;
 80041b2:	2500      	movs	r5, #0
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80041b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b913      	cbnz	r3, 80041c0 <VL53L0X_get_pal_range_status+0x1c0>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041be:	8153      	strh	r3, [r2, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80041c0:	f10d 021e 	add.w	r2, sp, #30
 80041c4:	2101      	movs	r1, #1
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7fd fd3d 	bl	8001c46 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80041cc:	bb28      	cbnz	r0, 800421a <VL53L0X_get_pal_range_status+0x21a>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80041ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80041d2:	b32b      	cbz	r3, 8004220 <VL53L0X_get_pal_range_status+0x220>
			Temp8 = 1;
 80041d4:	2f01      	cmp	r7, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2700      	movne	r7, #0
 80041da:	2701      	moveq	r7, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80041dc:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80041e0:	f1bb 0f04 	cmp.w	fp, #4
 80041e4:	bf1d      	ittte	ne
 80041e6:	f89d 301e 	ldrbne.w	r3, [sp, #30]
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
 80041ea:	fab3 f383 	clzne	r3, r3
 80041ee:	095b      	lsrne	r3, r3, #5
 80041f0:	2301      	moveq	r3, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80041f2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80041f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80041fa:	b19b      	cbz	r3, 8004224 <VL53L0X_get_pal_range_status+0x224>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80041fc:	2e01      	cmp	r6, #1
 80041fe:	bf14      	ite	ne
 8004200:	2600      	movne	r6, #0
 8004202:	2601      	moveq	r6, #1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004204:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8004208:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800420c:	b163      	cbz	r3, 8004228 <VL53L0X_get_pal_range_status+0x228>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800420e:	2d01      	cmp	r5, #1
 8004210:	bf14      	ite	ne
 8004212:	2500      	movne	r5, #0
 8004214:	2501      	moveq	r5, #1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004216:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 800421a:	b009      	add	sp, #36	; 0x24
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Temp8 = 1;
 8004220:	2701      	movs	r7, #1
 8004222:	e7db      	b.n	80041dc <VL53L0X_get_pal_range_status+0x1dc>
			Temp8 = 1;
 8004224:	2601      	movs	r6, #1
 8004226:	e7ed      	b.n	8004204 <VL53L0X_get_pal_range_status+0x204>
			Temp8 = 1;
 8004228:	2501      	movs	r5, #1
 800422a:	e7f4      	b.n	8004216 <VL53L0X_get_pal_range_status+0x216>
 800422c:	23ff      	movs	r3, #255	; 0xff
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800422e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004230:	7013      	strb	r3, [r2, #0]
	if (*pPalRangeStatus == 0)
 8004232:	e7c5      	b.n	80041c0 <VL53L0X_get_pal_range_status+0x1c0>
		if (NoneFlag == 1) {
 8004234:	2303      	movs	r3, #3
 8004236:	e7fa      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
 8004238:	2303      	movs	r3, #3
 800423a:	e7f8      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
 800423c:	2302      	movs	r3, #2
 800423e:	e7f6      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
 8004240:	2302      	movs	r3, #2
 8004242:	e7f4      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
 8004244:	463b      	mov	r3, r7
 8004246:	e7f2      	b.n	800422e <VL53L0X_get_pal_range_status+0x22e>
	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8004248:	f89d 701f 	ldrb.w	r7, [sp, #31]
 800424c:	2f00      	cmp	r7, #0
 800424e:	f47f af08 	bne.w	8004062 <VL53L0X_get_pal_range_status+0x62>
 8004252:	e774      	b.n	800413e <VL53L0X_get_pal_range_status+0x13e>

08004254 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	4604      	mov	r4, r0
 8004258:	460f      	mov	r7, r1
 800425a:	4615      	mov	r5, r2
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800425c:	2102      	movs	r1, #2
 800425e:	f7fe fe10 	bl	8002e82 <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8004262:	4606      	mov	r6, r0
 8004264:	b928      	cbnz	r0, 8004272 <VL53L0X_check_part_used+0x1e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8004266:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 800426a:	b923      	cbnz	r3, 8004276 <VL53L0X_check_part_used+0x22>
		*Revision = 0;
 800426c:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800426e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004272:	4630      	mov	r0, r6
 8004274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8004276:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
 800427a:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800427c:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
 8004280:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8004284:	f004 faaf 	bl	80087e6 <strcpy>
 8004288:	e7f3      	b.n	8004272 <VL53L0X_check_part_used+0x1e>
	...

0800428c <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	4605      	mov	r5, r0
 8004292:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8004294:	460a      	mov	r2, r1
 8004296:	f10d 0106 	add.w	r1, sp, #6
 800429a:	f7ff ffdb 	bl	8004254 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 800429e:	4603      	mov	r3, r0
 80042a0:	bb60      	cbnz	r0, 80042fc <VL53L0X_get_device_info+0x70>
		if (Revision == 0) {
 80042a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042a6:	b14b      	cbz	r3, 80042bc <VL53L0X_get_device_info+0x30>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 80042a8:	2b22      	cmp	r3, #34	; 0x22
 80042aa:	d830      	bhi.n	800430e <VL53L0X_get_device_info+0x82>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d128      	bne.n	8004302 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <VL53L0X_get_device_info+0x9c>)
 80042b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042b4:	6020      	str	r0, [r4, #0]
 80042b6:	6061      	str	r1, [r4, #4]
 80042b8:	60a2      	str	r2, [r4, #8]
 80042ba:	e004      	b.n	80042c6 <VL53L0X_get_device_info+0x3a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <VL53L0X_get_device_info+0xa0>)
 80042be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042c0:	6020      	str	r0, [r4, #0]
 80042c2:	6061      	str	r1, [r4, #4]
 80042c4:	60a2      	str	r2, [r4, #8]
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <VL53L0X_get_device_info+0xa4>)
 80042c8:	cb03      	ldmia	r3!, {r0, r1}
 80042ca:	6220      	str	r0, [r4, #32]
 80042cc:	6261      	str	r1, [r4, #36]	; 0x24
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 80042ce:	f104 0260 	add.w	r2, r4, #96	; 0x60
 80042d2:	21c0      	movs	r1, #192	; 0xc0
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 f853 	bl	8004380 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042da:	4603      	mov	r3, r0
 80042dc:	b970      	cbnz	r0, 80042fc <VL53L0X_get_device_info+0x70>
		Status = VL53L0X_RdByte(Dev,
 80042de:	f10d 0207 	add.w	r2, sp, #7
 80042e2:	21c2      	movs	r1, #194	; 0xc2
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f84b 	bl	8004380 <VL53L0X_RdByte>
 80042ea:	4603      	mov	r3, r0
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80042ec:	2201      	movs	r2, #1
 80042ee:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 80042f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80042f6:	0912      	lsrs	r2, r2, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80042f8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	}

	return Status;
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	b002      	add	sp, #8
 8004300:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <VL53L0X_get_device_info+0xa8>)
 8004304:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004306:	6020      	str	r0, [r4, #0]
 8004308:	6061      	str	r1, [r4, #4]
 800430a:	60a2      	str	r2, [r4, #8]
 800430c:	e7db      	b.n	80042c6 <VL53L0X_get_device_info+0x3a>
		} else if (Revision < 39) {
 800430e:	2b26      	cmp	r3, #38	; 0x26
 8004310:	d9ce      	bls.n	80042b0 <VL53L0X_get_device_info+0x24>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8004312:	4e09      	ldr	r6, [pc, #36]	; (8004338 <VL53L0X_get_device_info+0xac>)
 8004314:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	6061      	str	r1, [r4, #4]
 800431a:	60a2      	str	r2, [r4, #8]
 800431c:	60e3      	str	r3, [r4, #12]
 800431e:	6830      	ldr	r0, [r6, #0]
 8004320:	6120      	str	r0, [r4, #16]
 8004322:	7933      	ldrb	r3, [r6, #4]
 8004324:	7523      	strb	r3, [r4, #20]
 8004326:	e7ce      	b.n	80042c6 <VL53L0X_get_device_info+0x3a>
 8004328:	08008d70 	.word	0x08008d70
 800432c:	08008d58 	.word	0x08008d58
 8004330:	08008d94 	.word	0x08008d94
 8004334:	08008d64 	.word	0x08008d64
 8004338:	08008d7c 	.word	0x08008d7c

0800433c <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800433c:	b500      	push	{lr}
 800433e:	b083      	sub	sp, #12
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004340:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	b293      	uxth	r3, r2
 8004348:	460a      	mov	r2, r1
 800434a:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 800434e:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8004352:	f001 fbbf 	bl	8005ad4 <HAL_I2C_Master_Transmit>
    
    return status;
}
 8004356:	b003      	add	sp, #12
 8004358:	f85d fb04 	ldr.w	pc, [sp], #4

0800435c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800435c:	b500      	push	{lr}
 800435e:	b083      	sub	sp, #12
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004360:	f890 c15c 	ldrb.w	ip, [r0, #348]	; 0x15c
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004364:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	b293      	uxth	r3, r2
 800436c:	460a      	mov	r2, r1
 800436e:	f04c 0101 	orr.w	r1, ip, #1
 8004372:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8004376:	f001 fc73 	bl	8005c60 <HAL_I2C_Master_Receive>
    
    return status;
}
 800437a:	b003      	add	sp, #12
 800437c:	f85d fb04 	ldr.w	pc, [sp], #4

08004380 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8004380:	b530      	push	{r4, r5, lr}
 8004382:	b083      	sub	sp, #12
 8004384:	4604      	mov	r4, r0
 8004386:	4615      	mov	r5, r2
 8004388:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800438c:	2201      	movs	r2, #1
 800438e:	f10d 0107 	add.w	r1, sp, #7
 8004392:	f7ff ffd3 	bl	800433c <_I2CWrite>
    
    if( status_int ){
 8004396:	b958      	cbnz	r0, 80043b0 <VL53L0X_RdByte+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8004398:	2201      	movs	r2, #1
 800439a:	4629      	mov	r1, r5
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff ffdd 	bl	800435c <_I2CRead>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80043a2:	2800      	cmp	r0, #0
 80043a4:	bf0c      	ite	eq
 80043a6:	2000      	moveq	r0, #0
 80043a8:	f06f 0013 	mvnne.w	r0, #19
    }
done:
    return Status;
}
 80043ac:	b003      	add	sp, #12
 80043ae:	bd30      	pop	{r4, r5, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80043b0:	f06f 0013 	mvn.w	r0, #19
 80043b4:	e7fa      	b.n	80043ac <VL53L0X_RdByte+0x2c>
	...

080043b8 <VL53L0X_WriteMulti>:
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80043b8:	2b3f      	cmp	r3, #63	; 0x3f
 80043ba:	d816      	bhi.n	80043ea <VL53L0X_WriteMulti+0x32>
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4605      	mov	r5, r0
 80043c0:	468c      	mov	ip, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461c      	mov	r4, r3
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 80043c6:	4e0a      	ldr	r6, [pc, #40]	; (80043f0 <VL53L0X_WriteMulti+0x38>)
 80043c8:	4630      	mov	r0, r6
 80043ca:	f800 cb01 	strb.w	ip, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 80043ce:	461a      	mov	r2, r3
 80043d0:	f004 fa11 	bl	80087f6 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80043d4:	1c62      	adds	r2, r4, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	f7ff ffaf 	bl	800433c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80043de:	2800      	cmp	r0, #0
 80043e0:	bf0c      	ite	eq
 80043e2:	2000      	moveq	r0, #0
 80043e4:	f06f 0013 	mvnne.w	r0, #19
    }
    
    return Status;
}
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 80043ea:	f06f 0003 	mvn.w	r0, #3
}
 80043ee:	4770      	bx	lr
 80043f0:	20000d7c 	.word	0x20000d7c

080043f4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	4604      	mov	r4, r0
 80043fa:	4615      	mov	r5, r2
 80043fc:	461e      	mov	r6, r3
 80043fe:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8004402:	2201      	movs	r2, #1
 8004404:	f10d 0107 	add.w	r1, sp, #7
 8004408:	f7ff ff98 	bl	800433c <_I2CWrite>
    
    if (status_int != 0) {
 800440c:	b958      	cbnz	r0, 8004426 <VL53L0X_ReadMulti+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800440e:	4632      	mov	r2, r6
 8004410:	4629      	mov	r1, r5
 8004412:	4620      	mov	r0, r4
 8004414:	f7ff ffa2 	bl	800435c <_I2CRead>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004418:	2800      	cmp	r0, #0
 800441a:	bf0c      	ite	eq
 800441c:	2000      	moveq	r0, #0
 800441e:	f06f 0013 	mvnne.w	r0, #19
    }
done:
    return Status;
}
 8004422:	b002      	add	sp, #8
 8004424:	bd70      	pop	{r4, r5, r6, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004426:	f06f 0013 	mvn.w	r0, #19
 800442a:	e7fa      	b.n	8004422 <VL53L0X_ReadMulti+0x2e>

0800442c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800442c:	b530      	push	{r4, r5, lr}
 800442e:	b083      	sub	sp, #12
 8004430:	4604      	mov	r4, r0
 8004432:	4615      	mov	r5, r2
 8004434:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004438:	2201      	movs	r2, #1
 800443a:	f10d 0107 	add.w	r1, sp, #7
 800443e:	f7ff ff7d 	bl	800433c <_I2CWrite>

    if( status_int ){
 8004442:	b968      	cbnz	r0, 8004460 <VL53L0X_RdWord+0x34>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004444:	2202      	movs	r2, #2
 8004446:	4909      	ldr	r1, [pc, #36]	; (800446c <VL53L0X_RdWord+0x40>)
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ff87 	bl	800435c <_I2CRead>
    
    if (status_int != 0) {
 800444e:	b950      	cbnz	r0, 8004466 <VL53L0X_RdWord+0x3a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <VL53L0X_RdWord+0x40>)
 8004452:	781a      	ldrb	r2, [r3, #0]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800445a:	802b      	strh	r3, [r5, #0]
done:
    return Status;
}
 800445c:	b003      	add	sp, #12
 800445e:	bd30      	pop	{r4, r5, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004460:	f06f 0013 	mvn.w	r0, #19
 8004464:	e7fa      	b.n	800445c <VL53L0X_RdWord+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004466:	f06f 0013 	mvn.w	r0, #19
 800446a:	e7f7      	b.n	800445c <VL53L0X_RdWord+0x30>
 800446c:	20000d7c 	.word	0x20000d7c

08004470 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004470:	b530      	push	{r4, r5, lr}
 8004472:	b083      	sub	sp, #12
 8004474:	4604      	mov	r4, r0
 8004476:	4615      	mov	r5, r2
 8004478:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800447c:	2201      	movs	r2, #1
 800447e:	f10d 0107 	add.w	r1, sp, #7
 8004482:	f7ff ff5b 	bl	800433c <_I2CWrite>
    
    if (status_int != 0) {
 8004486:	b998      	cbnz	r0, 80044b0 <VL53L0X_RdDWord+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8004488:	2204      	movs	r2, #4
 800448a:	490c      	ldr	r1, [pc, #48]	; (80044bc <VL53L0X_RdDWord+0x4c>)
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff ff65 	bl	800435c <_I2CRead>
    
    if (status_int != 0) {
 8004492:	b980      	cbnz	r0, 80044b6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8004494:	4909      	ldr	r1, [pc, #36]	; (80044bc <VL53L0X_RdDWord+0x4c>)
 8004496:	780a      	ldrb	r2, [r1, #0]
 8004498:	784b      	ldrb	r3, [r1, #1]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80044a0:	78ca      	ldrb	r2, [r1, #3]
 80044a2:	4413      	add	r3, r2
 80044a4:	788a      	ldrb	r2, [r1, #2]
 80044a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044aa:	602b      	str	r3, [r5, #0]

done:
    return Status;
}
 80044ac:	b003      	add	sp, #12
 80044ae:	bd30      	pop	{r4, r5, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80044b0:	f06f 0013 	mvn.w	r0, #19
 80044b4:	e7fa      	b.n	80044ac <VL53L0X_RdDWord+0x3c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80044b6:	f06f 0013 	mvn.w	r0, #19
 80044ba:	e7f7      	b.n	80044ac <VL53L0X_RdDWord+0x3c>
 80044bc:	20000d7c 	.word	0x20000d7c

080044c0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80044c0:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <VL53L0X_WrByte+0x1c>)
 80044c4:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 80044c6:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80044c8:	2202      	movs	r2, #2
 80044ca:	4619      	mov	r1, r3
 80044cc:	f7ff ff36 	bl	800433c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80044d0:	2800      	cmp	r0, #0
    }
    
    return Status;
}
 80044d2:	bf0c      	ite	eq
 80044d4:	2000      	moveq	r0, #0
 80044d6:	f06f 0013 	mvnne.w	r0, #19
 80044da:	bd08      	pop	{r3, pc}
 80044dc:	20000d7c 	.word	0x20000d7c

080044e0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80044e0:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <VL53L0X_WrWord+0x20>)
 80044e4:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 80044e6:	0a11      	lsrs	r1, r2, #8
 80044e8:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80044ea:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80044ec:	2203      	movs	r2, #3
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7ff ff24 	bl	800433c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80044f4:	2800      	cmp	r0, #0
    }
    
    return Status;
}
 80044f6:	bf0c      	ite	eq
 80044f8:	2000      	moveq	r0, #0
 80044fa:	f06f 0013 	mvnne.w	r0, #19
 80044fe:	bd08      	pop	{r3, pc}
 8004500:	20000d7c 	.word	0x20000d7c

08004504 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b083      	sub	sp, #12
 8004508:	4606      	mov	r6, r0
 800450a:	460f      	mov	r7, r1
 800450c:	4615      	mov	r5, r2
 800450e:	461c      	mov	r4, r3
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004510:	f10d 0207 	add.w	r2, sp, #7
 8004514:	f7ff ff34 	bl	8004380 <VL53L0X_RdByte>
    
    if (Status) {
 8004518:	b108      	cbz	r0, 800451e <VL53L0X_UpdateByte+0x1a>
    
    data = (data & AndData) | OrData;
    Status = VL53L0X_WrByte(Dev, index, data);
done:
    return Status;
}
 800451a:	b003      	add	sp, #12
 800451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data = (data & AndData) | OrData;
 800451e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004522:	ea05 0203 	and.w	r2, r5, r3
 8004526:	4322      	orrs	r2, r4
 8004528:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 800452c:	4639      	mov	r1, r7
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ffc6 	bl	80044c0 <VL53L0X_WrByte>
 8004534:	e7f1      	b.n	800451a <VL53L0X_UpdateByte+0x16>

08004536 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8004536:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 8004538:	2002      	movs	r0, #2
 800453a:	f000 f907 	bl	800474c <HAL_Delay>
    return status;
}
 800453e:	2000      	movs	r0, #0
 8004540:	bd08      	pop	{r3, pc}
	...

08004544 <SetupSingleShot>:
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;

                          
  if( Dev->Present){
 8004544:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
 8004548:	b903      	cbnz	r3, 800454c <SetupSingleShot+0x8>
 800454a:	4770      	bx	lr
{
 800454c:	b510      	push	{r4, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	4604      	mov	r4, r0
    status=VL53L0X_StaticInit(Dev);
 8004552:	f7fd ff69 	bl	8002428 <VL53L0X_StaticInit>
    if( status ){
 8004556:	2800      	cmp	r0, #0
 8004558:	d147      	bne.n	80045ea <SetupSingleShot+0xa6>
      printf("VL53L0X_StaticInit failed\n");
    }
    
    
    status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800455a:	f10d 020e 	add.w	r2, sp, #14
 800455e:	f10d 010f 	add.w	r1, sp, #15
 8004562:	4620      	mov	r0, r4
 8004564:	f7fd fcf8 	bl	8001f58 <VL53L0X_PerformRefCalibration>
    if( status ){
 8004568:	2800      	cmp	r0, #0
 800456a:	d142      	bne.n	80045f2 <SetupSingleShot+0xae>
      printf("VL53L0X_PerformRefCalibration failed\n");
    }
    
    status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800456c:	f10d 0207 	add.w	r2, sp, #7
 8004570:	a902      	add	r1, sp, #8
 8004572:	4620      	mov	r0, r4
 8004574:	f7fe f863 	bl	800263e <VL53L0X_PerformRefSpadManagement>
    if( status ){
 8004578:	2800      	cmp	r0, #0
 800457a:	d13e      	bne.n	80045fa <SetupSingleShot+0xb6>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
    }
    
    status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800457c:	2100      	movs	r1, #0
 800457e:	4620      	mov	r0, r4
 8004580:	f7fd f9de 	bl	8001940 <VL53L0X_SetDeviceMode>
    if( status ){
 8004584:	2800      	cmp	r0, #0
 8004586:	d13c      	bne.n	8004602 <SetupSingleShot+0xbe>
      printf("VL53L0X_SetDeviceMode failed\n");
    }
    
    status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8004588:	2201      	movs	r2, #1
 800458a:	2100      	movs	r1, #0
 800458c:	4620      	mov	r0, r4
 800458e:	f7fd fb13 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8004592:	bbd0      	cbnz	r0, 800460a <SetupSingleShot+0xc6>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
    }
    
    status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8004594:	2201      	movs	r2, #1
 8004596:	4611      	mov	r1, r2
 8004598:	4620      	mov	r0, r4
 800459a:	f7fd fb0d 	bl	8001bb8 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 800459e:	bbc0      	cbnz	r0, 8004612 <SetupSingleShot+0xce>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80045a0:	f641 1299 	movw	r2, #6553	; 0x1999
 80045a4:	2101      	movs	r1, #1
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7fd fb59 	bl	8001c5e <VL53L0X_SetLimitCheckValue>
    
    if( status ){
 80045ac:	bba8      	cbnz	r0, 800461a <SetupSingleShot+0xd6>
      printf("VL53L0X_SetLimitCheckValue failed\n");
    }
    
    status = VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80045ae:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045b2:	2100      	movs	r1, #0
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7fd fb52 	bl	8001c5e <VL53L0X_SetLimitCheckValue>
    if( status ){
 80045ba:	bb90      	cbnz	r0, 8004622 <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckValue failed\n");
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,  timingBudget);
 80045bc:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7fd f9db 	bl	800197c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if( status ){
 80045c6:	bb80      	cbnz	r0, 800462a <SetupSingleShot+0xe6>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
    }
    
    status = VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80045c8:	2212      	movs	r2, #18
 80045ca:	2100      	movs	r1, #0
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7fd f9d9 	bl	8001984 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 80045d2:	bb70      	cbnz	r0, 8004632 <SetupSingleShot+0xee>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
    }
    
    status = VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80045d4:	220e      	movs	r2, #14
 80045d6:	2101      	movs	r1, #1
 80045d8:	4620      	mov	r0, r4
 80045da:	f7fd f9d3 	bl	8001984 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 80045de:	bb60      	cbnz	r0, 800463a <SetupSingleShot+0xf6>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
    }
    
    Dev->LeakyFirst=1;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  }
}
 80045e6:	b004      	add	sp, #16
 80045e8:	bd10      	pop	{r4, pc}
      printf("VL53L0X_StaticInit failed\n");
 80045ea:	4816      	ldr	r0, [pc, #88]	; (8004644 <SetupSingleShot+0x100>)
 80045ec:	f003 ffa0 	bl	8008530 <puts>
 80045f0:	e7b3      	b.n	800455a <SetupSingleShot+0x16>
      printf("VL53L0X_PerformRefCalibration failed\n");
 80045f2:	4815      	ldr	r0, [pc, #84]	; (8004648 <SetupSingleShot+0x104>)
 80045f4:	f003 ff9c 	bl	8008530 <puts>
 80045f8:	e7b8      	b.n	800456c <SetupSingleShot+0x28>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 80045fa:	4814      	ldr	r0, [pc, #80]	; (800464c <SetupSingleShot+0x108>)
 80045fc:	f003 ff98 	bl	8008530 <puts>
 8004600:	e7bc      	b.n	800457c <SetupSingleShot+0x38>
      printf("VL53L0X_SetDeviceMode failed\n");
 8004602:	4813      	ldr	r0, [pc, #76]	; (8004650 <SetupSingleShot+0x10c>)
 8004604:	f003 ff94 	bl	8008530 <puts>
 8004608:	e7be      	b.n	8004588 <SetupSingleShot+0x44>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800460a:	4812      	ldr	r0, [pc, #72]	; (8004654 <SetupSingleShot+0x110>)
 800460c:	f003 ff90 	bl	8008530 <puts>
 8004610:	e7c0      	b.n	8004594 <SetupSingleShot+0x50>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8004612:	4810      	ldr	r0, [pc, #64]	; (8004654 <SetupSingleShot+0x110>)
 8004614:	f003 ff8c 	bl	8008530 <puts>
 8004618:	e7c2      	b.n	80045a0 <SetupSingleShot+0x5c>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800461a:	480f      	ldr	r0, [pc, #60]	; (8004658 <SetupSingleShot+0x114>)
 800461c:	f003 ff88 	bl	8008530 <puts>
 8004620:	e7c5      	b.n	80045ae <SetupSingleShot+0x6a>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8004622:	480d      	ldr	r0, [pc, #52]	; (8004658 <SetupSingleShot+0x114>)
 8004624:	f003 ff84 	bl	8008530 <puts>
 8004628:	e7c8      	b.n	80045bc <SetupSingleShot+0x78>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800462a:	480c      	ldr	r0, [pc, #48]	; (800465c <SetupSingleShot+0x118>)
 800462c:	f003 ff80 	bl	8008530 <puts>
 8004630:	e7ca      	b.n	80045c8 <SetupSingleShot+0x84>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8004632:	480b      	ldr	r0, [pc, #44]	; (8004660 <SetupSingleShot+0x11c>)
 8004634:	f003 ff7c 	bl	8008530 <puts>
 8004638:	e7cc      	b.n	80045d4 <SetupSingleShot+0x90>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800463a:	4809      	ldr	r0, [pc, #36]	; (8004660 <SetupSingleShot+0x11c>)
 800463c:	f003 ff78 	bl	8008530 <puts>
 8004640:	e7ce      	b.n	80045e0 <SetupSingleShot+0x9c>
 8004642:	bf00      	nop
 8004644:	08008d9c 	.word	0x08008d9c
 8004648:	08008db8 	.word	0x08008db8
 800464c:	08008de0 	.word	0x08008de0
 8004650:	08008e08 	.word	0x08008e08
 8004654:	08008e28 	.word	0x08008e28
 8004658:	08008e4c 	.word	0x08008e4c
 800465c:	08008e70 	.word	0x08008e70
 8004660:	08008ea8 	.word	0x08008ea8

08004664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800469c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004668:	f7fd f95c 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004670:	4a0d      	ldr	r2, [pc, #52]	; (80046a8 <LoopForever+0xe>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004674:	e002      	b.n	800467c <LoopCopyDataInit>

08004676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800467a:	3304      	adds	r3, #4

0800467c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800467c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800467e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004680:	d3f9      	bcc.n	8004676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004684:	4c0a      	ldr	r4, [pc, #40]	; (80046b0 <LoopForever+0x16>)
  movs r3, #0
 8004686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004688:	e001      	b.n	800468e <LoopFillZerobss>

0800468a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800468a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800468c:	3204      	adds	r2, #4

0800468e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800468e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004690:	d3fb      	bcc.n	800468a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004692:	f004 f881 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004696:	f7fc fde1 	bl	800125c <main>

0800469a <LoopForever>:

LoopForever:
    b LoopForever
 800469a:	e7fe      	b.n	800469a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800469c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80046a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a4:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 80046a8:	08008f1c 	.word	0x08008f1c
  ldr r2, =_sbss
 80046ac:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 80046b0:	20000f48 	.word	0x20000f48

080046b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046b4:	e7fe      	b.n	80046b4 <ADC1_2_IRQHandler>
	...

080046b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <HAL_InitTick+0x40>)
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046c8:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <HAL_InitTick+0x44>)
 80046ca:	6810      	ldr	r0, [r2, #0]
 80046cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80046d0:	f000 fdf4 	bl	80052bc <HAL_SYSTICK_Config>
 80046d4:	b968      	cbnz	r0, 80046f2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046d6:	2c0f      	cmp	r4, #15
 80046d8:	d901      	bls.n	80046de <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80046da:	2001      	movs	r0, #1
 80046dc:	e00a      	b.n	80046f4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046de:	2200      	movs	r2, #0
 80046e0:	4621      	mov	r1, r4
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	f000 fda5 	bl	8005234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_InitTick+0x48>)
 80046ec:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 80046ee:	2000      	movs	r0, #0
 80046f0:	e000      	b.n	80046f4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80046f2:	2001      	movs	r0, #1
}
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	bf00      	nop
 80046f8:	20000454 	.word	0x20000454
 80046fc:	20000194 	.word	0x20000194
 8004700:	20000458 	.word	0x20000458

08004704 <HAL_Init>:
{
 8004704:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004706:	4a07      	ldr	r2, [pc, #28]	; (8004724 <HAL_Init+0x20>)
 8004708:	6813      	ldr	r3, [r2, #0]
 800470a:	f043 0310 	orr.w	r3, r3, #16
 800470e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004710:	2003      	movs	r0, #3
 8004712:	f000 fd7d 	bl	8005210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004716:	200f      	movs	r0, #15
 8004718:	f7ff ffce 	bl	80046b8 <HAL_InitTick>
  HAL_MspInit();
 800471c:	f7fc ff40 	bl	80015a0 <HAL_MspInit>
}
 8004720:	2000      	movs	r0, #0
 8004722:	bd08      	pop	{r3, pc}
 8004724:	40022000 	.word	0x40022000

08004728 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004728:	4a03      	ldr	r2, [pc, #12]	; (8004738 <HAL_IncTick+0x10>)
 800472a:	6811      	ldr	r1, [r2, #0]
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_IncTick+0x14>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	440b      	add	r3, r1
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000dbc 	.word	0x20000dbc
 800473c:	20000454 	.word	0x20000454

08004740 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004740:	4b01      	ldr	r3, [pc, #4]	; (8004748 <HAL_GetTick+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000dbc 	.word	0x20000dbc

0800474c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff fff6 	bl	8004740 <HAL_GetTick>
 8004754:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004756:	f1b4 3fff 	cmp.w	r4, #4294967295
 800475a:	d002      	beq.n	8004762 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <HAL_Delay+0x24>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004762:	f7ff ffed 	bl	8004740 <HAL_GetTick>
 8004766:	1b40      	subs	r0, r0, r5
 8004768:	42a0      	cmp	r0, r4
 800476a:	d3fa      	bcc.n	8004762 <HAL_Delay+0x16>
  {
  }
}
 800476c:	bd38      	pop	{r3, r4, r5, pc}
 800476e:	bf00      	nop
 8004770:	20000454 	.word	0x20000454

08004774 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004774:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004776:	6802      	ldr	r2, [r0, #0]
 8004778:	6893      	ldr	r3, [r2, #8]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004782:	2000      	movs	r0, #0
}
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	f013 0f01 	tst.w	r3, #1
 800478e:	d03b      	beq.n	8004808 <ADC_Disable+0x94>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004790:	6893      	ldr	r3, [r2, #8]
 8004792:	f003 030d 	and.w	r3, r3, #13
 8004796:	2b01      	cmp	r3, #1
 8004798:	d009      	beq.n	80047ae <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800479c:	f043 0310 	orr.w	r3, r3, #16
 80047a0:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80047aa:	2001      	movs	r0, #1
 80047ac:	e7ea      	b.n	8004784 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 80047ae:	6893      	ldr	r3, [r2, #8]
 80047b0:	f043 0302 	orr.w	r3, r3, #2
 80047b4:	6093      	str	r3, [r2, #8]
 80047b6:	6803      	ldr	r3, [r0, #0]
 80047b8:	2203      	movs	r2, #3
 80047ba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80047bc:	f7ff ffc0 	bl	8004740 <HAL_GetTick>
 80047c0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f013 0f01 	tst.w	r3, #1
  return HAL_OK;
 80047ca:	bf08      	it	eq
 80047cc:	2000      	moveq	r0, #0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047ce:	d105      	bne.n	80047dc <ADC_Disable+0x68>
 80047d0:	e7d8      	b.n	8004784 <ADC_Disable+0x10>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f013 0f01 	tst.w	r3, #1
 80047da:	d013      	beq.n	8004804 <ADC_Disable+0x90>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047dc:	f7ff ffb0 	bl	8004740 <HAL_GetTick>
 80047e0:	1b40      	subs	r0, r0, r5
 80047e2:	2802      	cmp	r0, #2
 80047e4:	d9f5      	bls.n	80047d2 <ADC_Disable+0x5e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f013 0f01 	tst.w	r3, #1
 80047ee:	d0f0      	beq.n	80047d2 <ADC_Disable+0x5e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047f2:	f043 0310 	orr.w	r3, r3, #16
 80047f6:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8004800:	2001      	movs	r0, #1
 8004802:	e7bf      	b.n	8004784 <ADC_Disable+0x10>
  return HAL_OK;
 8004804:	2000      	movs	r0, #0
 8004806:	e7bd      	b.n	8004784 <ADC_Disable+0x10>
 8004808:	2000      	movs	r0, #0
 800480a:	e7bb      	b.n	8004784 <ADC_Disable+0x10>

0800480c <ADC_Enable>:
{
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004810:	6802      	ldr	r2, [r0, #0]
 8004812:	6893      	ldr	r3, [r2, #8]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d00d      	beq.n	8004838 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800481c:	6891      	ldr	r1, [r2, #8]
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <ADC_Enable+0x8c>)
 8004820:	4219      	tst	r1, r3
 8004822:	d00f      	beq.n	8004844 <ADC_Enable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004826:	f043 0310 	orr.w	r3, r3, #16
 800482a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004834:	2001      	movs	r0, #1
}
 8004836:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	f013 0f01 	tst.w	r3, #1
 800483e:	d0ed      	beq.n	800481c <ADC_Enable+0x10>
  return HAL_OK;
 8004840:	2000      	movs	r0, #0
 8004842:	e7f8      	b.n	8004836 <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8004844:	6893      	ldr	r3, [r2, #8]
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800484c:	f7ff ff78 	bl	8004740 <HAL_GetTick>
 8004850:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f013 0f01 	tst.w	r3, #1
 800485a:	d006      	beq.n	800486a <ADC_Enable+0x5e>
  return HAL_OK;
 800485c:	2000      	movs	r0, #0
 800485e:	e7ea      	b.n	8004836 <ADC_Enable+0x2a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f013 0f01 	tst.w	r3, #1
 8004868:	d113      	bne.n	8004892 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800486a:	f7ff ff69 	bl	8004740 <HAL_GetTick>
 800486e:	1b43      	subs	r3, r0, r5
 8004870:	2b02      	cmp	r3, #2
 8004872:	d9f5      	bls.n	8004860 <ADC_Enable+0x54>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f013 0f01 	tst.w	r3, #1
 800487c:	d1f0      	bne.n	8004860 <ADC_Enable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004880:	f043 0310 	orr.w	r3, r3, #16
 8004884:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004886:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800488e:	2001      	movs	r0, #1
 8004890:	e7d1      	b.n	8004836 <ADC_Enable+0x2a>
  return HAL_OK;
 8004892:	2000      	movs	r0, #0
 8004894:	e7cf      	b.n	8004836 <ADC_Enable+0x2a>
 8004896:	bf00      	nop
 8004898:	8000003f 	.word	0x8000003f

0800489c <HAL_ADC_Init>:
{
 800489c:	b510      	push	{r4, lr}
 800489e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f000 8090 	beq.w	80049ca <HAL_ADC_Init+0x12e>
 80048aa:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80048ae:	f013 0f10 	tst.w	r3, #16
 80048b2:	f040 808c 	bne.w	80049ce <HAL_ADC_Init+0x132>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80048b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80048b8:	b1eb      	cbz	r3, 80048f6 <HAL_ADC_Init+0x5a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ba:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80048c4:	d003      	beq.n	80048ce <HAL_ADC_Init+0x32>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80048c6:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80048c8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80048cc:	d050      	beq.n	8004970 <HAL_ADC_Init+0xd4>
      ADC_STATE_CLR_SET(hadc->State,
 80048ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d0:	f023 0312 	bic.w	r3, r3, #18
 80048d4:	f043 0310 	orr.w	r3, r3, #16
 80048d8:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ADC_STATE_CLR_SET(hadc->State,
 80048e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e6:	f023 0312 	bic.w	r3, r3, #18
 80048ea:	f043 0310 	orr.w	r3, r3, #16
 80048ee:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 80048f0:	2001      	movs	r0, #1
}
 80048f2:	b002      	add	sp, #8
 80048f4:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80048f6:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 80048f8:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80048fa:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 80048fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8004900:	f7fc fe66 	bl	80015d0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800490c:	d001      	beq.n	8004912 <HAL_ADC_Init+0x76>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800490e:	2000      	movs	r0, #0
 8004910:	e7d4      	b.n	80048bc <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8004912:	4620      	mov	r0, r4
 8004914:	f7ff ff2e 	bl	8004774 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800491a:	f013 0f10 	tst.w	r3, #16
 800491e:	d1cd      	bne.n	80048bc <HAL_ADC_Init+0x20>
 8004920:	2800      	cmp	r0, #0
 8004922:	d1cb      	bne.n	80048bc <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8004924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004926:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800492a:	f023 0302 	bic.w	r3, r3, #2
 800492e:	f043 0302 	orr.w	r3, r3, #2
 8004932:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	6893      	ldr	r3, [r2, #8]
 8004938:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800493c:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	6893      	ldr	r3, [r2, #8]
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004946:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_ADC_Init+0x1fc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a53      	ldr	r2, [pc, #332]	; (8004a9c <HAL_ADC_Init+0x200>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	0c9b      	lsrs	r3, r3, #18
 8004954:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800495c:	9b01      	ldr	r3, [sp, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ac      	beq.n	80048bc <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8004962:	9b01      	ldr	r3, [sp, #4]
 8004964:	3b01      	subs	r3, #1
 8004966:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004968:	9b01      	ldr	r3, [sp, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f9      	bne.n	8004962 <HAL_ADC_Init+0xc6>
 800496e:	e7a5      	b.n	80048bc <HAL_ADC_Init+0x20>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004972:	f013 0f10 	tst.w	r3, #16
 8004976:	d1b5      	bne.n	80048e4 <HAL_ADC_Init+0x48>
 8004978:	2800      	cmp	r0, #0
 800497a:	d1b3      	bne.n	80048e4 <HAL_ADC_Init+0x48>
 800497c:	e02b      	b.n	80049d6 <HAL_ADC_Init+0x13a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f013 0f01 	tst.w	r3, #1
 8004984:	d149      	bne.n	8004a1a <HAL_ADC_Init+0x17e>
 8004986:	e03c      	b.n	8004a02 <HAL_ADC_Init+0x166>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	f013 0f01 	tst.w	r3, #1
 800498e:	d144      	bne.n	8004a1a <HAL_ADC_Init+0x17e>
 8004990:	e03c      	b.n	8004a0c <HAL_ADC_Init+0x170>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004992:	b931      	cbnz	r1, 80049a2 <HAL_ADC_Init+0x106>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004994:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004996:	3a01      	subs	r2, #1
 8004998:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
 800499c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
 80049a0:	e04b      	b.n	8004a3a <HAL_ADC_Init+0x19e>
        ADC_STATE_CLR_SET(hadc->State,
 80049a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049a4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80049a8:	f042 0220 	orr.w	r2, r2, #32
 80049ac:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	6462      	str	r2, [r4, #68]	; 0x44
 80049b6:	e040      	b.n	8004a3a <HAL_ADC_Init+0x19e>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80049bc:	69e3      	ldr	r3, [r4, #28]
 80049be:	3b01      	subs	r3, #1
 80049c0:	f022 020f 	bic.w	r2, r2, #15
 80049c4:	4313      	orrs	r3, r2
 80049c6:	630b      	str	r3, [r1, #48]	; 0x30
 80049c8:	e05d      	b.n	8004a86 <HAL_ADC_Init+0x1ea>
    return HAL_ERROR;
 80049ca:	2001      	movs	r0, #1
 80049cc:	e791      	b.n	80048f2 <HAL_ADC_Init+0x56>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049d0:	f013 0f10 	tst.w	r3, #16
 80049d4:	d186      	bne.n	80048e4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80049da:	f012 0f04 	tst.w	r2, #4
 80049de:	d181      	bne.n	80048e4 <HAL_ADC_Init+0x48>
    ADC_STATE_CLR_SET(hadc->State,
 80049e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049e2:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80049e6:	f042 0202 	orr.w	r2, r2, #2
 80049ea:	6422      	str	r2, [r4, #64]	; 0x40
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80049ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f0:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <HAL_ADC_Init+0x204>)
 80049f2:	bf18      	it	ne
 80049f4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	f001 0103 	and.w	r1, r1, #3
 80049fe:	2901      	cmp	r1, #1
 8004a00:	d0bd      	beq.n	800497e <HAL_ADC_Init+0xe2>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a02:	6893      	ldr	r3, [r2, #8]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d0bd      	beq.n	8004988 <HAL_ADC_Init+0xec>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <HAL_ADC_Init+0x208>)
 8004a0e:	6893      	ldr	r3, [r2, #8]
 8004a10:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a14:	6861      	ldr	r1, [r4, #4]
 8004a16:	430b      	orrs	r3, r1
 8004a18:	6093      	str	r3, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004a1a:	7e61      	ldrb	r1, [r4, #25]
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	68a2      	ldr	r2, [r4, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8004a26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004a28:	3a01      	subs	r2, #1
 8004a2a:	bf18      	it	ne
 8004a2c:	2201      	movne	r2, #1
 8004a2e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a32:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004a36:	2a01      	cmp	r2, #1
 8004a38:	d0ab      	beq.n	8004992 <HAL_ADC_Init+0xf6>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a3c:	2a01      	cmp	r2, #1
 8004a3e:	d002      	beq.n	8004a46 <HAL_ADC_Init+0x1aa>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004a40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a42:	430a      	orrs	r2, r1
 8004a44:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	6891      	ldr	r1, [r2, #8]
 8004a4a:	f011 0f0c 	tst.w	r1, #12
 8004a4e:	d10c      	bne.n	8004a6a <HAL_ADC_Init+0x1ce>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004a50:	68d1      	ldr	r1, [r2, #12]
 8004a52:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004a56:	f021 0102 	bic.w	r1, r1, #2
 8004a5a:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004a5c:	7e21      	ldrb	r1, [r4, #24]
 8004a5e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004a62:	0052      	lsls	r2, r2, #1
 8004a64:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8004a68:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	68c8      	ldr	r0, [r1, #12]
 8004a6e:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <HAL_ADC_Init+0x20c>)
 8004a70:	4002      	ands	r2, r0
 8004a72:	431a      	orrs	r2, r3
 8004a74:	60ca      	str	r2, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d09d      	beq.n	80049b8 <HAL_ADC_Init+0x11c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a7c:	6822      	ldr	r2, [r4, #0]
 8004a7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004a80:	f023 030f 	bic.w	r3, r3, #15
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8004a86:	2000      	movs	r0, #0
 8004a88:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a8c:	f023 0303 	bic.w	r3, r3, #3
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6423      	str	r3, [r4, #64]	; 0x40
 8004a96:	e72c      	b.n	80048f2 <HAL_ADC_Init+0x56>
 8004a98:	20000194 	.word	0x20000194
 8004a9c:	431bde83 	.word	0x431bde83
 8004aa0:	50000100 	.word	0x50000100
 8004aa4:	50000300 	.word	0x50000300
 8004aa8:	fff0c007 	.word	0xfff0c007

08004aac <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004aac:	6803      	ldr	r3, [r0, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f013 0f04 	tst.w	r3, #4
 8004ab4:	d16e      	bne.n	8004b94 <HAL_ADC_Start+0xe8>
{
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8004aba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d06a      	beq.n	8004b98 <HAL_ADC_Start+0xec>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8004ac8:	f7ff fea0 	bl	800480c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d15d      	bne.n	8004b8c <HAL_ADC_Start+0xe0>
      ADC_STATE_CLR_SET(hadc->State,
 8004ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ade:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004ae0:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <HAL_ADC_Start+0xf0>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f013 0f1f 	tst.w	r3, #31
 8004ae8:	d017      	beq.n	8004b1a <HAL_ADC_Start+0x6e>
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004af0:	d013      	beq.n	8004b1a <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af8:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_ADC_Start+0xf4>)
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d11b      	bne.n	8004b38 <HAL_ADC_Start+0x8c>
 8004b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b0a:	d015      	beq.n	8004b38 <HAL_ADC_Start+0x8c>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b16:	6423      	str	r3, [r4, #64]	; 0x40
 8004b18:	e00e      	b.n	8004b38 <HAL_ADC_Start+0x8c>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b20:	6423      	str	r3, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b2a:	d005      	beq.n	8004b38 <HAL_ADC_Start+0x8c>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b36:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b3a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b3e:	bf1a      	itte	ne
 8004b40:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004b42:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8004b46:	2300      	moveq	r3, #0
 8004b48:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	221c      	movs	r2, #28
 8004b54:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <HAL_ADC_Start+0xf0>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f013 0f1f 	tst.w	r3, #31
 8004b5e:	d00f      	beq.n	8004b80 <HAL_ADC_Start+0xd4>
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <HAL_ADC_Start+0xf0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d009      	beq.n	8004b80 <HAL_ADC_Start+0xd4>
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_ADC_Start+0xf0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2b09      	cmp	r3, #9
 8004b76:	d003      	beq.n	8004b80 <HAL_ADC_Start+0xd4>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b7e:	d108      	bne.n	8004b92 <HAL_ADC_Start+0xe6>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	6893      	ldr	r3, [r2, #8]
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	6093      	str	r3, [r2, #8]
 8004b8a:	e002      	b.n	8004b92 <HAL_ADC_Start+0xe6>
      __HAL_UNLOCK(hadc);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004b92:	bd10      	pop	{r4, pc}
    tmp_hal_status = HAL_BUSY;
 8004b94:	2002      	movs	r0, #2
}
 8004b96:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8004b98:	2002      	movs	r0, #2
 8004b9a:	e7fa      	b.n	8004b92 <HAL_ADC_Start+0xe6>
 8004b9c:	50000300 	.word	0x50000300
 8004ba0:	50000100 	.word	0x50000100

08004ba4 <HAL_ADC_PollForConversion>:
{
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	4606      	mov	r6, r0
 8004baa:	460d      	mov	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004bac:	6944      	ldr	r4, [r0, #20]
 8004bae:	2c08      	cmp	r4, #8
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_ADC_PollForConversion+0x24>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004bb2:	4b40      	ldr	r3, [pc, #256]	; (8004cb4 <HAL_ADC_PollForConversion+0x110>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f013 0f1f 	tst.w	r3, #31
 8004bba:	d11b      	bne.n	8004bf4 <HAL_ADC_PollForConversion+0x50>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004bbc:	6803      	ldr	r3, [r0, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f013 0f01 	tst.w	r3, #1
 8004bc4:	d10d      	bne.n	8004be2 <HAL_ADC_PollForConversion+0x3e>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004bc6:	240c      	movs	r4, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004bc8:	4b3a      	ldr	r3, [pc, #232]	; (8004cb4 <HAL_ADC_PollForConversion+0x110>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f013 0f1f 	tst.w	r3, #31
 8004bd0:	d020      	beq.n	8004c14 <HAL_ADC_PollForConversion+0x70>
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bd8:	d01c      	beq.n	8004c14 <HAL_ADC_PollForConversion+0x70>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004bda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bde:	68df      	ldr	r7, [r3, #12]
 8004be0:	e01a      	b.n	8004c18 <HAL_ADC_PollForConversion+0x74>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8004bea:	2300      	movs	r3, #0
 8004bec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	e05d      	b.n	8004cb0 <HAL_ADC_PollForConversion+0x10c>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <HAL_ADC_PollForConversion+0x110>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_PollForConversion+0x5e>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004bfe:	240c      	movs	r4, #12
 8004c00:	e7e2      	b.n	8004bc8 <HAL_ADC_PollForConversion+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c04:	f043 0320 	orr.w	r3, r3, #32
 8004c08:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8004c10:	2001      	movs	r0, #1
 8004c12:	e04d      	b.n	8004cb0 <HAL_ADC_PollForConversion+0x10c>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	68df      	ldr	r7, [r3, #12]
  tickstart = HAL_GetTick();  
 8004c18:	f7ff fd92 	bl	8004740 <HAL_GetTick>
 8004c1c:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004c1e:	6832      	ldr	r2, [r6, #0]
 8004c20:	6813      	ldr	r3, [r2, #0]
 8004c22:	4223      	tst	r3, r4
 8004c24:	d117      	bne.n	8004c56 <HAL_ADC_PollForConversion+0xb2>
    if(Timeout != HAL_MAX_DELAY)
 8004c26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c2a:	d0f9      	beq.n	8004c20 <HAL_ADC_PollForConversion+0x7c>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c2c:	b965      	cbnz	r5, 8004c48 <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004c2e:	6833      	ldr	r3, [r6, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4223      	tst	r3, r4
 8004c34:	d1f3      	bne.n	8004c1e <HAL_ADC_PollForConversion+0x7a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c36:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6433      	str	r3, [r6, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_TIMEOUT;
 8004c44:	2003      	movs	r0, #3
 8004c46:	e033      	b.n	8004cb0 <HAL_ADC_PollForConversion+0x10c>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c48:	f7ff fd7a 	bl	8004740 <HAL_GetTick>
 8004c4c:	eba0 0008 	sub.w	r0, r0, r8
 8004c50:	42a8      	cmp	r0, r5
 8004c52:	d9e4      	bls.n	8004c1e <HAL_ADC_PollForConversion+0x7a>
 8004c54:	e7eb      	b.n	8004c2e <HAL_ADC_PollForConversion+0x8a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c56:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c5c:	6433      	str	r3, [r6, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004c5e:	68d3      	ldr	r3, [r2, #12]
 8004c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8004c64:	f407 5100 	and.w	r1, r7, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	d11c      	bne.n	8004ca6 <HAL_ADC_PollForConversion+0x102>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004c6c:	6813      	ldr	r3, [r2, #0]
 8004c6e:	f013 0f08 	tst.w	r3, #8
 8004c72:	d018      	beq.n	8004ca6 <HAL_ADC_PollForConversion+0x102>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c74:	6893      	ldr	r3, [r2, #8]
 8004c76:	f013 0f04 	tst.w	r3, #4
 8004c7a:	d10c      	bne.n	8004c96 <HAL_ADC_PollForConversion+0xf2>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c7c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c82:	6433      	str	r3, [r6, #64]	; 0x40
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c84:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004c86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c8a:	d10c      	bne.n	8004ca6 <HAL_ADC_PollForConversion+0x102>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c8c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6433      	str	r3, [r6, #64]	; 0x40
 8004c94:	e007      	b.n	8004ca6 <HAL_ADC_PollForConversion+0x102>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c96:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004c98:	f043 0320 	orr.w	r3, r3, #32
 8004c9c:	6433      	str	r3, [r6, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6473      	str	r3, [r6, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004ca6:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004caa:	bf08      	it	eq
 8004cac:	6014      	streq	r4, [r2, #0]
  return HAL_OK;
 8004cae:	2000      	movs	r0, #0
}
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	50000300 	.word	0x50000300

08004cb8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004cb8:	6803      	ldr	r3, [r0, #0]
 8004cba:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_ADCEx_Calibration_Start>:
{
 8004cbe:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004cc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d046      	beq.n	8004d56 <HAL_ADCEx_Calibration_Start+0x98>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8004cd2:	f7ff fd4f 	bl	8004774 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	b9d0      	cbnz	r0, 8004d10 <HAL_ADCEx_Calibration_Start+0x52>
    hadc->State = HAL_ADC_STATE_READY;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	6423      	str	r3, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	6893      	ldr	r3, [r2, #8]
 8004ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ce6:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ce8:	2d01      	cmp	r5, #1
 8004cea:	d016      	beq.n	8004d1a <HAL_ADCEx_Calibration_Start+0x5c>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	6893      	ldr	r3, [r2, #8]
 8004cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8004cf6:	f7ff fd23 	bl	8004740 <HAL_GetTick>
 8004cfa:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db14      	blt.n	8004d2e <HAL_ADCEx_Calibration_Start+0x70>
    ADC_STATE_CLR_SET(hadc->State,
 8004d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004d10:	2300      	movs	r3, #0
 8004d12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004d16:	4630      	mov	r0, r6
 8004d18:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	6893      	ldr	r3, [r2, #8]
 8004d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d22:	6093      	str	r3, [r2, #8]
 8004d24:	e7e2      	b.n	8004cec <HAL_ADCEx_Calibration_Start+0x2e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	daea      	bge.n	8004d04 <HAL_ADCEx_Calibration_Start+0x46>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004d2e:	f7ff fd07 	bl	8004740 <HAL_GetTick>
 8004d32:	1b43      	subs	r3, r0, r5
 8004d34:	2b0a      	cmp	r3, #10
 8004d36:	d9f6      	bls.n	8004d26 <HAL_ADCEx_Calibration_Start+0x68>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	daf2      	bge.n	8004d26 <HAL_ADCEx_Calibration_Start+0x68>
          ADC_STATE_CLR_SET(hadc->State,
 8004d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d42:	f023 0312 	bic.w	r3, r3, #18
 8004d46:	f043 0310 	orr.w	r3, r3, #16
 8004d4a:	6423      	str	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004d52:	2601      	movs	r6, #1
 8004d54:	e7df      	b.n	8004d16 <HAL_ADCEx_Calibration_Start+0x58>
  __HAL_LOCK(hadc);
 8004d56:	2602      	movs	r6, #2
 8004d58:	e7dd      	b.n	8004d16 <HAL_ADCEx_Calibration_Start+0x58>
	...

08004d5c <HAL_ADC_ConfigChannel>:
{
 8004d5c:	b470      	push	{r4, r5, r6}
 8004d5e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8004d60:	2200      	movs	r2, #0
 8004d62:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004d64:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004d68:	2a01      	cmp	r2, #1
 8004d6a:	f000 81bc 	beq.w	80050e6 <HAL_ADC_ConfigChannel+0x38a>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2201      	movs	r2, #1
 8004d72:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d76:	6800      	ldr	r0, [r0, #0]
 8004d78:	6882      	ldr	r2, [r0, #8]
 8004d7a:	f012 0f04 	tst.w	r2, #4
 8004d7e:	f040 819f 	bne.w	80050c0 <HAL_ADC_ConfigChannel+0x364>
    if (sConfig->Rank < 5U)
 8004d82:	684a      	ldr	r2, [r1, #4]
 8004d84:	2a04      	cmp	r2, #4
 8004d86:	d835      	bhi.n	8004df4 <HAL_ADC_ConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->SQR1,
 8004d88:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004d8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004d8e:	0052      	lsls	r2, r2, #1
 8004d90:	f04f 0c1f 	mov.w	ip, #31
 8004d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8004d98:	ea24 0c0c 	bic.w	ip, r4, ip
 8004d9c:	680c      	ldr	r4, [r1, #0]
 8004d9e:	4094      	lsls	r4, r2
 8004da0:	ea4c 0404 	orr.w	r4, ip, r4
 8004da4:	6304      	str	r4, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	6882      	ldr	r2, [r0, #8]
 8004daa:	f012 0f0c 	tst.w	r2, #12
 8004dae:	d171      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x138>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004db0:	680a      	ldr	r2, [r1, #0]
 8004db2:	2a09      	cmp	r2, #9
 8004db4:	d955      	bls.n	8004e62 <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004db6:	6984      	ldr	r4, [r0, #24]
 8004db8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004dbc:	3a1e      	subs	r2, #30
 8004dbe:	f04f 0c07 	mov.w	ip, #7
 8004dc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8004dc6:	ea24 040c 	bic.w	r4, r4, ip
 8004dca:	688d      	ldr	r5, [r1, #8]
 8004dcc:	fa05 f202 	lsl.w	r2, r5, r2
 8004dd0:	4322      	orrs	r2, r4
 8004dd2:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004dd4:	681c      	ldr	r4, [r3, #0]
 8004dd6:	68e2      	ldr	r2, [r4, #12]
 8004dd8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004ddc:	0052      	lsls	r2, r2, #1
 8004dde:	6948      	ldr	r0, [r1, #20]
 8004de0:	4090      	lsls	r0, r2
    switch (sConfig->OffsetNumber)
 8004de2:	690a      	ldr	r2, [r1, #16]
 8004de4:	3a01      	subs	r2, #1
 8004de6:	2a03      	cmp	r2, #3
 8004de8:	f200 80bc 	bhi.w	8004f64 <HAL_ADC_ConfigChannel+0x208>
 8004dec:	e8df f002 	tbb	[pc, r2]
 8004df0:	afa49948 	.word	0xafa49948
    else if (sConfig->Rank < 10U)
 8004df4:	2a09      	cmp	r2, #9
 8004df6:	d810      	bhi.n	8004e1a <HAL_ADC_ConfigChannel+0xbe>
      MODIFY_REG(hadc->Instance->SQR2,
 8004df8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004dfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004dfe:	0052      	lsls	r2, r2, #1
 8004e00:	3a1e      	subs	r2, #30
 8004e02:	f04f 0c1f 	mov.w	ip, #31
 8004e06:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e0a:	ea24 040c 	bic.w	r4, r4, ip
 8004e0e:	680d      	ldr	r5, [r1, #0]
 8004e10:	fa05 f202 	lsl.w	r2, r5, r2
 8004e14:	4322      	orrs	r2, r4
 8004e16:	6342      	str	r2, [r0, #52]	; 0x34
 8004e18:	e7c5      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x4a>
    else if (sConfig->Rank < 15U)
 8004e1a:	2a0e      	cmp	r2, #14
 8004e1c:	d810      	bhi.n	8004e40 <HAL_ADC_ConfigChannel+0xe4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004e1e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004e20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004e24:	0052      	lsls	r2, r2, #1
 8004e26:	3a3c      	subs	r2, #60	; 0x3c
 8004e28:	f04f 0c1f 	mov.w	ip, #31
 8004e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e30:	ea24 040c 	bic.w	r4, r4, ip
 8004e34:	680d      	ldr	r5, [r1, #0]
 8004e36:	fa05 f202 	lsl.w	r2, r5, r2
 8004e3a:	4322      	orrs	r2, r4
 8004e3c:	6382      	str	r2, [r0, #56]	; 0x38
 8004e3e:	e7b2      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x4a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004e40:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004e42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004e46:	0052      	lsls	r2, r2, #1
 8004e48:	3a5a      	subs	r2, #90	; 0x5a
 8004e4a:	f04f 0c1f 	mov.w	ip, #31
 8004e4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e52:	ea24 040c 	bic.w	r4, r4, ip
 8004e56:	680d      	ldr	r5, [r1, #0]
 8004e58:	fa05 f202 	lsl.w	r2, r5, r2
 8004e5c:	4322      	orrs	r2, r4
 8004e5e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8004e60:	e7a1      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x4a>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e62:	6944      	ldr	r4, [r0, #20]
 8004e64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004e68:	f04f 0c07 	mov.w	ip, #7
 8004e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e70:	ea24 040c 	bic.w	r4, r4, ip
 8004e74:	688d      	ldr	r5, [r1, #8]
 8004e76:	fa05 f202 	lsl.w	r2, r5, r2
 8004e7a:	4322      	orrs	r2, r4
 8004e7c:	6142      	str	r2, [r0, #20]
 8004e7e:	e7a9      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004e80:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8004e82:	680d      	ldr	r5, [r1, #0]
 8004e84:	4a99      	ldr	r2, [pc, #612]	; (80050ec <HAL_ADC_ConfigChannel+0x390>)
 8004e86:	4032      	ands	r2, r6
 8004e88:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8004e8c:	4302      	orrs	r2, r0
 8004e8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e92:	6622      	str	r2, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	6882      	ldr	r2, [r0, #8]
 8004e98:	f002 0203 	and.w	r2, r2, #3
 8004e9c:	2a01      	cmp	r2, #1
 8004e9e:	f000 8092 	beq.w	8004fc6 <HAL_ADC_ConfigChannel+0x26a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ea2:	68ca      	ldr	r2, [r1, #12]
 8004ea4:	2a01      	cmp	r2, #1
 8004ea6:	f000 8095 	beq.w	8004fd4 <HAL_ADC_ConfigChannel+0x278>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004eaa:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8004eae:	2401      	movs	r4, #1
 8004eb0:	680d      	ldr	r5, [r1, #0]
 8004eb2:	40ac      	lsls	r4, r5
 8004eb4:	ea22 0204 	bic.w	r2, r2, r4
 8004eb8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ebc:	680a      	ldr	r2, [r1, #0]
 8004ebe:	2a10      	cmp	r2, #16
 8004ec0:	f000 80af 	beq.w	8005022 <HAL_ADC_ConfigChannel+0x2c6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004ec4:	2a11      	cmp	r2, #17
 8004ec6:	f000 80b4 	beq.w	8005032 <HAL_ADC_ConfigChannel+0x2d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004eca:	2a12      	cmp	r2, #18
 8004ecc:	f040 8103 	bne.w	80050d6 <HAL_ADC_ConfigChannel+0x37a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004ed0:	4987      	ldr	r1, [pc, #540]	; (80050f0 <HAL_ADC_ConfigChannel+0x394>)
 8004ed2:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004ed4:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8004ed8:	f040 80ff 	bne.w	80050da <HAL_ADC_ConfigChannel+0x37e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004edc:	681c      	ldr	r4, [r3, #0]
 8004ede:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004ee2:	4984      	ldr	r1, [pc, #528]	; (80050f4 <HAL_ADC_ConfigChannel+0x398>)
 8004ee4:	bf18      	it	ne
 8004ee6:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004eea:	68a0      	ldr	r0, [r4, #8]
 8004eec:	f000 0003 	and.w	r0, r0, #3
 8004ef0:	2801      	cmp	r0, #1
 8004ef2:	f000 80a6 	beq.w	8005042 <HAL_ADC_ConfigChannel+0x2e6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004ef6:	6888      	ldr	r0, [r1, #8]
 8004ef8:	f000 0003 	and.w	r0, r0, #3
 8004efc:	2801      	cmp	r0, #1
 8004efe:	f000 80ab 	beq.w	8005058 <HAL_ADC_ConfigChannel+0x2fc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f02:	2a10      	cmp	r2, #16
 8004f04:	f000 80ad 	beq.w	8005062 <HAL_ADC_ConfigChannel+0x306>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004f08:	2a11      	cmp	r2, #17
 8004f0a:	f000 80cd 	beq.w	80050a8 <HAL_ADC_ConfigChannel+0x34c>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f0e:	2a12      	cmp	r2, #18
 8004f10:	f040 80e7 	bne.w	80050e2 <HAL_ADC_ConfigChannel+0x386>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004f14:	4976      	ldr	r1, [pc, #472]	; (80050f0 <HAL_ADC_ConfigChannel+0x394>)
 8004f16:	688a      	ldr	r2, [r1, #8]
 8004f18:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f1c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e0d3      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004f22:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004f24:	680d      	ldr	r5, [r1, #0]
 8004f26:	4a71      	ldr	r2, [pc, #452]	; (80050ec <HAL_ADC_ConfigChannel+0x390>)
 8004f28:	4032      	ands	r2, r6
 8004f2a:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8004f2e:	4302      	orrs	r2, r0
 8004f30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f34:	6662      	str	r2, [r4, #100]	; 0x64
      break;
 8004f36:	e7ad      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x138>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004f38:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 8004f3a:	680d      	ldr	r5, [r1, #0]
 8004f3c:	4a6b      	ldr	r2, [pc, #428]	; (80050ec <HAL_ADC_ConfigChannel+0x390>)
 8004f3e:	4032      	ands	r2, r6
 8004f40:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8004f44:	4302      	orrs	r2, r0
 8004f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f4a:	66a2      	str	r2, [r4, #104]	; 0x68
      break;
 8004f4c:	e7a2      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x138>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004f4e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004f50:	680d      	ldr	r5, [r1, #0]
 8004f52:	4a66      	ldr	r2, [pc, #408]	; (80050ec <HAL_ADC_ConfigChannel+0x390>)
 8004f54:	4032      	ands	r2, r6
 8004f56:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8004f5a:	4302      	orrs	r2, r0
 8004f5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f60:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8004f62:	e797      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x138>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f64:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004f66:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8004f6a:	6808      	ldr	r0, [r1, #0]
 8004f6c:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8004f70:	d103      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x21e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004f72:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004f74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f78:	6622      	str	r2, [r4, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004f7e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004f82:	680c      	ldr	r4, [r1, #0]
 8004f84:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8004f88:	d103      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x236>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004f8a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004f8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f90:	6650      	str	r0, [r2, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004f96:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004f9a:	680c      	ldr	r4, [r1, #0]
 8004f9c:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8004fa0:	d103      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004fa2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004fa4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004fa8:	6690      	str	r0, [r2, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004fae:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004fb2:	680c      	ldr	r4, [r1, #0]
 8004fb4:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8004fb8:	f47f af6c 	bne.w	8004e94 <HAL_ADC_ConfigChannel+0x138>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004fbc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004fbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004fc2:	66d0      	str	r0, [r2, #108]	; 0x6c
 8004fc4:	e766      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x138>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fc6:	6802      	ldr	r2, [r0, #0]
 8004fc8:	f012 0f01 	tst.w	r2, #1
 8004fcc:	f43f af69 	beq.w	8004ea2 <HAL_ADC_ConfigChannel+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e07a      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004fd4:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8004fd8:	2201      	movs	r2, #1
 8004fda:	680d      	ldr	r5, [r1, #0]
 8004fdc:	40aa      	lsls	r2, r5
 8004fde:	4322      	orrs	r2, r4
 8004fe0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004fe4:	680a      	ldr	r2, [r1, #0]
 8004fe6:	2a09      	cmp	r2, #9
 8004fe8:	d90d      	bls.n	8005006 <HAL_ADC_ConfigChannel+0x2aa>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004fea:	681d      	ldr	r5, [r3, #0]
 8004fec:	69a8      	ldr	r0, [r5, #24]
 8004fee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004ff2:	3a1b      	subs	r2, #27
 8004ff4:	2407      	movs	r4, #7
 8004ff6:	4094      	lsls	r4, r2
 8004ff8:	ea20 0004 	bic.w	r0, r0, r4
 8004ffc:	688c      	ldr	r4, [r1, #8]
 8004ffe:	4094      	lsls	r4, r2
 8005000:	4320      	orrs	r0, r4
 8005002:	61a8      	str	r0, [r5, #24]
 8005004:	e75a      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x160>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005006:	681d      	ldr	r5, [r3, #0]
 8005008:	6968      	ldr	r0, [r5, #20]
 800500a:	3201      	adds	r2, #1
 800500c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005010:	2407      	movs	r4, #7
 8005012:	4094      	lsls	r4, r2
 8005014:	ea20 0004 	bic.w	r0, r0, r4
 8005018:	688c      	ldr	r4, [r1, #8]
 800501a:	4094      	lsls	r4, r2
 800501c:	4320      	orrs	r0, r4
 800501e:	6168      	str	r0, [r5, #20]
 8005020:	e74c      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005022:	4933      	ldr	r1, [pc, #204]	; (80050f0 <HAL_ADC_ConfigChannel+0x394>)
 8005024:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005026:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800502a:	f43f af57 	beq.w	8004edc <HAL_ADC_ConfigChannel+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800502e:	2000      	movs	r0, #0
 8005030:	e04b      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005032:	492f      	ldr	r1, [pc, #188]	; (80050f0 <HAL_ADC_ConfigChannel+0x394>)
 8005034:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005036:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800503a:	f43f af4f 	beq.w	8004edc <HAL_ADC_ConfigChannel+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800503e:	2000      	movs	r0, #0
 8005040:	e043      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005042:	6820      	ldr	r0, [r4, #0]
 8005044:	f010 0f01 	tst.w	r0, #1
 8005048:	f43f af55 	beq.w	8004ef6 <HAL_ADC_ConfigChannel+0x19a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800504c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504e:	f042 0220 	orr.w	r2, r2, #32
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005054:	2001      	movs	r0, #1
 8005056:	e038      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005058:	6809      	ldr	r1, [r1, #0]
 800505a:	f011 0f01 	tst.w	r1, #1
 800505e:	d1f5      	bne.n	800504c <HAL_ADC_ConfigChannel+0x2f0>
 8005060:	e74f      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x1a6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005062:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8005066:	d001      	beq.n	800506c <HAL_ADC_ConfigChannel+0x310>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005068:	2000      	movs	r0, #0
 800506a:	e02e      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800506c:	4920      	ldr	r1, [pc, #128]	; (80050f0 <HAL_ADC_ConfigChannel+0x394>)
 800506e:	688a      	ldr	r2, [r1, #8]
 8005070:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005074:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <HAL_ADC_ConfigChannel+0x39c>)
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 800507e:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8005082:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8005086:	fba1 1202 	umull	r1, r2, r1, r2
 800508a:	0c92      	lsrs	r2, r2, #18
 800508c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005090:	0052      	lsls	r2, r2, #1
 8005092:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8005094:	9a01      	ldr	r2, [sp, #4]
 8005096:	b312      	cbz	r2, 80050de <HAL_ADC_ConfigChannel+0x382>
            wait_loop_index--;
 8005098:	9a01      	ldr	r2, [sp, #4]
 800509a:	3a01      	subs	r2, #1
 800509c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800509e:	9a01      	ldr	r2, [sp, #4]
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	d1f9      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x33c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a4:	2000      	movs	r0, #0
 80050a6:	e010      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80050a8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80050ac:	d001      	beq.n	80050b2 <HAL_ADC_ConfigChannel+0x356>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ae:	2000      	movs	r0, #0
 80050b0:	e00b      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80050b2:	490f      	ldr	r1, [pc, #60]	; (80050f0 <HAL_ADC_ConfigChannel+0x394>)
 80050b4:	688a      	ldr	r2, [r1, #8]
 80050b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80050ba:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050bc:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80050be:	e004      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c2:	f042 0220 	orr.w	r2, r2, #32
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80050c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050d0:	b003      	add	sp, #12
 80050d2:	bc70      	pop	{r4, r5, r6}
 80050d4:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050d6:	2000      	movs	r0, #0
 80050d8:	e7f7      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
 80050da:	2000      	movs	r0, #0
 80050dc:	e7f5      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
 80050de:	2000      	movs	r0, #0
 80050e0:	e7f3      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e7f1      	b.n	80050ca <HAL_ADC_ConfigChannel+0x36e>
  __HAL_LOCK(hadc);
 80050e6:	2002      	movs	r0, #2
 80050e8:	e7f2      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x374>
 80050ea:	bf00      	nop
 80050ec:	83fff000 	.word	0x83fff000
 80050f0:	50000300 	.word	0x50000300
 80050f4:	50000100 	.word	0x50000100
 80050f8:	20000194 	.word	0x20000194

080050fc <HAL_ADCEx_MultiModeConfigChannel>:
{
 80050fc:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80050fe:	6802      	ldr	r2, [r0, #0]
 8005100:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005104:	4840      	ldr	r0, [pc, #256]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8005106:	bf0c      	ite	eq
 8005108:	4684      	moveq	ip, r0
 800510a:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 800510e:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8005112:	2801      	cmp	r0, #1
 8005114:	d075      	beq.n	8005202 <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8005116:	2001      	movs	r0, #1
 8005118:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800511c:	6892      	ldr	r2, [r2, #8]
 800511e:	f012 0f04 	tst.w	r2, #4
 8005122:	d165      	bne.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005124:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8005128:	f012 0f04 	tst.w	r2, #4
 800512c:	d160      	bne.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800512e:	680a      	ldr	r2, [r1, #0]
 8005130:	2a00      	cmp	r2, #0
 8005132:	d036      	beq.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
{
 8005134:	b410      	push	{r4}
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005136:	4835      	ldr	r0, [pc, #212]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8005138:	6882      	ldr	r2, [r0, #8]
 800513a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800513e:	684c      	ldr	r4, [r1, #4]
 8005140:	4322      	orrs	r2, r4
 8005142:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 8005146:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800514a:	6082      	str	r2, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	6882      	ldr	r2, [r0, #8]
 8005150:	f002 0203 	and.w	r2, r2, #3
 8005154:	2a01      	cmp	r2, #1
 8005156:	d017      	beq.n	8005188 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005158:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800515c:	f002 0203 	and.w	r2, r2, #3
 8005160:	2a01      	cmp	r2, #1
 8005162:	d017      	beq.n	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005164:	4c29      	ldr	r4, [pc, #164]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8005166:	68a0      	ldr	r0, [r4, #8]
 8005168:	680a      	ldr	r2, [r1, #0]
 800516a:	6889      	ldr	r1, [r1, #8]
 800516c:	430a      	orrs	r2, r1
 800516e:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8005172:	f021 010f 	bic.w	r1, r1, #15
 8005176:	430a      	orrs	r2, r1
 8005178:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800517a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8005182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005186:	4770      	bx	lr
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005188:	6802      	ldr	r2, [r0, #0]
 800518a:	f012 0f01 	tst.w	r2, #1
 800518e:	d0e3      	beq.n	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005190:	2000      	movs	r0, #0
 8005192:	e7f3      	b.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x80>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005194:	f8dc 2000 	ldr.w	r2, [ip]
 8005198:	f012 0f01 	tst.w	r2, #1
 800519c:	d0e2      	beq.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800519e:	2000      	movs	r0, #0
 80051a0:	e7ec      	b.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x80>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051a2:	491a      	ldr	r1, [pc, #104]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80051a4:	688a      	ldr	r2, [r1, #8]
 80051a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051aa:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	688a      	ldr	r2, [r1, #8]
 80051b0:	f002 0203 	and.w	r2, r2, #3
 80051b4:	2a01      	cmp	r2, #1
 80051b6:	d00e      	beq.n	80051d6 <HAL_ADCEx_MultiModeConfigChannel+0xda>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80051b8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80051bc:	f002 0203 	and.w	r2, r2, #3
 80051c0:	2a01      	cmp	r2, #1
 80051c2:	d00e      	beq.n	80051e2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80051c4:	4911      	ldr	r1, [pc, #68]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80051c6:	688a      	ldr	r2, [r1, #8]
 80051c8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80051cc:	f022 020f 	bic.w	r2, r2, #15
 80051d0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d2:	2000      	movs	r0, #0
 80051d4:	e011      	b.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051d6:	680a      	ldr	r2, [r1, #0]
 80051d8:	f012 0f01 	tst.w	r2, #1
 80051dc:	d0ec      	beq.n	80051b8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051de:	2000      	movs	r0, #0
 80051e0:	e00b      	b.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80051e2:	f8dc 2000 	ldr.w	r2, [ip]
 80051e6:	f012 0f01 	tst.w	r2, #1
 80051ea:	d0eb      	beq.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ec:	2000      	movs	r0, #0
 80051ee:	e004      	b.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f2:	f042 0220 	orr.w	r2, r2, #32
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80051f8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8005200:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8005202:	2002      	movs	r0, #2
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	50000100 	.word	0x50000100
 800520c:	50000300 	.word	0x50000300

08005210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005210:	4907      	ldr	r1, [pc, #28]	; (8005230 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005212:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005214:	0203      	lsls	r3, r0, #8
 8005216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800521e:	0412      	lsls	r2, r2, #16
 8005220:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800522c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800522e:	4770      	bx	lr
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005234:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <HAL_NVIC_SetPriority+0x64>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800523e:	f1c3 0c07 	rsb	ip, r3, #7
 8005242:	f1bc 0f04 	cmp.w	ip, #4
 8005246:	bf28      	it	cs
 8005248:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524c:	f103 0e04 	add.w	lr, r3, #4
 8005250:	f1be 0f06 	cmp.w	lr, #6
 8005254:	bf8c      	ite	hi
 8005256:	3b03      	subhi	r3, #3
 8005258:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525a:	f04f 3eff 	mov.w	lr, #4294967295
 800525e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005262:	ea21 010c 	bic.w	r1, r1, ip
 8005266:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005268:	fa0e fe03 	lsl.w	lr, lr, r3
 800526c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005270:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005272:	2800      	cmp	r0, #0
 8005274:	db09      	blt.n	800528a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005276:	0109      	lsls	r1, r1, #4
 8005278:	b2c9      	uxtb	r1, r1
 800527a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800527e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005282:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005286:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528a:	f000 000f 	and.w	r0, r0, #15
 800528e:	0109      	lsls	r1, r1, #4
 8005290:	b2c9      	uxtb	r1, r1
 8005292:	4b02      	ldr	r3, [pc, #8]	; (800529c <HAL_NVIC_SetPriority+0x68>)
 8005294:	5419      	strb	r1, [r3, r0]
 8005296:	e7f6      	b.n	8005286 <HAL_NVIC_SetPriority+0x52>
 8005298:	e000ed00 	.word	0xe000ed00
 800529c:	e000ed14 	.word	0xe000ed14

080052a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80052a0:	2800      	cmp	r0, #0
 80052a2:	db07      	blt.n	80052b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052a4:	0941      	lsrs	r1, r0, #5
 80052a6:	f000 001f 	and.w	r0, r0, #31
 80052aa:	2301      	movs	r3, #1
 80052ac:	4083      	lsls	r3, r0
 80052ae:	4a02      	ldr	r2, [pc, #8]	; (80052b8 <HAL_NVIC_EnableIRQ+0x18>)
 80052b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	e000e100 	.word	0xe000e100

080052bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052bc:	3801      	subs	r0, #1
 80052be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80052c2:	d20b      	bcs.n	80052dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80052c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ca:	4a05      	ldr	r2, [pc, #20]	; (80052e0 <HAL_SYSTICK_Config+0x24>)
 80052cc:	21f0      	movs	r1, #240	; 0xf0
 80052ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052d2:	2000      	movs	r0, #0
 80052d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052d6:	2207      	movs	r2, #7
 80052d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80052dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80052de:	4770      	bx	lr
 80052e0:	e000ed00 	.word	0xe000ed00

080052e4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d02e      	beq.n	8005346 <HAL_DMA_Init+0x62>
{ 
 80052e8:	b410      	push	{r4}
 80052ea:	4603      	mov	r3, r0
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052ec:	2202      	movs	r2, #2
 80052ee:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052f2:	6800      	ldr	r0, [r0, #0]
 80052f4:	6801      	ldr	r1, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80052f6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 80052fa:	f021 0130 	bic.w	r1, r1, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	689c      	ldr	r4, [r3, #8]
 8005302:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005304:	68dc      	ldr	r4, [r3, #12]
 8005306:	4322      	orrs	r2, r4
 8005308:	691c      	ldr	r4, [r3, #16]
 800530a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	695c      	ldr	r4, [r3, #20]
 800530e:	4322      	orrs	r2, r4
 8005310:	699c      	ldr	r4, [r3, #24]
 8005312:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005314:	69dc      	ldr	r4, [r3, #28]
 8005316:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8005318:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800531a:	6002      	str	r2, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <HAL_DMA_Init+0x68>)
 8005320:	440a      	add	r2, r1
 8005322:	490b      	ldr	r1, [pc, #44]	; (8005350 <HAL_DMA_Init+0x6c>)
 8005324:	fba1 1202 	umull	r1, r2, r1, r2
 8005328:	0912      	lsrs	r2, r2, #4
 800532a:	0092      	lsls	r2, r2, #2
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <HAL_DMA_Init+0x70>)
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005332:	2000      	movs	r0, #0
 8005334:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800533c:	f883 0020 	strb.w	r0, [r3, #32]
}  
 8005340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005344:	4770      	bx	lr
    return HAL_ERROR;
 8005346:	2001      	movs	r0, #1
}  
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	bffdfff8 	.word	0xbffdfff8
 8005350:	cccccccd 	.word	0xcccccccd
 8005354:	40020000 	.word	0x40020000

08005358 <HAL_DMA_Start_IT>:
  __HAL_LOCK(hdma);
 8005358:	f890 c020 	ldrb.w	ip, [r0, #32]
 800535c:	f1bc 0f01 	cmp.w	ip, #1
 8005360:	d045      	beq.n	80053ee <HAL_DMA_Start_IT+0x96>
 8005362:	f04f 0c01 	mov.w	ip, #1
 8005366:	f880 c020 	strb.w	ip, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800536a:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 800536e:	f1bc 0f01 	cmp.w	ip, #1
 8005372:	d004      	beq.n	800537e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8005374:	2300      	movs	r3, #0
 8005376:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800537a:	2002      	movs	r0, #2
 800537c:	4770      	bx	lr
{
 800537e:	b470      	push	{r4, r5, r6}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005380:	2402      	movs	r4, #2
 8005382:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005386:	2400      	movs	r4, #0
 8005388:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800538a:	6805      	ldr	r5, [r0, #0]
 800538c:	682c      	ldr	r4, [r5, #0]
 800538e:	f024 0401 	bic.w	r4, r4, #1
 8005392:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005394:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8005396:	2401      	movs	r4, #1
 8005398:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800539a:	40b4      	lsls	r4, r6
 800539c:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 800539e:	6804      	ldr	r4, [r0, #0]
 80053a0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a2:	6843      	ldr	r3, [r0, #4]
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d012      	beq.n	80053ce <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = SrcAddress;
 80053a8:	6803      	ldr	r3, [r0, #0]
 80053aa:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80053b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80053b2:	b18b      	cbz	r3, 80053d8 <HAL_DMA_Start_IT+0x80>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053b4:	6802      	ldr	r2, [r0, #0]
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	f043 030e 	orr.w	r3, r3, #14
 80053bc:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	6813      	ldr	r3, [r2, #0]
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2000      	movs	r0, #0
} 
 80053ca:	bc70      	pop	{r4, r5, r6}
 80053cc:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80053ce:	6803      	ldr	r3, [r0, #0]
 80053d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80053d2:	6803      	ldr	r3, [r0, #0]
 80053d4:	60d9      	str	r1, [r3, #12]
 80053d6:	e7eb      	b.n	80053b0 <HAL_DMA_Start_IT+0x58>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80053d8:	6802      	ldr	r2, [r0, #0]
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	f043 030a 	orr.w	r3, r3, #10
 80053e0:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80053e2:	6802      	ldr	r2, [r0, #0]
 80053e4:	6813      	ldr	r3, [r2, #0]
 80053e6:	f023 0304 	bic.w	r3, r3, #4
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e7e7      	b.n	80053be <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 80053ee:	2002      	movs	r0, #2
} 
 80053f0:	4770      	bx	lr

080053f2 <HAL_DMA_Abort_IT>:
{  
 80053f2:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80053f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d003      	beq.n	8005404 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053fc:	2304      	movs	r3, #4
 80053fe:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005400:	2001      	movs	r0, #1
}
 8005402:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005404:	6802      	ldr	r2, [r0, #0]
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	f023 030e 	bic.w	r3, r3, #14
 800540c:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800540e:	6802      	ldr	r2, [r0, #0]
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005418:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800541a:	2201      	movs	r2, #1
 800541c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005424:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005428:	2300      	movs	r3, #0
 800542a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800542e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005430:	b113      	cbz	r3, 8005438 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8005432:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2000      	movs	r0, #0
 8005436:	e7e4      	b.n	8005402 <HAL_DMA_Abort_IT+0x10>
 8005438:	2000      	movs	r0, #0
 800543a:	e7e2      	b.n	8005402 <HAL_DMA_Abort_IT+0x10>

0800543c <HAL_DMA_IRQHandler>:
{
 800543c:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800543e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005440:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005442:	6804      	ldr	r4, [r0, #0]
 8005444:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005446:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005448:	2304      	movs	r3, #4
 800544a:	408b      	lsls	r3, r1
 800544c:	4213      	tst	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_DMA_IRQHandler+0x3c>
 8005450:	f015 0f04 	tst.w	r5, #4
 8005454:	d010      	beq.n	8005478 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	f013 0f20 	tst.w	r3, #32
 800545c:	d103      	bne.n	8005466 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005466:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005468:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800546a:	2304      	movs	r3, #4
 800546c:	408b      	lsls	r3, r1
 800546e:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8005470:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005472:	b103      	cbz	r3, 8005476 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8005474:	4798      	blx	r3
}  
 8005476:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005478:	2302      	movs	r3, #2
 800547a:	408b      	lsls	r3, r1
 800547c:	4213      	tst	r3, r2
 800547e:	d01a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x7a>
 8005480:	f015 0f02 	tst.w	r5, #2
 8005484:	d017      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f013 0f20 	tst.w	r3, #32
 800548c:	d106      	bne.n	800549c <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	f023 030a 	bic.w	r3, r3, #10
 8005494:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8005496:	2301      	movs	r3, #1
 8005498:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800549c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800549e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80054a0:	2302      	movs	r3, #2
 80054a2:	408b      	lsls	r3, r1
 80054a4:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80054a6:	2300      	movs	r3, #0
 80054a8:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80054ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0e1      	beq.n	8005476 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 80054b2:	4798      	blx	r3
 80054b4:	e7df      	b.n	8005476 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80054b6:	2308      	movs	r3, #8
 80054b8:	408b      	lsls	r3, r1
 80054ba:	4213      	tst	r3, r2
 80054bc:	d0db      	beq.n	8005476 <HAL_DMA_IRQHandler+0x3a>
 80054be:	f015 0f08 	tst.w	r5, #8
 80054c2:	d0d8      	beq.n	8005476 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f023 030e 	bic.w	r3, r3, #14
 80054ca:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80054cc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80054ce:	2301      	movs	r3, #1
 80054d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054d2:	fa03 f202 	lsl.w	r2, r3, r2
 80054d6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054d8:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80054da:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80054de:	2300      	movs	r3, #0
 80054e0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80054e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c5      	beq.n	8005476 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 80054ea:	4798      	blx	r3
}  
 80054ec:	e7c3      	b.n	8005476 <HAL_DMA_IRQHandler+0x3a>
	...

080054f0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054f0:	680b      	ldr	r3, [r1, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80c8 	beq.w	8005688 <HAL_GPIO_Init+0x198>
{
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054fe:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8005502:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005504:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005506:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800550a:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800550e:	4c5f      	ldr	r4, [pc, #380]	; (800568c <HAL_GPIO_Init+0x19c>)
 8005510:	e047      	b.n	80055a2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8005512:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005514:	fa0e fa0c 	lsl.w	sl, lr, ip
 8005518:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 800551c:	68cb      	ldr	r3, [r1, #12]
 800551e:	fa03 f30c 	lsl.w	r3, r3, ip
 8005522:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8005526:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8005528:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800552a:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800552e:	684b      	ldr	r3, [r1, #4]
 8005530:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005534:	4093      	lsls	r3, r2
 8005536:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8005538:	6043      	str	r3, [r0, #4]
 800553a:	e03d      	b.n	80055b8 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800553c:	2700      	movs	r7, #0
 800553e:	fa07 f70b 	lsl.w	r7, r7, fp
 8005542:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005546:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR;
 8005548:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 800554a:	ea6f 0709 	mvn.w	r7, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800554e:	684e      	ldr	r6, [r1, #4]
 8005550:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8005554:	bf0c      	ite	eq
 8005556:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8005558:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR = temp;
 800555c:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 800555e:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005560:	684e      	ldr	r6, [r1, #4]
 8005562:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8005566:	bf0c      	ite	eq
 8005568:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800556a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 800556e:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR;
 8005570:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005572:	684e      	ldr	r6, [r1, #4]
 8005574:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8005578:	bf0c      	ite	eq
 800557a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800557c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR = temp;
 8005580:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005582:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005584:	684e      	ldr	r6, [r1, #4]
 8005586:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 800558a:	bf0c      	ite	eq
 800558c:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800558e:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR = temp;
 8005592:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8005594:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005596:	680b      	ldr	r3, [r1, #0]
 8005598:	f10c 0c02 	add.w	ip, ip, #2
 800559c:	fa33 f702 	lsrs.w	r7, r3, r2
 80055a0:	d06f      	beq.n	8005682 <HAL_GPIO_Init+0x192>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055a2:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 80055a6:	ea17 0903 	ands.w	r9, r7, r3
 80055aa:	d0f3      	beq.n	8005594 <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055ac:	684b      	ldr	r3, [r1, #4]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d9ac      	bls.n	8005512 <HAL_GPIO_Init+0x22>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055b8:	684b      	ldr	r3, [r1, #4]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d020      	beq.n	8005604 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80055c2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80055c4:	fa0e f30c 	lsl.w	r3, lr, ip
 80055c8:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055cc:	688b      	ldr	r3, [r1, #8]
 80055ce:	fa03 f30c 	lsl.w	r3, r3, ip
 80055d2:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80055d4:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055d6:	684b      	ldr	r3, [r1, #4]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d111      	bne.n	8005604 <HAL_GPIO_Init+0x114>
        temp = GPIOx->AFR[position >> 3u];
 80055e0:	08d7      	lsrs	r7, r2, #3
 80055e2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80055e6:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055e8:	f002 0b07 	and.w	fp, r2, #7
 80055ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80055f0:	fa08 fa0b 	lsl.w	sl, r8, fp
 80055f4:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055f8:	690b      	ldr	r3, [r1, #16]
 80055fa:	fa03 f30b 	lsl.w	r3, r3, fp
 80055fe:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8005602:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8005604:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005606:	fa0e f30c 	lsl.w	r3, lr, ip
 800560a:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800560e:	684b      	ldr	r3, [r1, #4]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	fa03 f30c 	lsl.w	r3, r3, ip
 8005618:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800561a:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800561c:	684b      	ldr	r3, [r1, #4]
 800561e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005622:	d0b7      	beq.n	8005594 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005624:	4e1a      	ldr	r6, [pc, #104]	; (8005690 <HAL_GPIO_Init+0x1a0>)
 8005626:	69b3      	ldr	r3, [r6, #24]
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	61b3      	str	r3, [r6, #24]
 800562e:	69b3      	ldr	r3, [r6, #24]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005638:	f022 0303 	bic.w	r3, r2, #3
 800563c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005640:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005644:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005646:	f002 0b03 	and.w	fp, r2, #3
 800564a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800564e:	fa08 fa0b 	lsl.w	sl, r8, fp
 8005652:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005656:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800565a:	f43f af6f 	beq.w	800553c <HAL_GPIO_Init+0x4c>
 800565e:	4e0d      	ldr	r6, [pc, #52]	; (8005694 <HAL_GPIO_Init+0x1a4>)
 8005660:	42b0      	cmp	r0, r6
 8005662:	d00a      	beq.n	800567a <HAL_GPIO_Init+0x18a>
 8005664:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005668:	42b0      	cmp	r0, r6
 800566a:	d008      	beq.n	800567e <HAL_GPIO_Init+0x18e>
 800566c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005670:	42b0      	cmp	r0, r6
 8005672:	bf0c      	ite	eq
 8005674:	2703      	moveq	r7, #3
 8005676:	2705      	movne	r7, #5
 8005678:	e761      	b.n	800553e <HAL_GPIO_Init+0x4e>
 800567a:	462f      	mov	r7, r5
 800567c:	e75f      	b.n	800553e <HAL_GPIO_Init+0x4e>
 800567e:	2702      	movs	r7, #2
 8005680:	e75d      	b.n	800553e <HAL_GPIO_Init+0x4e>
  }
}
 8005682:	b003      	add	sp, #12
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010400 	.word	0x40010400
 8005690:	40021000 	.word	0x40021000
 8005694:	48000400 	.word	0x48000400

08005698 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005698:	6903      	ldr	r3, [r0, #16]
 800569a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800569c:	bf14      	ite	ne
 800569e:	2001      	movne	r0, #1
 80056a0:	2000      	moveq	r0, #0
 80056a2:	4770      	bx	lr

080056a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056a4:	b10a      	cbz	r2, 80056aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056a6:	6181      	str	r1, [r0, #24]
 80056a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80056ac:	4770      	bx	lr

080056ae <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056ae:	6803      	ldr	r3, [r0, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 80056b6:	bf1c      	itt	ne
 80056b8:	2200      	movne	r2, #0
 80056ba:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056bc:	6803      	ldr	r3, [r0, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	f012 0f01 	tst.w	r2, #1
 80056c4:	d103      	bne.n	80056ce <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	619a      	str	r2, [r3, #24]
  }
}
 80056ce:	4770      	bx	lr

080056d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056d0:	b430      	push	{r4, r5}
 80056d2:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056d4:	6805      	ldr	r5, [r0, #0]
 80056d6:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056d8:	4323      	orrs	r3, r4
 80056da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80056e2:	430b      	orrs	r3, r1
 80056e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80056e8:	0d64      	lsrs	r4, r4, #21
 80056ea:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80056ee:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80056f2:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80056f6:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80056fa:	f044 0403 	orr.w	r4, r4, #3
 80056fe:	ea20 0004 	bic.w	r0, r0, r4
 8005702:	4303      	orrs	r3, r0
 8005704:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005706:	bc30      	pop	{r4, r5}
 8005708:	4770      	bx	lr

0800570a <I2C_IsErrorOccurred>:
{
 800570a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570e:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005710:	6803      	ldr	r3, [r0, #0]
 8005712:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005714:	f016 0610 	ands.w	r6, r6, #16
 8005718:	d07d      	beq.n	8005816 <I2C_IsErrorOccurred+0x10c>
 800571a:	460d      	mov	r5, r1
 800571c:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571e:	2210      	movs	r2, #16
 8005720:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8005722:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	4637      	mov	r7, r6
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	f04f 0a20 	mov.w	sl, #32
              status = HAL_ERROR;
 800572a:	f04f 0901 	mov.w	r9, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	6993      	ldr	r3, [r2, #24]
 8005732:	f013 0f20 	tst.w	r3, #32
 8005736:	d12f      	bne.n	8005798 <I2C_IsErrorOccurred+0x8e>
 8005738:	bb8f      	cbnz	r7, 800579e <I2C_IsErrorOccurred+0x94>
      if (Timeout != HAL_MAX_DELAY)
 800573a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800573e:	d0f7      	beq.n	8005730 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005740:	f7fe fffe 	bl	8004740 <HAL_GetTick>
 8005744:	eba0 0008 	sub.w	r0, r0, r8
 8005748:	42a8      	cmp	r0, r5
 800574a:	d801      	bhi.n	8005750 <I2C_IsErrorOccurred+0x46>
 800574c:	2d00      	cmp	r5, #0
 800574e:	d1ee      	bne.n	800572e <I2C_IsErrorOccurred+0x24>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8005754:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005758:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800575a:	6991      	ldr	r1, [r2, #24]
 800575c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005760:	d004      	beq.n	800576c <I2C_IsErrorOccurred+0x62>
 8005762:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005766:	d101      	bne.n	800576c <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8005768:	2b20      	cmp	r3, #32
 800576a:	d10d      	bne.n	8005788 <I2C_IsErrorOccurred+0x7e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f013 0f20 	tst.w	r3, #32
 8005774:	d1db      	bne.n	800572e <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005776:	f7fe ffe3 	bl	8004740 <HAL_GetTick>
 800577a:	eba0 0008 	sub.w	r0, r0, r8
 800577e:	2819      	cmp	r0, #25
 8005780:	d9f4      	bls.n	800576c <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005782:	4656      	mov	r6, sl
              status = HAL_ERROR;
 8005784:	464f      	mov	r7, r9
 8005786:	e7d2      	b.n	800572e <I2C_IsErrorOccurred+0x24>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005788:	6853      	ldr	r3, [r2, #4]
 800578a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800578e:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8005790:	f7fe ffd6 	bl	8004740 <HAL_GetTick>
 8005794:	4680      	mov	r8, r0
 8005796:	e7e9      	b.n	800576c <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8005798:	b90f      	cbnz	r7, 800579e <I2C_IsErrorOccurred+0x94>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800579a:	2320      	movs	r3, #32
 800579c:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800579e:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80057a2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80057a4:	6822      	ldr	r2, [r4, #0]
 80057a6:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80057ac:	d005      	beq.n	80057ba <I2C_IsErrorOccurred+0xb0>
    error_code |= HAL_I2C_ERROR_BERR;
 80057ae:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057b6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80057b8:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80057be:	d02c      	beq.n	800581a <I2C_IsErrorOccurred+0x110>
    error_code |= HAL_I2C_ERROR_OVR;
 80057c0:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057ca:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80057d0:	d005      	beq.n	80057de <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_ARLO;
 80057d2:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057dc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff ff65 	bl	80056ae <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	6853      	ldr	r3, [r2, #4]
 80057e8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80057ec:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80057f0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80057fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057fc:	4333      	orrs	r3, r6
 80057fe:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005800:	2320      	movs	r3, #32
 8005802:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005806:	2300      	movs	r3, #0
 8005808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800580c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005810:	2001      	movs	r0, #1
}
 8005812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005816:	2000      	movs	r0, #0
 8005818:	e7c4      	b.n	80057a4 <I2C_IsErrorOccurred+0x9a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800581a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800581e:	d1d8      	bne.n	80057d2 <I2C_IsErrorOccurred+0xc8>
  if (status != HAL_OK)
 8005820:	2800      	cmp	r0, #0
 8005822:	d0f6      	beq.n	8005812 <I2C_IsErrorOccurred+0x108>
 8005824:	e7db      	b.n	80057de <I2C_IsErrorOccurred+0xd4>

08005826 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005826:	b570      	push	{r4, r5, r6, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	460d      	mov	r5, r1
 800582c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f013 0f02 	tst.w	r3, #2
 8005836:	d122      	bne.n	800587e <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005838:	4632      	mov	r2, r6
 800583a:	4629      	mov	r1, r5
 800583c:	4620      	mov	r0, r4
 800583e:	f7ff ff64 	bl	800570a <I2C_IsErrorOccurred>
 8005842:	b9f0      	cbnz	r0, 8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005844:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005848:	d0f1      	beq.n	800582e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fe ff79 	bl	8004740 <HAL_GetTick>
 800584e:	1b80      	subs	r0, r0, r6
 8005850:	42a8      	cmp	r0, r5
 8005852:	d801      	bhi.n	8005858 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005854:	2d00      	cmp	r5, #0
 8005856:	d1ea      	bne.n	800582e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f013 0f02 	tst.w	r3, #2
 8005860:	d1e5      	bne.n	800582e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005862:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005864:	f043 0320 	orr.w	r3, r3, #32
 8005868:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800586a:	2320      	movs	r3, #32
 800586c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	2300      	movs	r3, #0
 8005872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005876:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800587a:	2001      	movs	r0, #1
 800587c:	e000      	b.n	8005880 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800587e:	2000      	movs	r0, #0
}
 8005880:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005882:	2001      	movs	r0, #1
 8005884:	e7fc      	b.n	8005880 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08005886 <I2C_WaitOnFlagUntilTimeout>:
{
 8005886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588a:	4680      	mov	r8, r0
 800588c:	460e      	mov	r6, r1
 800588e:	4615      	mov	r5, r2
 8005890:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005892:	f8d8 3000 	ldr.w	r3, [r8]
 8005896:	699c      	ldr	r4, [r3, #24]
 8005898:	ea36 0404 	bics.w	r4, r6, r4
 800589c:	bf0c      	ite	eq
 800589e:	2401      	moveq	r4, #1
 80058a0:	2400      	movne	r4, #0
 80058a2:	42ac      	cmp	r4, r5
 80058a4:	d124      	bne.n	80058f0 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80058a6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80058aa:	d0f4      	beq.n	8005896 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fe ff48 	bl	8004740 <HAL_GetTick>
 80058b0:	9b06      	ldr	r3, [sp, #24]
 80058b2:	1ac0      	subs	r0, r0, r3
 80058b4:	42b8      	cmp	r0, r7
 80058b6:	d801      	bhi.n	80058bc <I2C_WaitOnFlagUntilTimeout+0x36>
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	d1ea      	bne.n	8005892 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058bc:	f8d8 3000 	ldr.w	r3, [r8]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	ea36 0303 	bics.w	r3, r6, r3
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	d1e0      	bne.n	8005892 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058d0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80058d4:	f043 0320 	orr.w	r3, r3, #32
 80058d8:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	2320      	movs	r3, #32
 80058de:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80058e8:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
          return HAL_ERROR;
 80058ec:	2001      	movs	r0, #1
 80058ee:	e000      	b.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x6c>
  return HAL_OK;
 80058f0:	2000      	movs	r0, #0
}
 80058f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80058f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058fe:	6803      	ldr	r3, [r0, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f013 0f20 	tst.w	r3, #32
 8005906:	d00b      	beq.n	8005920 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
  return HAL_OK;
 8005908:	2700      	movs	r7, #0
 800590a:	e027      	b.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	f013 0f20 	tst.w	r3, #32
 8005914:	d013      	beq.n	800593e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f013 0f20 	tst.w	r3, #32
 800591e:	d11d      	bne.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005920:	4632      	mov	r2, r6
 8005922:	4629      	mov	r1, r5
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff fef0 	bl	800570a <I2C_IsErrorOccurred>
 800592a:	4607      	mov	r7, r0
 800592c:	b9a8      	cbnz	r0, 800595a <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fe ff07 	bl	8004740 <HAL_GetTick>
 8005932:	1b80      	subs	r0, r0, r6
 8005934:	42a8      	cmp	r0, r5
 8005936:	d8e9      	bhi.n	800590c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8005938:	2d00      	cmp	r5, #0
 800593a:	d1ec      	bne.n	8005916 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
 800593c:	e7e6      	b.n	800590c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800593e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005940:	f043 0320 	orr.w	r3, r3, #32
 8005944:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005946:	2320      	movs	r3, #32
 8005948:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800594c:	2300      	movs	r3, #0
 800594e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005952:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005956:	2701      	movs	r7, #1
 8005958:	e000      	b.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      return HAL_ERROR;
 800595a:	2701      	movs	r7, #1
}
 800595c:	4638      	mov	r0, r7
 800595e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005960 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	4604      	mov	r4, r0
 8005964:	460d      	mov	r5, r1
 8005966:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005968:	6803      	ldr	r3, [r0, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f013 0f04 	tst.w	r3, #4
 8005970:	d032      	beq.n	80059d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
  return HAL_OK;
 8005972:	2700      	movs	r7, #0
 8005974:	e051      	b.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	f012 0f04 	tst.w	r2, #4
 800597c:	d002      	beq.n	8005984 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
 800597e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005980:	2a00      	cmp	r2, #0
 8005982:	d14a      	bne.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	f012 0f10 	tst.w	r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598a:	bf1d      	ittte	ne
 800598c:	2210      	movne	r2, #16
 800598e:	61da      	strne	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005990:	2304      	movne	r3, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005992:	2300      	moveq	r3, #0
 8005994:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	2220      	movs	r2, #32
 800599a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800599c:	6821      	ldr	r1, [r4, #0]
 800599e:	684b      	ldr	r3, [r1, #4]
 80059a0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80059a4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80059a8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80059bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80059c0:	2701      	movs	r7, #1
 80059c2:	e02a      	b.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f013 0f04 	tst.w	r3, #4
 80059cc:	d018      	beq.n	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f013 0f04 	tst.w	r3, #4
 80059d6:	d120      	bne.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d8:	4632      	mov	r2, r6
 80059da:	4629      	mov	r1, r5
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff fe94 	bl	800570a <I2C_IsErrorOccurred>
 80059e2:	4607      	mov	r7, r0
 80059e4:	b9c0      	cbnz	r0, 8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	f012 0f20 	tst.w	r2, #32
 80059ee:	d1c2      	bne.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f0:	f7fe fea6 	bl	8004740 <HAL_GetTick>
 80059f4:	1b80      	subs	r0, r0, r6
 80059f6:	42a8      	cmp	r0, r5
 80059f8:	d8e4      	bhi.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
 80059fa:	2d00      	cmp	r5, #0
 80059fc:	d1e7      	bne.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
 80059fe:	e7e1      	b.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a02:	f043 0320 	orr.w	r3, r3, #32
 8005a06:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a08:	2320      	movs	r3, #32
 8005a0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005a14:	2701      	movs	r7, #1
 8005a16:	e000      	b.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
      return HAL_ERROR;
 8005a18:	2701      	movs	r7, #1
}
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a1e <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d055      	beq.n	8005ace <HAL_I2C_Init+0xb0>
{
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d045      	beq.n	8005aba <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2e:	2324      	movs	r3, #36	; 0x24
 8005a30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005a34:	6822      	ldr	r2, [r4, #0]
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	6863      	ldr	r3, [r4, #4]
 8005a42:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005a46:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	6893      	ldr	r3, [r2, #8]
 8005a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a50:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a52:	68e3      	ldr	r3, [r4, #12]
 8005a54:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	68a3      	ldr	r3, [r4, #8]
 8005a5a:	bf0c      	ite	eq
 8005a5c:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a60:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8005a64:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d02b      	beq.n	8005ac4 <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	6853      	ldr	r3, [r2, #4]
 8005a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a78:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	68d3      	ldr	r3, [r2, #12]
 8005a7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a82:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6961      	ldr	r1, [r4, #20]
 8005a8a:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a8c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a92:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	69e3      	ldr	r3, [r4, #28]
 8005a98:	6a21      	ldr	r1, [r4, #32]
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	6813      	ldr	r3, [r2, #0]
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	2320      	movs	r3, #32
 8005aae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ab2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005ab8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005aba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005abe:	f7fb fdb7 	bl	8001630 <HAL_I2C_MspInit>
 8005ac2:	e7b4      	b.n	8005a2e <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	e7ce      	b.n	8005a6c <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8005ace:	2001      	movs	r0, #1
}
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_I2C_Master_Transmit>:
{
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	460f      	mov	r7, r1
 8005adc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ade:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005ae2:	b2c9      	uxtb	r1, r1
 8005ae4:	2920      	cmp	r1, #32
 8005ae6:	f040 80ab 	bne.w	8005c40 <HAL_I2C_Master_Transmit+0x16c>
 8005aea:	4604      	mov	r4, r0
 8005aec:	4690      	mov	r8, r2
 8005aee:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005af0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	f000 80a7 	beq.w	8005c48 <HAL_I2C_Master_Transmit+0x174>
 8005afa:	f04f 0a01 	mov.w	sl, #1
 8005afe:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005b02:	f7fe fe1d 	bl	8004740 <HAL_GetTick>
 8005b06:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b08:	9000      	str	r0, [sp, #0]
 8005b0a:	2319      	movs	r3, #25
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff feb7 	bl	8005886 <I2C_WaitOnFlagUntilTimeout>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f040 8097 	bne.w	8005c4c <HAL_I2C_Master_Transmit+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b1e:	2321      	movs	r3, #33	; 0x21
 8005b20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b24:	2310      	movs	r3, #16
 8005b26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005b2e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b32:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b36:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2bff      	cmp	r3, #255	; 0xff
 8005b3e:	d914      	bls.n	8005b6a <HAL_I2C_Master_Transmit+0x96>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b44:	4b45      	ldr	r3, [pc, #276]	; (8005c5c <HAL_I2C_Master_Transmit+0x188>)
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff fdbe 	bl	80056d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d055      	beq.n	8005c08 <HAL_I2C_Master_Transmit+0x134>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b5c:	f04f 0800 	mov.w	r8, #0
 8005b60:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b64:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8005b68:	e01b      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0xce>
      hi2c->XferSize = hi2c->XferCount;
 8005b6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b70:	4b3a      	ldr	r3, [pc, #232]	; (8005c5c <HAL_I2C_Master_Transmit+0x188>)
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff fda7 	bl	80056d0 <I2C_TransferConfig>
 8005b82:	e7e7      	b.n	8005b54 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8005b84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b86:	b292      	uxth	r2, r2
 8005b88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b8a:	f8cd 8000 	str.w	r8, [sp]
 8005b8e:	4653      	mov	r3, sl
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	4639      	mov	r1, r7
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff fd9b 	bl	80056d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d032      	beq.n	8005c08 <HAL_I2C_Master_Transmit+0x134>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff fe3d 	bl	8005826 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d14f      	bne.n	8005c50 <HAL_I2C_Master_Transmit+0x17c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005bbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005bc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	d0e1      	beq.n	8005b9a <HAL_I2C_Master_Transmit+0xc6>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1df      	bne.n	8005b9a <HAL_I2C_Master_Transmit+0xc6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bda:	9500      	str	r5, [sp, #0]
 8005bdc:	4633      	mov	r3, r6
 8005bde:	4642      	mov	r2, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	4620      	mov	r0, r4
 8005be4:	f7ff fe4f 	bl	8005886 <I2C_WaitOnFlagUntilTimeout>
 8005be8:	bba0      	cbnz	r0, 8005c54 <HAL_I2C_Master_Transmit+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2bff      	cmp	r3, #255	; 0xff
 8005bf0:	d9c8      	bls.n	8005b84 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf2:	22ff      	movs	r2, #255	; 0xff
 8005bf4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf6:	f8cd 8000 	str.w	r8, [sp]
 8005bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bfe:	4639      	mov	r1, r7
 8005c00:	4620      	mov	r0, r4
 8005c02:	f7ff fd65 	bl	80056d0 <I2C_TransferConfig>
 8005c06:	e7c8      	b.n	8005b9a <HAL_I2C_Master_Transmit+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7ff fe72 	bl	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c12:	bb08      	cbnz	r0, 8005c58 <HAL_I2C_Master_Transmit+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	2220      	movs	r2, #32
 8005c18:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c1a:	6821      	ldr	r1, [r4, #0]
 8005c1c:	684b      	ldr	r3, [r1, #4]
 8005c1e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005c22:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005c26:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c30:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005c3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005c3e:	e000      	b.n	8005c42 <HAL_I2C_Master_Transmit+0x16e>
    return HAL_BUSY;
 8005c40:	2002      	movs	r0, #2
}
 8005c42:	b002      	add	sp, #8
 8005c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005c48:	2002      	movs	r0, #2
 8005c4a:	e7fa      	b.n	8005c42 <HAL_I2C_Master_Transmit+0x16e>
      return HAL_ERROR;
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7f8      	b.n	8005c42 <HAL_I2C_Master_Transmit+0x16e>
        return HAL_ERROR;
 8005c50:	2001      	movs	r0, #1
 8005c52:	e7f6      	b.n	8005c42 <HAL_I2C_Master_Transmit+0x16e>
          return HAL_ERROR;
 8005c54:	2001      	movs	r0, #1
 8005c56:	e7f4      	b.n	8005c42 <HAL_I2C_Master_Transmit+0x16e>
      return HAL_ERROR;
 8005c58:	2001      	movs	r0, #1
 8005c5a:	e7f2      	b.n	8005c42 <HAL_I2C_Master_Transmit+0x16e>
 8005c5c:	80002000 	.word	0x80002000

08005c60 <HAL_I2C_Master_Receive>:
{
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	460f      	mov	r7, r1
 8005c68:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005c6e:	b2c9      	uxtb	r1, r1
 8005c70:	2920      	cmp	r1, #32
 8005c72:	f040 80ab 	bne.w	8005dcc <HAL_I2C_Master_Receive+0x16c>
 8005c76:	4604      	mov	r4, r0
 8005c78:	4690      	mov	r8, r2
 8005c7a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005c7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	f000 80a7 	beq.w	8005dd4 <HAL_I2C_Master_Receive+0x174>
 8005c86:	f04f 0a01 	mov.w	sl, #1
 8005c8a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005c8e:	f7fe fd57 	bl	8004740 <HAL_GetTick>
 8005c92:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c94:	9000      	str	r0, [sp, #0]
 8005c96:	2319      	movs	r3, #25
 8005c98:	4652      	mov	r2, sl
 8005c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f7ff fdf1 	bl	8005886 <I2C_WaitOnFlagUntilTimeout>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f040 8097 	bne.w	8005dd8 <HAL_I2C_Master_Receive+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005caa:	2322      	movs	r3, #34	; 0x22
 8005cac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005cba:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cbe:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cc2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2bff      	cmp	r3, #255	; 0xff
 8005cca:	d914      	bls.n	8005cf6 <HAL_I2C_Master_Receive+0x96>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cd0:	4b45      	ldr	r3, [pc, #276]	; (8005de8 <HAL_I2C_Master_Receive+0x188>)
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cd8:	4639      	mov	r1, r7
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff fcf8 	bl	80056d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d055      	beq.n	8005d94 <HAL_I2C_Master_Receive+0x134>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ce8:	f04f 0800 	mov.w	r8, #0
 8005cec:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cf0:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8005cf4:	e01b      	b.n	8005d2e <HAL_I2C_Master_Receive+0xce>
      hi2c->XferSize = hi2c->XferCount;
 8005cf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cfc:	4b3a      	ldr	r3, [pc, #232]	; (8005de8 <HAL_I2C_Master_Receive+0x188>)
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	4639      	mov	r1, r7
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7ff fce1 	bl	80056d0 <I2C_TransferConfig>
 8005d0e:	e7e7      	b.n	8005ce0 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8005d10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d12:	b292      	uxth	r2, r2
 8005d14:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d16:	f8cd 8000 	str.w	r8, [sp]
 8005d1a:	4653      	mov	r3, sl
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff fcd5 	bl	80056d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d032      	beq.n	8005d94 <HAL_I2C_Master_Receive+0x134>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2e:	462a      	mov	r2, r5
 8005d30:	4631      	mov	r1, r6
 8005d32:	4620      	mov	r0, r4
 8005d34:	f7ff fe14 	bl	8005960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d14f      	bne.n	8005ddc <HAL_I2C_Master_Receive+0x17c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d42:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d46:	3301      	adds	r3, #1
 8005d48:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005d4a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005d52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d54:	3a01      	subs	r2, #1
 8005d56:	b292      	uxth	r2, r2
 8005d58:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	d0e1      	beq.n	8005d26 <HAL_I2C_Master_Receive+0xc6>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1df      	bne.n	8005d26 <HAL_I2C_Master_Receive+0xc6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d66:	9500      	str	r5, [sp, #0]
 8005d68:	4633      	mov	r3, r6
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff fd89 	bl	8005886 <I2C_WaitOnFlagUntilTimeout>
 8005d74:	bba0      	cbnz	r0, 8005de0 <HAL_I2C_Master_Receive+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	d9c8      	bls.n	8005d10 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d7e:	22ff      	movs	r2, #255	; 0xff
 8005d80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d82:	f8cd 8000 	str.w	r8, [sp]
 8005d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f7ff fc9f 	bl	80056d0 <I2C_TransferConfig>
 8005d92:	e7c8      	b.n	8005d26 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d94:	462a      	mov	r2, r5
 8005d96:	4631      	mov	r1, r6
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7ff fdac 	bl	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d9e:	bb08      	cbnz	r0, 8005de4 <HAL_I2C_Master_Receive+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	2220      	movs	r2, #32
 8005da4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005da6:	6821      	ldr	r1, [r4, #0]
 8005da8:	684b      	ldr	r3, [r1, #4]
 8005daa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005dae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005db2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005dc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005dca:	e000      	b.n	8005dce <HAL_I2C_Master_Receive+0x16e>
    return HAL_BUSY;
 8005dcc:	2002      	movs	r0, #2
}
 8005dce:	b002      	add	sp, #8
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	e7fa      	b.n	8005dce <HAL_I2C_Master_Receive+0x16e>
      return HAL_ERROR;
 8005dd8:	2001      	movs	r0, #1
 8005dda:	e7f8      	b.n	8005dce <HAL_I2C_Master_Receive+0x16e>
        return HAL_ERROR;
 8005ddc:	2001      	movs	r0, #1
 8005dde:	e7f6      	b.n	8005dce <HAL_I2C_Master_Receive+0x16e>
          return HAL_ERROR;
 8005de0:	2001      	movs	r0, #1
 8005de2:	e7f4      	b.n	8005dce <HAL_I2C_Master_Receive+0x16e>
      return HAL_ERROR;
 8005de4:	2001      	movs	r0, #1
 8005de6:	e7f2      	b.n	8005dce <HAL_I2C_Master_Receive+0x16e>
 8005de8:	80002400 	.word	0x80002400

08005dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dec:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	2a20      	cmp	r2, #32
 8005df6:	d123      	bne.n	8005e40 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005df8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	d021      	beq.n	8005e44 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005e00:	2201      	movs	r2, #1
 8005e02:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	6802      	ldr	r2, [r0, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	6802      	ldr	r2, [r0, #0]
 8005e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e1e:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	6802      	ldr	r2, [r0, #0]
 8005e24:	4311      	orrs	r1, r2
 8005e26:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	680a      	ldr	r2, [r1, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e38:	2000      	movs	r0, #0
 8005e3a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005e3e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005e40:	2002      	movs	r0, #2
 8005e42:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005e44:	2002      	movs	r0, #2
  }
}
 8005e46:	4770      	bx	lr

08005e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e48:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	2a20      	cmp	r2, #32
 8005e52:	d121      	bne.n	8005e98 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e54:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005e58:	2a01      	cmp	r2, #1
 8005e5a:	d01f      	beq.n	8005e9c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e62:	2224      	movs	r2, #36	; 0x24
 8005e64:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e68:	6800      	ldr	r0, [r0, #0]
 8005e6a:	6802      	ldr	r2, [r0, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e76:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e7e:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e80:	6819      	ldr	r1, [r3, #0]
 8005e82:	680a      	ldr	r2, [r1, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e90:	2000      	movs	r0, #0
 8005e92:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005e96:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005e98:	2002      	movs	r0, #2
 8005e9a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005e9c:	2002      	movs	r0, #2
  }
}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f000 82d3 	beq.w	800644c <HAL_RCC_OscConfig+0x5ac>
{
 8005ea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eae:	6803      	ldr	r3, [r0, #0]
 8005eb0:	f013 0f01 	tst.w	r3, #1
 8005eb4:	d037      	beq.n	8005f26 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005eb6:	4bad      	ldr	r3, [pc, #692]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d01e      	beq.n	8005f00 <HAL_RCC_OscConfig+0x60>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ec2:	4baa      	ldr	r3, [pc, #680]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d013      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x56>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ece:	6863      	ldr	r3, [r4, #4]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d063      	beq.n	8005f9e <HAL_RCC_OscConfig+0xfe>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 808a 	bne.w	8005ff0 <HAL_RCC_OscConfig+0x150>
 8005edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e058      	b.n	8005fa8 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ef6:	4b9d      	ldr	r3, [pc, #628]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005efe:	d0e6      	beq.n	8005ece <HAL_RCC_OscConfig+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f04:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	4a98      	ldr	r2, [pc, #608]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005f0a:	6811      	ldr	r1, [r2, #0]
 8005f0c:	fa93 f3a3 	rbit	r3, r3
 8005f10:	fab3 f383 	clz	r3, r3
 8005f14:	2201      	movs	r2, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	420b      	tst	r3, r1
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_OscConfig+0x86>
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8295 	beq.w	8006450 <HAL_RCC_OscConfig+0x5b0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f013 0f02 	tst.w	r3, #2
 8005f2c:	f000 80bb 	beq.w	80060a6 <HAL_RCC_OscConfig+0x206>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005f30:	4b8e      	ldr	r3, [pc, #568]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f013 0f0c 	tst.w	r3, #12
 8005f38:	f000 8096 	beq.w	8006068 <HAL_RCC_OscConfig+0x1c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005f3c:	4b8b      	ldr	r3, [pc, #556]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f003 030c 	and.w	r3, r3, #12
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	f000 8089 	beq.w	800605c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80e7 	beq.w	8006120 <HAL_RCC_OscConfig+0x280>
 8005f52:	2201      	movs	r2, #1
 8005f54:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	fab3 f383 	clz	r3, r3
 8005f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fe fbea 	bl	8004740 <HAL_GetTick>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	2502      	movs	r5, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800616c <HAL_RCC_OscConfig+0x2cc>
 8005f74:	2701      	movs	r7, #1
 8005f76:	fa95 f3a5 	rbit	r3, r5
 8005f7a:	f8d8 2000 	ldr.w	r2, [r8]
 8005f7e:	fa95 f3a5 	rbit	r3, r5
 8005f82:	fab3 f383 	clz	r3, r3
 8005f86:	fa07 f303 	lsl.w	r3, r7, r3
 8005f8a:	4213      	tst	r3, r2
 8005f8c:	f040 80ba 	bne.w	8006104 <HAL_RCC_OscConfig+0x264>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fe fbd6 	bl	8004740 <HAL_GetTick>
 8005f94:	1b80      	subs	r0, r0, r6
 8005f96:	2802      	cmp	r0, #2
 8005f98:	d9ed      	bls.n	8005f76 <HAL_RCC_OscConfig+0xd6>
          {
            return HAL_TIMEOUT;
 8005f9a:	2003      	movs	r0, #3
 8005f9c:	e25d      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9e:	4a73      	ldr	r2, [pc, #460]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005fa0:	6813      	ldr	r3, [r2, #0]
 8005fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fa8:	4a70      	ldr	r2, [pc, #448]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005fac:	f023 030f 	bic.w	r3, r3, #15
 8005fb0:	68a1      	ldr	r1, [r4, #8]
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fb6:	6863      	ldr	r3, [r4, #4]
 8005fb8:	b3a3      	cbz	r3, 8006024 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005fba:	f7fe fbc1 	bl	8004740 <HAL_GetTick>
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc4:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800616c <HAL_RCC_OscConfig+0x2cc>
 8005fc8:	2701      	movs	r7, #1
 8005fca:	fa95 f3a5 	rbit	r3, r5
 8005fce:	f8d8 2000 	ldr.w	r2, [r8]
 8005fd2:	fa95 f3a5 	rbit	r3, r5
 8005fd6:	fab3 f383 	clz	r3, r3
 8005fda:	fa07 f303 	lsl.w	r3, r7, r3
 8005fde:	4213      	tst	r3, r2
 8005fe0:	d1a1      	bne.n	8005f26 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe2:	f7fe fbad 	bl	8004740 <HAL_GetTick>
 8005fe6:	1b80      	subs	r0, r0, r6
 8005fe8:	2864      	cmp	r0, #100	; 0x64
 8005fea:	d9ee      	bls.n	8005fca <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8005fec:	2003      	movs	r0, #3
 8005fee:	e234      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff4:	d009      	beq.n	800600a <HAL_RCC_OscConfig+0x16a>
 8005ff6:	4b5d      	ldr	r3, [pc, #372]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e7ce      	b.n	8005fa8 <HAL_RCC_OscConfig+0x108>
 800600a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800600e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e7c1      	b.n	8005fa8 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8006024:	f7fe fb8c 	bl	8004740 <HAL_GetTick>
 8006028:	4606      	mov	r6, r0
 800602a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800616c <HAL_RCC_OscConfig+0x2cc>
 8006032:	2701      	movs	r7, #1
 8006034:	fa95 f3a5 	rbit	r3, r5
 8006038:	f8d8 2000 	ldr.w	r2, [r8]
 800603c:	fa95 f3a5 	rbit	r3, r5
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	fa07 f303 	lsl.w	r3, r7, r3
 8006048:	4213      	tst	r3, r2
 800604a:	f43f af6c 	beq.w	8005f26 <HAL_RCC_OscConfig+0x86>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800604e:	f7fe fb77 	bl	8004740 <HAL_GetTick>
 8006052:	1b80      	subs	r0, r0, r6
 8006054:	2864      	cmp	r0, #100	; 0x64
 8006056:	d9ed      	bls.n	8006034 <HAL_RCC_OscConfig+0x194>
            return HAL_TIMEOUT;
 8006058:	2003      	movs	r0, #3
 800605a:	e1fe      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800605c:	4b43      	ldr	r3, [pc, #268]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006064:	f47f af71 	bne.w	8005f4a <HAL_RCC_OscConfig+0xaa>
 8006068:	2302      	movs	r3, #2
 800606a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606e:	4a3f      	ldr	r2, [pc, #252]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8006070:	6811      	ldr	r1, [r2, #0]
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	420b      	tst	r3, r1
 8006082:	d003      	beq.n	800608c <HAL_RCC_OscConfig+0x1ec>
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	4293      	cmp	r3, r2
 8006088:	f040 81e4 	bne.w	8006454 <HAL_RCC_OscConfig+0x5b4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	4837      	ldr	r0, [pc, #220]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 800608e:	6801      	ldr	r1, [r0, #0]
 8006090:	22f8      	movs	r2, #248	; 0xf8
 8006092:	fa92 f2a2 	rbit	r2, r2
 8006096:	fab2 f282 	clz	r2, r2
 800609a:	6963      	ldr	r3, [r4, #20]
 800609c:	4093      	lsls	r3, r2
 800609e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80060a2:	4313      	orrs	r3, r2
 80060a4:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f013 0f08 	tst.w	r3, #8
 80060ac:	f000 808a 	beq.w	80061c4 <HAL_RCC_OscConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060b0:	69a3      	ldr	r3, [r4, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d05e      	beq.n	8006174 <HAL_RCC_OscConfig+0x2d4>
 80060b6:	2101      	movs	r1, #1
 80060b8:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060bc:	fab2 f282 	clz	r2, r2
 80060c0:	4b2b      	ldr	r3, [pc, #172]	; (8006170 <HAL_RCC_OscConfig+0x2d0>)
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c8:	f7fe fb3a 	bl	8004740 <HAL_GetTick>
 80060cc:	4606      	mov	r6, r0
 80060ce:	2502      	movs	r5, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060d0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800616c <HAL_RCC_OscConfig+0x2cc>
 80060d4:	2701      	movs	r7, #1
 80060d6:	fa95 f3a5 	rbit	r3, r5
 80060da:	fa95 f3a5 	rbit	r3, r5
 80060de:	fa95 f3a5 	rbit	r3, r5
 80060e2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80060e6:	fa95 f3a5 	rbit	r3, r5
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	fa07 f303 	lsl.w	r3, r7, r3
 80060f2:	4213      	tst	r3, r2
 80060f4:	d166      	bne.n	80061c4 <HAL_RCC_OscConfig+0x324>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f6:	f7fe fb23 	bl	8004740 <HAL_GetTick>
 80060fa:	1b80      	subs	r0, r0, r6
 80060fc:	2802      	cmp	r0, #2
 80060fe:	d9ea      	bls.n	80060d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006100:	2003      	movs	r0, #3
 8006102:	e1aa      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006104:	4819      	ldr	r0, [pc, #100]	; (800616c <HAL_RCC_OscConfig+0x2cc>)
 8006106:	6801      	ldr	r1, [r0, #0]
 8006108:	22f8      	movs	r2, #248	; 0xf8
 800610a:	fa92 f2a2 	rbit	r2, r2
 800610e:	fab2 f282 	clz	r2, r2
 8006112:	6963      	ldr	r3, [r4, #20]
 8006114:	4093      	lsls	r3, r2
 8006116:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800611a:	4313      	orrs	r3, r2
 800611c:	6003      	str	r3, [r0, #0]
 800611e:	e7c2      	b.n	80060a6 <HAL_RCC_OscConfig+0x206>
 8006120:	2301      	movs	r3, #1
 8006122:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8006126:	fab3 f383 	clz	r3, r3
 800612a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800612e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006138:	f7fe fb02 	bl	8004740 <HAL_GetTick>
 800613c:	4606      	mov	r6, r0
 800613e:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006140:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800616c <HAL_RCC_OscConfig+0x2cc>
 8006144:	2701      	movs	r7, #1
 8006146:	fa95 f3a5 	rbit	r3, r5
 800614a:	f8d8 2000 	ldr.w	r2, [r8]
 800614e:	fa95 f3a5 	rbit	r3, r5
 8006152:	fab3 f383 	clz	r3, r3
 8006156:	fa07 f303 	lsl.w	r3, r7, r3
 800615a:	4213      	tst	r3, r2
 800615c:	d0a3      	beq.n	80060a6 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800615e:	f7fe faef 	bl	8004740 <HAL_GetTick>
 8006162:	1b80      	subs	r0, r0, r6
 8006164:	2802      	cmp	r0, #2
 8006166:	d9ee      	bls.n	8006146 <HAL_RCC_OscConfig+0x2a6>
            return HAL_TIMEOUT;
 8006168:	2003      	movs	r0, #3
 800616a:	e176      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
 800616c:	40021000 	.word	0x40021000
 8006170:	10908120 	.word	0x10908120
 8006174:	2201      	movs	r2, #1
 8006176:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800617a:	fab2 f282 	clz	r2, r2
 800617e:	4bb8      	ldr	r3, [pc, #736]	; (8006460 <HAL_RCC_OscConfig+0x5c0>)
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006188:	f7fe fada 	bl	8004740 <HAL_GetTick>
 800618c:	4606      	mov	r6, r0
 800618e:	2502      	movs	r5, #2
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006190:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8006464 <HAL_RCC_OscConfig+0x5c4>
 8006194:	2701      	movs	r7, #1
 8006196:	fa95 f3a5 	rbit	r3, r5
 800619a:	fa95 f3a5 	rbit	r3, r5
 800619e:	fa95 f3a5 	rbit	r3, r5
 80061a2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80061a6:	fa95 f3a5 	rbit	r3, r5
 80061aa:	fab3 f383 	clz	r3, r3
 80061ae:	fa07 f303 	lsl.w	r3, r7, r3
 80061b2:	4213      	tst	r3, r2
 80061b4:	d006      	beq.n	80061c4 <HAL_RCC_OscConfig+0x324>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061b6:	f7fe fac3 	bl	8004740 <HAL_GetTick>
 80061ba:	1b80      	subs	r0, r0, r6
 80061bc:	2802      	cmp	r0, #2
 80061be:	d9ea      	bls.n	8006196 <HAL_RCC_OscConfig+0x2f6>
        {
          return HAL_TIMEOUT;
 80061c0:	2003      	movs	r0, #3
 80061c2:	e14a      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	f013 0f04 	tst.w	r3, #4
 80061ca:	f000 809b 	beq.w	8006304 <HAL_RCC_OscConfig+0x464>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ce:	4ba5      	ldr	r3, [pc, #660]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80061d6:	d122      	bne.n	800621e <HAL_RCC_OscConfig+0x37e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d8:	4ba2      	ldr	r3, [pc, #648]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80061e0:	61da      	str	r2, [r3, #28]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80061ec:	f04f 0901 	mov.w	r9, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f0:	4b9d      	ldr	r3, [pc, #628]	; (8006468 <HAL_RCC_OscConfig+0x5c8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061f8:	d014      	beq.n	8006224 <HAL_RCC_OscConfig+0x384>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061fa:	68e3      	ldr	r3, [r4, #12]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d025      	beq.n	800624c <HAL_RCC_OscConfig+0x3ac>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d148      	bne.n	8006296 <HAL_RCC_OscConfig+0x3f6>
 8006204:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006208:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	621a      	str	r2, [r3, #32]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	621a      	str	r2, [r3, #32]
 800621c:	e01b      	b.n	8006256 <HAL_RCC_OscConfig+0x3b6>
    FlagStatus       pwrclkchanged = RESET;
 800621e:	f04f 0900 	mov.w	r9, #0
 8006222:	e7e5      	b.n	80061f0 <HAL_RCC_OscConfig+0x350>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006224:	4a90      	ldr	r2, [pc, #576]	; (8006468 <HAL_RCC_OscConfig+0x5c8>)
 8006226:	6813      	ldr	r3, [r2, #0]
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800622e:	f7fe fa87 	bl	8004740 <HAL_GetTick>
 8006232:	4605      	mov	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006234:	4e8c      	ldr	r6, [pc, #560]	; (8006468 <HAL_RCC_OscConfig+0x5c8>)
 8006236:	6833      	ldr	r3, [r6, #0]
 8006238:	f413 7f80 	tst.w	r3, #256	; 0x100
 800623c:	d1dd      	bne.n	80061fa <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623e:	f7fe fa7f 	bl	8004740 <HAL_GetTick>
 8006242:	1b40      	subs	r0, r0, r5
 8006244:	2864      	cmp	r0, #100	; 0x64
 8006246:	d9f6      	bls.n	8006236 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 8006248:	2003      	movs	r0, #3
 800624a:	e106      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800624c:	4a85      	ldr	r2, [pc, #532]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 800624e:	6a13      	ldr	r3, [r2, #32]
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	b39b      	cbz	r3, 80062c2 <HAL_RCC_OscConfig+0x422>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800625a:	f7fe fa71 	bl	8004740 <HAL_GetTick>
 800625e:	4606      	mov	r6, r0
 8006260:	2502      	movs	r5, #2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006262:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8006464 <HAL_RCC_OscConfig+0x5c4>
 8006266:	2701      	movs	r7, #1
 8006268:	fa95 f3a5 	rbit	r3, r5
 800626c:	fa95 f3a5 	rbit	r3, r5
 8006270:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8006274:	fa95 f3a5 	rbit	r3, r5
 8006278:	fab3 f383 	clz	r3, r3
 800627c:	fa07 f303 	lsl.w	r3, r7, r3
 8006280:	4213      	tst	r3, r2
 8006282:	d13c      	bne.n	80062fe <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006284:	f7fe fa5c 	bl	8004740 <HAL_GetTick>
 8006288:	1b80      	subs	r0, r0, r6
 800628a:	f241 3388 	movw	r3, #5000	; 0x1388
 800628e:	4298      	cmp	r0, r3
 8006290:	d9ea      	bls.n	8006268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006292:	2003      	movs	r0, #3
 8006294:	e0e1      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006296:	2b05      	cmp	r3, #5
 8006298:	d009      	beq.n	80062ae <HAL_RCC_OscConfig+0x40e>
 800629a:	4b72      	ldr	r3, [pc, #456]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	621a      	str	r2, [r3, #32]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	f022 0204 	bic.w	r2, r2, #4
 80062aa:	621a      	str	r2, [r3, #32]
 80062ac:	e7d3      	b.n	8006256 <HAL_RCC_OscConfig+0x3b6>
 80062ae:	4b6d      	ldr	r3, [pc, #436]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	f042 0204 	orr.w	r2, r2, #4
 80062b6:	621a      	str	r2, [r3, #32]
 80062b8:	6a1a      	ldr	r2, [r3, #32]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	621a      	str	r2, [r3, #32]
 80062c0:	e7c9      	b.n	8006256 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c2:	f7fe fa3d 	bl	8004740 <HAL_GetTick>
 80062c6:	4606      	mov	r6, r0
 80062c8:	2502      	movs	r5, #2
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ca:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8006464 <HAL_RCC_OscConfig+0x5c4>
 80062ce:	2701      	movs	r7, #1
 80062d0:	fa95 f3a5 	rbit	r3, r5
 80062d4:	fa95 f3a5 	rbit	r3, r5
 80062d8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80062dc:	fa95 f3a5 	rbit	r3, r5
 80062e0:	fab3 f383 	clz	r3, r3
 80062e4:	fa07 f303 	lsl.w	r3, r7, r3
 80062e8:	4213      	tst	r3, r2
 80062ea:	d008      	beq.n	80062fe <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ec:	f7fe fa28 	bl	8004740 <HAL_GetTick>
 80062f0:	1b80      	subs	r0, r0, r6
 80062f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80062f6:	4298      	cmp	r0, r3
 80062f8:	d9ea      	bls.n	80062d0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80062fa:	2003      	movs	r0, #3
 80062fc:	e0ad      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062fe:	f1b9 0f00 	cmp.w	r9, #0
 8006302:	d132      	bne.n	800636a <HAL_RCC_OscConfig+0x4ca>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	69e3      	ldr	r3, [r4, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80a6 	beq.w	8006458 <HAL_RCC_OscConfig+0x5b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800630c:	4a55      	ldr	r2, [pc, #340]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 800630e:	6852      	ldr	r2, [r2, #4]
 8006310:	f002 020c 	and.w	r2, r2, #12
 8006314:	2a08      	cmp	r2, #8
 8006316:	f000 8089 	beq.w	800642c <HAL_RCC_OscConfig+0x58c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631a:	2b02      	cmp	r3, #2
 800631c:	d02b      	beq.n	8006376 <HAL_RCC_OscConfig+0x4d6>
 800631e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006322:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006326:	fab3 f383 	clz	r3, r3
 800632a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800632e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fe fa02 	bl	8004740 <HAL_GetTick>
 800633c:	4605      	mov	r5, r0
 800633e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006342:	4f48      	ldr	r7, [pc, #288]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 8006344:	2601      	movs	r6, #1
 8006346:	fa94 f3a4 	rbit	r3, r4
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	fa94 f3a4 	rbit	r3, r4
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	fa06 f303 	lsl.w	r3, r6, r3
 8006358:	4213      	tst	r3, r2
 800635a:	d065      	beq.n	8006428 <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635c:	f7fe f9f0 	bl	8004740 <HAL_GetTick>
 8006360:	1b40      	subs	r0, r0, r5
 8006362:	2802      	cmp	r0, #2
 8006364:	d9ef      	bls.n	8006346 <HAL_RCC_OscConfig+0x4a6>
          {
            return HAL_TIMEOUT;
 8006366:	2003      	movs	r0, #3
 8006368:	e077      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_PWR_CLK_DISABLE();
 800636a:	4a3e      	ldr	r2, [pc, #248]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 800636c:	69d3      	ldr	r3, [r2, #28]
 800636e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006372:	61d3      	str	r3, [r2, #28]
 8006374:	e7c6      	b.n	8006304 <HAL_RCC_OscConfig+0x464>
 8006376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800637a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800637e:	fab3 f383 	clz	r3, r3
 8006382:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006386:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006390:	f7fe f9d6 	bl	8004740 <HAL_GetTick>
 8006394:	4606      	mov	r6, r0
 8006396:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800639a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8006464 <HAL_RCC_OscConfig+0x5c4>
 800639e:	2701      	movs	r7, #1
 80063a0:	fa95 f3a5 	rbit	r3, r5
 80063a4:	f8d8 2000 	ldr.w	r2, [r8]
 80063a8:	fa95 f3a5 	rbit	r3, r5
 80063ac:	fab3 f383 	clz	r3, r3
 80063b0:	fa07 f303 	lsl.w	r3, r7, r3
 80063b4:	4213      	tst	r3, r2
 80063b6:	d006      	beq.n	80063c6 <HAL_RCC_OscConfig+0x526>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fe f9c2 	bl	8004740 <HAL_GetTick>
 80063bc:	1b80      	subs	r0, r0, r6
 80063be:	2802      	cmp	r0, #2
 80063c0:	d9ee      	bls.n	80063a0 <HAL_RCC_OscConfig+0x500>
            return HAL_TIMEOUT;
 80063c2:	2003      	movs	r0, #3
 80063c4:	e049      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063c6:	4927      	ldr	r1, [pc, #156]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 80063c8:	684a      	ldr	r2, [r1, #4]
 80063ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063cc:	6a20      	ldr	r0, [r4, #32]
 80063ce:	4303      	orrs	r3, r0
 80063d0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
 80063d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063dc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80063e0:	fab3 f383 	clz	r3, r3
 80063e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80063f2:	f7fe f9a5 	bl	8004740 <HAL_GetTick>
 80063f6:	4605      	mov	r5, r0
 80063f8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063fc:	4f19      	ldr	r7, [pc, #100]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 80063fe:	2601      	movs	r6, #1
 8006400:	fa94 f3a4 	rbit	r3, r4
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	fa94 f3a4 	rbit	r3, r4
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	fa06 f303 	lsl.w	r3, r6, r3
 8006412:	4213      	tst	r3, r2
 8006414:	d106      	bne.n	8006424 <HAL_RCC_OscConfig+0x584>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006416:	f7fe f993 	bl	8004740 <HAL_GetTick>
 800641a:	1b40      	subs	r0, r0, r5
 800641c:	2802      	cmp	r0, #2
 800641e:	d9ef      	bls.n	8006400 <HAL_RCC_OscConfig+0x560>
            return HAL_TIMEOUT;
 8006420:	2003      	movs	r0, #3
 8006422:	e01a      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
        }
      }
    }
  }

  return HAL_OK;
 8006424:	2000      	movs	r0, #0
 8006426:	e018      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
 8006428:	2000      	movs	r0, #0
 800642a:	e016      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800642c:	2b01      	cmp	r3, #1
 800642e:	d01d      	beq.n	800646c <HAL_RCC_OscConfig+0x5cc>
        pll_config = RCC->CFGR;
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <HAL_RCC_OscConfig+0x5c4>)
 8006432:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006434:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006438:	6a22      	ldr	r2, [r4, #32]
 800643a:	4291      	cmp	r1, r2
 800643c:	d118      	bne.n	8006470 <HAL_RCC_OscConfig+0x5d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800643e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006442:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8006444:	1a18      	subs	r0, r3, r0
 8006446:	bf18      	it	ne
 8006448:	2001      	movne	r0, #1
 800644a:	e006      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
 800644c:	2001      	movs	r0, #1
}
 800644e:	4770      	bx	lr
        return HAL_ERROR;
 8006450:	2001      	movs	r0, #1
 8006452:	e002      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
        return HAL_ERROR;
 8006454:	2001      	movs	r0, #1
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
  return HAL_OK;
 8006458:	2000      	movs	r0, #0
}
 800645a:	b003      	add	sp, #12
 800645c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006460:	10908120 	.word	0x10908120
 8006464:	40021000 	.word	0x40021000
 8006468:	40007000 	.word	0x40007000
        return HAL_ERROR;
 800646c:	2001      	movs	r0, #1
 800646e:	e7f4      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>
          return HAL_ERROR;
 8006470:	2001      	movs	r0, #1
 8006472:	e7f2      	b.n	800645a <HAL_RCC_OscConfig+0x5ba>

08006474 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8006474:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006476:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006478:	f003 020c 	and.w	r2, r3, #12
 800647c:	2a08      	cmp	r2, #8
 800647e:	d001      	beq.n	8006484 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006480:	4814      	ldr	r0, [pc, #80]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006482:	4770      	bx	lr
 8006484:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006488:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800648c:	fab2 f282 	clz	r2, r2
 8006490:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8006494:	fa21 f202 	lsr.w	r2, r1, r2
 8006498:	490f      	ldr	r1, [pc, #60]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x64>)
 800649a:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800649c:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800649e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80064a0:	220f      	movs	r2, #15
 80064a2:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80064a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80064aa:	d00c      	beq.n	80064c6 <HAL_RCC_GetSysClockFreq+0x52>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80064ac:	fab2 f282 	clz	r2, r2
 80064b0:	f001 010f 	and.w	r1, r1, #15
 80064b4:	40d1      	lsrs	r1, r2
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <HAL_RCC_GetSysClockFreq+0x68>)
 80064b8:	5c5a      	ldrb	r2, [r3, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x60>)
 80064bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064c0:	fb03 f000 	mul.w	r0, r3, r0
 80064c4:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80064c8:	fb03 f000 	mul.w	r0, r3, r0
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000
 80064d4:	007a1200 	.word	0x007a1200
 80064d8:	08008ecc 	.word	0x08008ecc
 80064dc:	08008edc 	.word	0x08008edc
 80064e0:	003d0900 	.word	0x003d0900

080064e4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f000 80b4 	beq.w	8006652 <HAL_RCC_ClockConfig+0x16e>
{
 80064ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ee:	460d      	mov	r5, r1
 80064f0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f2:	4b5c      	ldr	r3, [pc, #368]	; (8006664 <HAL_RCC_ClockConfig+0x180>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	428b      	cmp	r3, r1
 80064fc:	d20b      	bcs.n	8006516 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fe:	4a59      	ldr	r2, [pc, #356]	; (8006664 <HAL_RCC_ClockConfig+0x180>)
 8006500:	6813      	ldr	r3, [r2, #0]
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	430b      	orrs	r3, r1
 8006508:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	6813      	ldr	r3, [r2, #0]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	428b      	cmp	r3, r1
 8006512:	f040 80a0 	bne.w	8006656 <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f013 0f02 	tst.w	r3, #2
 800651c:	d006      	beq.n	800652c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800651e:	4a52      	ldr	r2, [pc, #328]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 8006520:	6853      	ldr	r3, [r2, #4]
 8006522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006526:	68a1      	ldr	r1, [r4, #8]
 8006528:	430b      	orrs	r3, r1
 800652a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f013 0f01 	tst.w	r3, #1
 8006532:	d04e      	beq.n	80065d2 <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006534:	6862      	ldr	r2, [r4, #4]
 8006536:	2a01      	cmp	r2, #1
 8006538:	d029      	beq.n	800658e <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800653a:	2a02      	cmp	r2, #2
 800653c:	d038      	beq.n	80065b0 <HAL_RCC_ClockConfig+0xcc>
 800653e:	2302      	movs	r3, #2
 8006540:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006544:	4948      	ldr	r1, [pc, #288]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 8006546:	6808      	ldr	r0, [r1, #0]
 8006548:	fa93 f3a3 	rbit	r3, r3
 800654c:	fab3 f383 	clz	r3, r3
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	4203      	tst	r3, r0
 8006558:	d07f      	beq.n	800665a <HAL_RCC_ClockConfig+0x176>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800655a:	4943      	ldr	r1, [pc, #268]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 800655c:	684b      	ldr	r3, [r1, #4]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8006566:	f7fe f8eb 	bl	8004740 <HAL_GetTick>
 800656a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656c:	4f3e      	ldr	r7, [pc, #248]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800656e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	6862      	ldr	r2, [r4, #4]
 800657a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800657e:	d028      	beq.n	80065d2 <HAL_RCC_ClockConfig+0xee>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006580:	f7fe f8de 	bl	8004740 <HAL_GetTick>
 8006584:	1b80      	subs	r0, r0, r6
 8006586:	4540      	cmp	r0, r8
 8006588:	d9f3      	bls.n	8006572 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800658a:	2003      	movs	r0, #3
 800658c:	e05f      	b.n	800664e <HAL_RCC_ClockConfig+0x16a>
 800658e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006592:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006596:	4934      	ldr	r1, [pc, #208]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 8006598:	6808      	ldr	r0, [r1, #0]
 800659a:	fa93 f3a3 	rbit	r3, r3
 800659e:	fab3 f383 	clz	r3, r3
 80065a2:	2101      	movs	r1, #1
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	4203      	tst	r3, r0
 80065aa:	d1d6      	bne.n	800655a <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 80065ac:	2001      	movs	r0, #1
 80065ae:	e04e      	b.n	800664e <HAL_RCC_ClockConfig+0x16a>
 80065b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065b4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b8:	492b      	ldr	r1, [pc, #172]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 80065ba:	6808      	ldr	r0, [r1, #0]
 80065bc:	fa93 f3a3 	rbit	r3, r3
 80065c0:	fab3 f383 	clz	r3, r3
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	4203      	tst	r3, r0
 80065cc:	d1c5      	bne.n	800655a <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 80065ce:	2001      	movs	r0, #1
 80065d0:	e03d      	b.n	800664e <HAL_RCC_ClockConfig+0x16a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <HAL_RCC_ClockConfig+0x180>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	42ab      	cmp	r3, r5
 80065dc:	d90a      	bls.n	80065f4 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065de:	4a21      	ldr	r2, [pc, #132]	; (8006664 <HAL_RCC_ClockConfig+0x180>)
 80065e0:	6813      	ldr	r3, [r2, #0]
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	432b      	orrs	r3, r5
 80065e8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	6813      	ldr	r3, [r2, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	42ab      	cmp	r3, r5
 80065f2:	d134      	bne.n	800665e <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	f013 0f04 	tst.w	r3, #4
 80065fa:	d006      	beq.n	800660a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 80065fe:	6853      	ldr	r3, [r2, #4]
 8006600:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006604:	68e1      	ldr	r1, [r4, #12]
 8006606:	430b      	orrs	r3, r1
 8006608:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f013 0f08 	tst.w	r3, #8
 8006610:	d007      	beq.n	8006622 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 8006614:	6853      	ldr	r3, [r2, #4]
 8006616:	6921      	ldr	r1, [r4, #16]
 8006618:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800661c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006620:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006622:	f7ff ff27 	bl	8006474 <HAL_RCC_GetSysClockFreq>
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <HAL_RCC_ClockConfig+0x184>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	22f0      	movs	r2, #240	; 0xf0
 800662c:	fa92 f2a2 	rbit	r2, r2
 8006630:	fab2 f282 	clz	r2, r2
 8006634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006638:	40d3      	lsrs	r3, r2
 800663a:	4a0c      	ldr	r2, [pc, #48]	; (800666c <HAL_RCC_ClockConfig+0x188>)
 800663c:	5cd3      	ldrb	r3, [r2, r3]
 800663e:	40d8      	lsrs	r0, r3
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCC_ClockConfig+0x18c>)
 8006642:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <HAL_RCC_ClockConfig+0x190>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	f7fe f836 	bl	80046b8 <HAL_InitTick>
  return HAL_OK;
 800664c:	2000      	movs	r0, #0
}
 800664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8006652:	2001      	movs	r0, #1
}
 8006654:	4770      	bx	lr
      return HAL_ERROR;
 8006656:	2001      	movs	r0, #1
 8006658:	e7f9      	b.n	800664e <HAL_RCC_ClockConfig+0x16a>
        return HAL_ERROR;
 800665a:	2001      	movs	r0, #1
 800665c:	e7f7      	b.n	800664e <HAL_RCC_ClockConfig+0x16a>
      return HAL_ERROR;
 800665e:	2001      	movs	r0, #1
 8006660:	e7f5      	b.n	800664e <HAL_RCC_ClockConfig+0x16a>
 8006662:	bf00      	nop
 8006664:	40022000 	.word	0x40022000
 8006668:	40021000 	.word	0x40021000
 800666c:	08008d40 	.word	0x08008d40
 8006670:	20000194 	.word	0x20000194
 8006674:	20000458 	.word	0x20000458

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006680:	fa92 f2a2 	rbit	r2, r2
 8006684:	fab2 f282 	clz	r2, r2
 8006688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800668c:	40d3      	lsrs	r3, r2
 800668e:	4a04      	ldr	r2, [pc, #16]	; (80066a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006690:	5cd3      	ldrb	r3, [r2, r3]
 8006692:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006694:	6810      	ldr	r0, [r2, #0]
}    
 8006696:	40d8      	lsrs	r0, r3
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
 80066a0:	08008d50 	.word	0x08008d50
 80066a4:	20000194 	.word	0x20000194

080066a8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80066b0:	fa92 f2a2 	rbit	r2, r2
 80066b4:	fab2 f282 	clz	r2, r2
 80066b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80066bc:	40d3      	lsrs	r3, r2
 80066be:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066c0:	5cd3      	ldrb	r3, [r2, r3]
 80066c2:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80066c4:	6810      	ldr	r0, [r2, #0]
} 
 80066c6:	40d8      	lsrs	r0, r3
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40021000 	.word	0x40021000
 80066d0:	08008d50 	.word	0x08008d50
 80066d4:	20000194 	.word	0x20000194

080066d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066dc:	b083      	sub	sp, #12
 80066de:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e0:	6803      	ldr	r3, [r0, #0]
 80066e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80066e6:	d044      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x9a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e8:	4b5d      	ldr	r3, [pc, #372]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80066f0:	d178      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f2:	4b5b      	ldr	r3, [pc, #364]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066fa:	61da      	str	r2, [r3, #28]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006706:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006708:	4b56      	ldr	r3, [pc, #344]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006710:	d06a      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006712:	4b53      	ldr	r3, [pc, #332]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006716:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800671a:	d021      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800671c:	6862      	ldr	r2, [r4, #4]
 800671e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006722:	429a      	cmp	r2, r3
 8006724:	d01c      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006726:	484e      	ldr	r0, [pc, #312]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006728:	6a01      	ldr	r1, [r0, #32]
 800672a:	f421 7540 	bic.w	r5, r1, #768	; 0x300
 800672e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006732:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006736:	fab2 f282 	clz	r2, r2
 800673a:	4f4b      	ldr	r7, [pc, #300]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800673c:	443a      	add	r2, r7
 800673e:	0092      	lsls	r2, r2, #2
 8006740:	f04f 0c01 	mov.w	ip, #1
 8006744:	f8c2 c000 	str.w	ip, [r2]
 8006748:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800674c:	fab3 f383 	clz	r3, r3
 8006750:	443b      	add	r3, r7
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006758:	6205      	str	r5, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800675a:	f011 0f01 	tst.w	r1, #1
 800675e:	d157      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006760:	4a3f      	ldr	r2, [pc, #252]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006762:	6a13      	ldr	r3, [r2, #32]
 8006764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006768:	6861      	ldr	r1, [r4, #4]
 800676a:	430b      	orrs	r3, r1
 800676c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800676e:	2e00      	cmp	r6, #0
 8006770:	d16d      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f013 0f01 	tst.w	r3, #1
 8006778:	d006      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800677a:	4a39      	ldr	r2, [pc, #228]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800677c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	68a1      	ldr	r1, [r4, #8]
 8006784:	430b      	orrs	r3, r1
 8006786:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f013 0f20 	tst.w	r3, #32
 800678e:	d006      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006790:	4a33      	ldr	r2, [pc, #204]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006792:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006794:	f023 0310 	bic.w	r3, r3, #16
 8006798:	68e1      	ldr	r1, [r4, #12]
 800679a:	430b      	orrs	r3, r1
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067a4:	d006      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80067a6:	4a2e      	ldr	r2, [pc, #184]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80067aa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80067ae:	6921      	ldr	r1, [r4, #16]
 80067b0:	430b      	orrs	r3, r1
 80067b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80067ba:	d006      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067bc:	4a28      	ldr	r2, [pc, #160]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80067c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c4:	6961      	ldr	r1, [r4, #20]
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80067d0:	d042      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067d2:	4a23      	ldr	r2, [pc, #140]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80067d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067da:	69a1      	ldr	r1, [r4, #24]
 80067dc:	430b      	orrs	r3, r1
 80067de:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80067e0:	2000      	movs	r0, #0
 80067e2:	e03a      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x182>
  FlagStatus       pwrclkchanged = RESET;
 80067e4:	2600      	movs	r6, #0
 80067e6:	e78f      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067e8:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80067ea:	6813      	ldr	r3, [r2, #0]
 80067ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80067f2:	f7fd ffa5 	bl	8004740 <HAL_GetTick>
 80067f6:	4605      	mov	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f8:	4f1a      	ldr	r7, [pc, #104]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006800:	d187      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006802:	f7fd ff9d 	bl	8004740 <HAL_GetTick>
 8006806:	1b40      	subs	r0, r0, r5
 8006808:	2864      	cmp	r0, #100	; 0x64
 800680a:	d9f6      	bls.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x122>
          return HAL_TIMEOUT;
 800680c:	2003      	movs	r0, #3
 800680e:	e024      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x182>
        tickstart = HAL_GetTick();
 8006810:	f7fd ff96 	bl	8004740 <HAL_GetTick>
 8006814:	4607      	mov	r7, r0
 8006816:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006818:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006860 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800681c:	f04f 0801 	mov.w	r8, #1
 8006820:	fa95 f3a5 	rbit	r3, r5
 8006824:	fa95 f3a5 	rbit	r3, r5
 8006828:	f8d9 2020 	ldr.w	r2, [r9, #32]
 800682c:	fa95 f3a5 	rbit	r3, r5
 8006830:	fab3 f383 	clz	r3, r3
 8006834:	fa08 f303 	lsl.w	r3, r8, r3
 8006838:	4213      	tst	r3, r2
 800683a:	d191      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x88>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800683c:	f7fd ff80 	bl	8004740 <HAL_GetTick>
 8006840:	1bc0      	subs	r0, r0, r7
 8006842:	f241 3388 	movw	r3, #5000	; 0x1388
 8006846:	4298      	cmp	r0, r3
 8006848:	d9ea      	bls.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
 800684a:	2003      	movs	r0, #3
 800684c:	e005      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x182>
      __HAL_RCC_PWR_CLK_DISABLE();
 800684e:	69d3      	ldr	r3, [r2, #28]
 8006850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006854:	61d3      	str	r3, [r2, #28]
 8006856:	e78c      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  return HAL_OK;
 8006858:	2000      	movs	r0, #0
}
 800685a:	b003      	add	sp, #12
 800685c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006860:	40021000 	.word	0x40021000
 8006864:	40007000 	.word	0x40007000
 8006868:	10908100 	.word	0x10908100

0800686c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686e:	6a03      	ldr	r3, [r0, #32]
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800687c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006880:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	680d      	ldr	r5, [r1, #0]
 8006886:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006888:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800688c:	688d      	ldr	r5, [r1, #8]
 800688e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006890:	4d1c      	ldr	r5, [pc, #112]	; (8006904 <TIM_OC1_SetConfig+0x98>)
 8006892:	42a8      	cmp	r0, r5
 8006894:	d012      	beq.n	80068bc <TIM_OC1_SetConfig+0x50>
 8006896:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800689a:	42a8      	cmp	r0, r5
 800689c:	d023      	beq.n	80068e6 <TIM_OC1_SetConfig+0x7a>
 800689e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068a2:	42a8      	cmp	r0, r5
 80068a4:	d026      	beq.n	80068f4 <TIM_OC1_SetConfig+0x88>
 80068a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068aa:	42a8      	cmp	r0, r5
 80068ac:	d114      	bne.n	80068d8 <TIM_OC1_SetConfig+0x6c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068ae:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b2:	68cd      	ldr	r5, [r1, #12]
 80068b4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068b6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ba:	e005      	b.n	80068c8 <TIM_OC1_SetConfig+0x5c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80068bc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80068c0:	68cd      	ldr	r5, [r1, #12]
 80068c2:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80068c4:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068c8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068cc:	698d      	ldr	r5, [r1, #24]
 80068ce:	694e      	ldr	r6, [r1, #20]
 80068d0:	ea46 0c05 	orr.w	ip, r6, r5
 80068d4:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068da:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068dc:	684a      	ldr	r2, [r1, #4]
 80068de:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	6203      	str	r3, [r0, #32]
}
 80068e2:	bc70      	pop	{r4, r5, r6}
 80068e4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80068ea:	68cd      	ldr	r5, [r1, #12]
 80068ec:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ee:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	e7e9      	b.n	80068c8 <TIM_OC1_SetConfig+0x5c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80068f4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80068f8:	68cd      	ldr	r5, [r1, #12]
 80068fa:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80068fc:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006900:	e7e2      	b.n	80068c8 <TIM_OC1_SetConfig+0x5c>
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00

08006908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800690a:	6a03      	ldr	r3, [r0, #32]
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006918:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800691c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	680d      	ldr	r5, [r1, #0]
 8006922:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006928:	688d      	ldr	r5, [r1, #8]
 800692a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800692e:	4d12      	ldr	r5, [pc, #72]	; (8006978 <TIM_OC3_SetConfig+0x70>)
 8006930:	42a8      	cmp	r0, r5
 8006932:	d00a      	beq.n	800694a <TIM_OC3_SetConfig+0x42>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006934:	4d11      	ldr	r5, [pc, #68]	; (800697c <TIM_OC3_SetConfig+0x74>)
 8006936:	42a8      	cmp	r0, r5
 8006938:	d00e      	beq.n	8006958 <TIM_OC3_SetConfig+0x50>
 800693a:	4d11      	ldr	r5, [pc, #68]	; (8006980 <TIM_OC3_SetConfig+0x78>)
 800693c:	42a8      	cmp	r0, r5
 800693e:	d00b      	beq.n	8006958 <TIM_OC3_SetConfig+0x50>
 8006940:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006944:	42a8      	cmp	r0, r5
 8006946:	d10f      	bne.n	8006968 <TIM_OC3_SetConfig+0x60>
 8006948:	e006      	b.n	8006958 <TIM_OC3_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC3NP;
 800694a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800694e:	68cd      	ldr	r5, [r1, #12]
 8006950:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006958:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800695c:	698d      	ldr	r5, [r1, #24]
 800695e:	694e      	ldr	r6, [r1, #20]
 8006960:	ea46 0c05 	orr.w	ip, r6, r5
 8006964:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800696c:	684a      	ldr	r2, [r1, #4]
 800696e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006970:	6203      	str	r3, [r0, #32]
}
 8006972:	bc70      	pop	{r4, r5, r6}
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400

08006984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006986:	6a03      	ldr	r3, [r0, #32]
 8006988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800698c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006990:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006998:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	680d      	ldr	r5, [r1, #0]
 800699e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a6:	688d      	ldr	r5, [r1, #8]
 80069a8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <TIM_OC4_SetConfig+0x60>)
 80069ae:	42a8      	cmp	r0, r5
 80069b0:	d00b      	beq.n	80069ca <TIM_OC4_SetConfig+0x46>
 80069b2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80069b6:	42a8      	cmp	r0, r5
 80069b8:	d007      	beq.n	80069ca <TIM_OC4_SetConfig+0x46>
 80069ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80069be:	42a8      	cmp	r0, r5
 80069c0:	d003      	beq.n	80069ca <TIM_OC4_SetConfig+0x46>
 80069c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80069c6:	42a8      	cmp	r0, r5
 80069c8:	d104      	bne.n	80069d4 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ca:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069ce:	694d      	ldr	r5, [r1, #20]
 80069d0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069d8:	684b      	ldr	r3, [r1, #4]
 80069da:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069dc:	6202      	str	r2, [r0, #32]
}
 80069de:	bc30      	pop	{r4, r5}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40012c00 	.word	0x40012c00

080069e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069ea:	6a03      	ldr	r3, [r0, #32]
 80069ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069f6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a00:	680d      	ldr	r5, [r1, #0]
 8006a02:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a04:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a08:	688d      	ldr	r5, [r1, #8]
 8006a0a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0e:	4d0d      	ldr	r5, [pc, #52]	; (8006a44 <TIM_OC5_SetConfig+0x5c>)
 8006a10:	42a8      	cmp	r0, r5
 8006a12:	d00b      	beq.n	8006a2c <TIM_OC5_SetConfig+0x44>
 8006a14:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006a18:	42a8      	cmp	r0, r5
 8006a1a:	d007      	beq.n	8006a2c <TIM_OC5_SetConfig+0x44>
 8006a1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a20:	42a8      	cmp	r0, r5
 8006a22:	d003      	beq.n	8006a2c <TIM_OC5_SetConfig+0x44>
 8006a24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a28:	42a8      	cmp	r0, r5
 8006a2a:	d104      	bne.n	8006a36 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a2c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a30:	694d      	ldr	r5, [r1, #20]
 8006a32:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a36:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a38:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a3a:	684b      	ldr	r3, [r1, #4]
 8006a3c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3e:	6202      	str	r2, [r0, #32]
}
 8006a40:	bc30      	pop	{r4, r5}
 8006a42:	4770      	bx	lr
 8006a44:	40012c00 	.word	0x40012c00

08006a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a4a:	6a03      	ldr	r3, [r0, #32]
 8006a4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a56:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a60:	680d      	ldr	r5, [r1, #0]
 8006a62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a66:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a6a:	688d      	ldr	r5, [r1, #8]
 8006a6c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	4d0d      	ldr	r5, [pc, #52]	; (8006aa8 <TIM_OC6_SetConfig+0x60>)
 8006a72:	42a8      	cmp	r0, r5
 8006a74:	d00b      	beq.n	8006a8e <TIM_OC6_SetConfig+0x46>
 8006a76:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006a7a:	42a8      	cmp	r0, r5
 8006a7c:	d007      	beq.n	8006a8e <TIM_OC6_SetConfig+0x46>
 8006a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a82:	42a8      	cmp	r0, r5
 8006a84:	d003      	beq.n	8006a8e <TIM_OC6_SetConfig+0x46>
 8006a86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a8a:	42a8      	cmp	r0, r5
 8006a8c:	d104      	bne.n	8006a98 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a8e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a92:	694d      	ldr	r5, [r1, #20]
 8006a94:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a9a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a9c:	684b      	ldr	r3, [r1, #4]
 8006a9e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa0:	6202      	str	r2, [r0, #32]
}
 8006aa2:	bc30      	pop	{r4, r5}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00

08006aac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006aac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d12a      	bne.n	8006b0c <HAL_TIM_Base_Start_IT+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006abc:	6802      	ldr	r2, [r0, #0]
 8006abe:	68d3      	ldr	r3, [r2, #12]
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac6:	6803      	ldr	r3, [r0, #0]
 8006ac8:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <HAL_TIM_Base_Start_IT+0x6c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d010      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x44>
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d00d      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x44>
 8006ad4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x44>
 8006adc:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d005      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af0:	6899      	ldr	r1, [r3, #8]
 8006af2:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <HAL_TIM_Base_Start_IT+0x70>)
 8006af4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af6:	2a06      	cmp	r2, #6
 8006af8:	d00a      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x64>
 8006afa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006afe:	d009      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x68>
      __HAL_TIM_ENABLE(htim);
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4770      	bx	lr
    return HAL_ERROR;
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	4770      	bx	lr
  return HAL_OK;
 8006b10:	2000      	movs	r0, #0
 8006b12:	4770      	bx	lr
 8006b14:	2000      	movs	r0, #0
}
 8006b16:	4770      	bx	lr
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	00010007 	.word	0x00010007

08006b20 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006b20:	4770      	bx	lr

08006b22 <HAL_TIM_IC_CaptureCallback>:
}
 8006b22:	4770      	bx	lr

08006b24 <TIM_DMADelayPulseCplt>:
{
 8006b24:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b26:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2a:	4283      	cmp	r3, r0
 8006b2c:	d00e      	beq.n	8006b4c <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b30:	4283      	cmp	r3, r0
 8006b32:	d014      	beq.n	8006b5e <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b36:	4283      	cmp	r3, r0
 8006b38:	d01a      	beq.n	8006b70 <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b3c:	4283      	cmp	r3, r0
 8006b3e:	d020      	beq.n	8006b82 <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7fa fa2f 	bl	8000fa4 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	2300      	movs	r3, #0
 8006b48:	7723      	strb	r3, [r4, #28]
}
 8006b4a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006b50:	6983      	ldr	r3, [r0, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f4      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	2301      	movs	r3, #1
 8006b58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006b5c:	e7f0      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006b62:	6983      	ldr	r3, [r0, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1eb      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006b6e:	e7e7      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b70:	2304      	movs	r3, #4
 8006b72:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006b74:	6983      	ldr	r3, [r0, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e2      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006b80:	e7de      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b82:	2308      	movs	r3, #8
 8006b84:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006b86:	6983      	ldr	r3, [r0, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1d9      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006b92:	e7d5      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x1c>

08006b94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8006b94:	4770      	bx	lr

08006b96 <TIM_DMADelayPulseHalfCplt>:
{
 8006b96:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b98:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9c:	4283      	cmp	r3, r0
 8006b9e:	d010      	beq.n	8006bc2 <TIM_DMADelayPulseHalfCplt+0x2c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ba0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ba2:	4283      	cmp	r3, r0
 8006ba4:	d010      	beq.n	8006bc8 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ba8:	4283      	cmp	r3, r0
 8006baa:	d010      	beq.n	8006bce <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bae:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb0:	bf04      	itt	eq
 8006bb2:	2308      	moveq	r3, #8
 8006bb4:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f7ff ffec 	bl	8006b94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	7723      	strb	r3, [r4, #28]
}
 8006bc0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	7723      	strb	r3, [r4, #28]
 8006bc6:	e7f6      	b.n	8006bb6 <TIM_DMADelayPulseHalfCplt+0x20>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	7723      	strb	r3, [r4, #28]
 8006bcc:	e7f3      	b.n	8006bb6 <TIM_DMADelayPulseHalfCplt+0x20>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bce:	2304      	movs	r3, #4
 8006bd0:	7723      	strb	r3, [r4, #28]
 8006bd2:	e7f0      	b.n	8006bb6 <TIM_DMADelayPulseHalfCplt+0x20>

08006bd4 <HAL_TIM_TriggerCallback>:
}
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_IRQHandler>:
{
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bda:	6803      	ldr	r3, [r0, #0]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	f012 0f02 	tst.w	r2, #2
 8006be2:	d011      	beq.n	8006c08 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	f012 0f02 	tst.w	r2, #2
 8006bea:	d00d      	beq.n	8006c08 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bec:	f06f 0202 	mvn.w	r2, #2
 8006bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bf6:	6803      	ldr	r3, [r0, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f013 0f03 	tst.w	r3, #3
 8006bfe:	d079      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006c00:	f7ff ff8f 	bl	8006b22 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c04:	2300      	movs	r3, #0
 8006c06:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	f012 0f04 	tst.w	r2, #4
 8006c10:	d012      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	f012 0f04 	tst.w	r2, #4
 8006c18:	d00e      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c1a:	f06f 0204 	mvn.w	r2, #4
 8006c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c20:	2302      	movs	r3, #2
 8006c22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006c2c:	d068      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f7ff ff77 	bl	8006b22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c34:	2300      	movs	r3, #0
 8006c36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	f012 0f08 	tst.w	r2, #8
 8006c40:	d012      	beq.n	8006c68 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	f012 0f08 	tst.w	r2, #8
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c4a:	f06f 0208 	mvn.w	r2, #8
 8006c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c50:	2304      	movs	r3, #4
 8006c52:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f013 0f03 	tst.w	r3, #3
 8006c5c:	d057      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7ff ff5f 	bl	8006b22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c64:	2300      	movs	r3, #0
 8006c66:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	f012 0f10 	tst.w	r2, #16
 8006c70:	d012      	beq.n	8006c98 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	f012 0f10 	tst.w	r2, #16
 8006c78:	d00e      	beq.n	8006c98 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c7a:	f06f 0210 	mvn.w	r2, #16
 8006c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c80:	2308      	movs	r3, #8
 8006c82:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006c8c:	d046      	beq.n	8006d1c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f7ff ff47 	bl	8006b22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c94:	2300      	movs	r3, #0
 8006c96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	f012 0f01 	tst.w	r2, #1
 8006ca0:	d003      	beq.n	8006caa <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	f012 0f01 	tst.w	r2, #1
 8006ca8:	d13f      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006cb2:	d003      	beq.n	8006cbc <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006cba:	d13d      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006cc4:	d003      	beq.n	8006cce <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ccc:	d13b      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cd6:	d003      	beq.n	8006ce0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cde:	d139      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	f012 0f20 	tst.w	r2, #32
 8006ce8:	d003      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	f012 0f20 	tst.w	r2, #32
 8006cf0:	d137      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x18c>
}
 8006cf2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf4:	f7ff ff14 	bl	8006b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7fa f953 	bl	8000fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006cfe:	e781      	b.n	8006c04 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7ff ff0d 	bl	8006b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7fa f94c 	bl	8000fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d0c:	e792      	b.n	8006c34 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff ff06 	bl	8006b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7fa f945 	bl	8000fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d1a:	e7a3      	b.n	8006c64 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7ff feff 	bl	8006b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7fa f93e 	bl	8000fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d28:	e7b4      	b.n	8006c94 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d2a:	f06f 0201 	mvn.w	r2, #1
 8006d2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7fa f93d 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
 8006d36:	e7b8      	b.n	8006caa <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fd19 	bl	8007776 <HAL_TIMEx_BreakCallback>
 8006d44:	e7ba      	b.n	8006cbc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 fd13 	bl	8007778 <HAL_TIMEx_Break2Callback>
 8006d52:	e7bc      	b.n	8006cce <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d58:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ff3a 	bl	8006bd4 <HAL_TIM_TriggerCallback>
 8006d60:	e7be      	b.n	8006ce0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d62:	f06f 0220 	mvn.w	r2, #32
 8006d66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fd03 	bl	8007774 <HAL_TIMEx_CommutCallback>
}
 8006d6e:	e7c0      	b.n	8006cf2 <HAL_TIM_IRQHandler+0x11c>

08006d70 <HAL_TIM_ErrorCallback>:
}
 8006d70:	4770      	bx	lr

08006d72 <TIM_DMAError>:
{
 8006d72:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d74:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d78:	4283      	cmp	r3, r0
 8006d7a:	d00c      	beq.n	8006d96 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d7e:	4283      	cmp	r3, r0
 8006d80:	d013      	beq.n	8006daa <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d84:	4283      	cmp	r3, r0
 8006d86:	d016      	beq.n	8006db6 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d8a:	4283      	cmp	r3, r0
 8006d8c:	d019      	beq.n	8006dc2 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8006d94:	e003      	b.n	8006d9e <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f7ff ffe6 	bl	8006d70 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da4:	2300      	movs	r3, #0
 8006da6:	7723      	strb	r3, [r4, #28]
}
 8006da8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006daa:	2302      	movs	r3, #2
 8006dac:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dae:	2301      	movs	r3, #1
 8006db0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006db4:	e7f3      	b.n	8006d9e <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006db6:	2304      	movs	r3, #4
 8006db8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006dc0:	e7ed      	b.n	8006d9e <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006dcc:	e7e7      	b.n	8006d9e <TIM_DMAError+0x2c>
	...

08006dd0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006dd0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd2:	4a3b      	ldr	r2, [pc, #236]	; (8006ec0 <TIM_Base_SetConfig+0xf0>)
 8006dd4:	4290      	cmp	r0, r2
 8006dd6:	d04b      	beq.n	8006e70 <TIM_Base_SetConfig+0xa0>
 8006dd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ddc:	d05e      	beq.n	8006e9c <TIM_Base_SetConfig+0xcc>
 8006dde:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006de2:	4290      	cmp	r0, r2
 8006de4:	d03f      	beq.n	8006e66 <TIM_Base_SetConfig+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8006dea:	4290      	cmp	r0, r2
 8006dec:	d011      	beq.n	8006e12 <TIM_Base_SetConfig+0x42>
 8006dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006df2:	4290      	cmp	r0, r2
 8006df4:	d01b      	beq.n	8006e2e <TIM_Base_SetConfig+0x5e>
 8006df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dfa:	4290      	cmp	r0, r2
 8006dfc:	d025      	beq.n	8006e4a <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e02:	694a      	ldr	r2, [r1, #20]
 8006e04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e08:	688b      	ldr	r3, [r1, #8]
 8006e0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e0c:	680b      	ldr	r3, [r1, #0]
 8006e0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e10:	e041      	b.n	8006e96 <TIM_Base_SetConfig+0xc6>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e16:	68ca      	ldr	r2, [r1, #12]
 8006e18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e1e:	694a      	ldr	r2, [r1, #20]
 8006e20:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	688b      	ldr	r3, [r1, #8]
 8006e26:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e28:	680b      	ldr	r3, [r1, #0]
 8006e2a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e2c:	e031      	b.n	8006e92 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e32:	68ca      	ldr	r2, [r1, #12]
 8006e34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3a:	694a      	ldr	r2, [r1, #20]
 8006e3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e40:	688b      	ldr	r3, [r1, #8]
 8006e42:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e44:	680b      	ldr	r3, [r1, #0]
 8006e46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e48:	e023      	b.n	8006e92 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e4e:	68ca      	ldr	r2, [r1, #12]
 8006e50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e56:	694a      	ldr	r2, [r1, #20]
 8006e58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5c:	688b      	ldr	r3, [r1, #8]
 8006e5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e60:	680b      	ldr	r3, [r1, #0]
 8006e62:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e64:	e015      	b.n	8006e92 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e6a:	684a      	ldr	r2, [r1, #4]
 8006e6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6e:	e019      	b.n	8006ea4 <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e74:	684a      	ldr	r2, [r1, #4]
 8006e76:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7c:	68ca      	ldr	r2, [r1, #12]
 8006e7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e84:	694a      	ldr	r2, [r1, #20]
 8006e86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e8a:	688b      	ldr	r3, [r1, #8]
 8006e8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e8e:	680b      	ldr	r3, [r1, #0]
 8006e90:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006e92:	690b      	ldr	r3, [r1, #16]
 8006e94:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006e96:	2301      	movs	r3, #1
 8006e98:	6143      	str	r3, [r0, #20]
}
 8006e9a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	684a      	ldr	r2, [r1, #4]
 8006ea2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea8:	68ca      	ldr	r2, [r1, #12]
 8006eaa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb0:	694a      	ldr	r2, [r1, #20]
 8006eb2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006eb4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb6:	688b      	ldr	r3, [r1, #8]
 8006eb8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006eba:	680b      	ldr	r3, [r1, #0]
 8006ebc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ebe:	e7ea      	b.n	8006e96 <TIM_Base_SetConfig+0xc6>
 8006ec0:	40012c00 	.word	0x40012c00

08006ec4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006ec4:	b360      	cbz	r0, 8006f20 <HAL_TIM_Base_Init+0x5c>
{
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006eca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ece:	b313      	cbz	r3, 8006f16 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006edc:	f7ff ff78 	bl	8006dd0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006eea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006eee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006ef2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006f0a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006f0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006f12:	2000      	movs	r0, #0
}
 8006f14:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006f1a:	f7fa fc07 	bl	800172c <HAL_TIM_Base_MspInit>
 8006f1e:	e7d7      	b.n	8006ed0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006f20:	2001      	movs	r0, #1
}
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006f24:	b360      	cbz	r0, 8006f80 <HAL_TIM_PWM_Init+0x5c>
{
 8006f26:	b510      	push	{r4, lr}
 8006f28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f2e:	b313      	cbz	r3, 8006f76 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	2302      	movs	r3, #2
 8006f32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f36:	4621      	mov	r1, r4
 8006f38:	f851 0b04 	ldr.w	r0, [r1], #4
 8006f3c:	f7ff ff48 	bl	8006dd0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006f4a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006f4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006f52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006f6a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006f6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006f72:	2000      	movs	r0, #0
}
 8006f74:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006f7a:	f7fa fb8f 	bl	800169c <HAL_TIM_PWM_MspInit>
 8006f7e:	e7d7      	b.n	8006f30 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006f80:	2001      	movs	r0, #1
}
 8006f82:	4770      	bx	lr

08006f84 <TIM_OC2_SetConfig>:
{
 8006f84:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f86:	6a03      	ldr	r3, [r0, #32]
 8006f88:	f023 0310 	bic.w	r3, r3, #16
 8006f8c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006f8e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f90:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f92:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	680d      	ldr	r5, [r1, #0]
 8006f9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa6:	688d      	ldr	r5, [r1, #8]
 8006fa8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fac:	4d11      	ldr	r5, [pc, #68]	; (8006ff4 <TIM_OC2_SetConfig+0x70>)
 8006fae:	42a8      	cmp	r0, r5
 8006fb0:	d00a      	beq.n	8006fc8 <TIM_OC2_SetConfig+0x44>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb2:	4d11      	ldr	r5, [pc, #68]	; (8006ff8 <TIM_OC2_SetConfig+0x74>)
 8006fb4:	42a8      	cmp	r0, r5
 8006fb6:	d00e      	beq.n	8006fd6 <TIM_OC2_SetConfig+0x52>
 8006fb8:	4d10      	ldr	r5, [pc, #64]	; (8006ffc <TIM_OC2_SetConfig+0x78>)
 8006fba:	42a8      	cmp	r0, r5
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_OC2_SetConfig+0x52>
 8006fbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006fc2:	42a8      	cmp	r0, r5
 8006fc4:	d10f      	bne.n	8006fe6 <TIM_OC2_SetConfig+0x62>
 8006fc6:	e006      	b.n	8006fd6 <TIM_OC2_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fcc:	68cd      	ldr	r5, [r1, #12]
 8006fce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fda:	698d      	ldr	r5, [r1, #24]
 8006fdc:	694e      	ldr	r6, [r1, #20]
 8006fde:	ea46 0c05 	orr.w	ip, r6, r5
 8006fe2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8006fe6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006fe8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006fea:	684a      	ldr	r2, [r1, #4]
 8006fec:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006fee:	6203      	str	r3, [r0, #32]
}
 8006ff0:	bc70      	pop	{r4, r5, r6}
 8006ff2:	4770      	bx	lr
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400

08007000 <HAL_TIM_PWM_ConfigChannel>:
{
 8007000:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007002:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007006:	2b01      	cmp	r3, #1
 8007008:	f000 8095 	beq.w	8007136 <HAL_TIM_PWM_ConfigChannel+0x136>
 800700c:	4604      	mov	r4, r0
 800700e:	460d      	mov	r5, r1
 8007010:	2301      	movs	r3, #1
 8007012:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007016:	2a14      	cmp	r2, #20
 8007018:	f200 8088 	bhi.w	800712c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800701c:	e8df f002 	tbb	[pc, r2]
 8007020:	8686860b 	.word	0x8686860b
 8007024:	8686861f 	.word	0x8686861f
 8007028:	86868634 	.word	0x86868634
 800702c:	86868648 	.word	0x86868648
 8007030:	8686865d 	.word	0x8686865d
 8007034:	71          	.byte	0x71
 8007035:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	f7ff fc18 	bl	800686c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	6993      	ldr	r3, [r2, #24]
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	6993      	ldr	r3, [r2, #24]
 800704a:	f023 0304 	bic.w	r3, r3, #4
 800704e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	6993      	ldr	r3, [r2, #24]
 8007054:	6929      	ldr	r1, [r5, #16]
 8007056:	430b      	orrs	r3, r1
 8007058:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800705a:	2000      	movs	r0, #0
      break;
 800705c:	e067      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	f7ff ff90 	bl	8006f84 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	6993      	ldr	r3, [r2, #24]
 8007068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800706c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	6993      	ldr	r3, [r2, #24]
 8007072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007076:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	6993      	ldr	r3, [r2, #24]
 800707c:	6929      	ldr	r1, [r5, #16]
 800707e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007082:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	2000      	movs	r0, #0
      break;
 8007086:	e052      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007088:	6800      	ldr	r0, [r0, #0]
 800708a:	f7ff fc3d 	bl	8006908 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	69d3      	ldr	r3, [r2, #28]
 8007092:	f043 0308 	orr.w	r3, r3, #8
 8007096:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	69d3      	ldr	r3, [r2, #28]
 800709c:	f023 0304 	bic.w	r3, r3, #4
 80070a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	69d3      	ldr	r3, [r2, #28]
 80070a6:	6929      	ldr	r1, [r5, #16]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80070ac:	2000      	movs	r0, #0
      break;
 80070ae:	e03e      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070b0:	6800      	ldr	r0, [r0, #0]
 80070b2:	f7ff fc67 	bl	8006984 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	69d3      	ldr	r3, [r2, #28]
 80070ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	69d3      	ldr	r3, [r2, #28]
 80070c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ca:	6822      	ldr	r2, [r4, #0]
 80070cc:	69d3      	ldr	r3, [r2, #28]
 80070ce:	6929      	ldr	r1, [r5, #16]
 80070d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070d4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2000      	movs	r0, #0
      break;
 80070d8:	e029      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	f7ff fc84 	bl	80069e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070e0:	6822      	ldr	r2, [r4, #0]
 80070e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070e4:	f043 0308 	orr.w	r3, r3, #8
 80070e8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070ee:	f023 0304 	bic.w	r3, r3, #4
 80070f2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070f8:	6929      	ldr	r1, [r5, #16]
 80070fa:	430b      	orrs	r3, r1
 80070fc:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80070fe:	2000      	movs	r0, #0
      break;
 8007100:	e015      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007102:	6800      	ldr	r0, [r0, #0]
 8007104:	f7ff fca0 	bl	8006a48 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007108:	6822      	ldr	r2, [r4, #0]
 800710a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800710c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007110:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800711a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007120:	6929      	ldr	r1, [r5, #16]
 8007122:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007126:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007128:	2000      	movs	r0, #0
      break;
 800712a:	e000      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800712c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800712e:	2300      	movs	r3, #0
 8007130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007134:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007136:	2002      	movs	r0, #2
 8007138:	e7fc      	b.n	8007134 <HAL_TIM_PWM_ConfigChannel+0x134>

0800713a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800713a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007140:	f04f 0c01 	mov.w	ip, #1
 8007144:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8007148:	ea23 030c 	bic.w	r3, r3, ip
 800714c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800714e:	6a03      	ldr	r3, [r0, #32]
 8007150:	408a      	lsls	r2, r1
 8007152:	431a      	orrs	r2, r3
 8007154:	6202      	str	r2, [r0, #32]
}
 8007156:	4770      	bx	lr

08007158 <HAL_TIM_PWM_Start>:
{
 8007158:	b510      	push	{r4, lr}
 800715a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800715c:	2910      	cmp	r1, #16
 800715e:	d85f      	bhi.n	8007220 <HAL_TIM_PWM_Start+0xc8>
 8007160:	e8df f001 	tbb	[pc, r1]
 8007164:	5e5e5e09 	.word	0x5e5e5e09
 8007168:	5e5e5e3e 	.word	0x5e5e5e3e
 800716c:	5e5e5e47 	.word	0x5e5e5e47
 8007170:	5e5e5e4e 	.word	0x5e5e5e4e
 8007174:	57          	.byte	0x57
 8007175:	00          	.byte	0x00
 8007176:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	f040 8099 	bne.w	80072b4 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007182:	2302      	movs	r3, #2
 8007184:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007188:	2201      	movs	r2, #1
 800718a:	6820      	ldr	r0, [r4, #0]
 800718c:	f7ff ffd5 	bl	800713a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	4a4d      	ldr	r2, [pc, #308]	; (80072c8 <HAL_TIM_PWM_Start+0x170>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00b      	beq.n	80071b0 <HAL_TIM_PWM_Start+0x58>
 8007198:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800719c:	4293      	cmp	r3, r2
 800719e:	d007      	beq.n	80071b0 <HAL_TIM_PWM_Start+0x58>
 80071a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <HAL_TIM_PWM_Start+0x58>
 80071a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d107      	bne.n	80071c0 <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 80071b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071b6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	4a43      	ldr	r2, [pc, #268]	; (80072c8 <HAL_TIM_PWM_Start+0x170>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d06b      	beq.n	8007298 <HAL_TIM_PWM_Start+0x140>
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d068      	beq.n	8007298 <HAL_TIM_PWM_Start+0x140>
 80071c6:	4a41      	ldr	r2, [pc, #260]	; (80072cc <HAL_TIM_PWM_Start+0x174>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d065      	beq.n	8007298 <HAL_TIM_PWM_Start+0x140>
 80071cc:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d061      	beq.n	8007298 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80071dc:	2000      	movs	r0, #0
 80071de:	e068      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071e0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d166      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x160>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ea:	2302      	movs	r3, #2
 80071ec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80071f0:	e7ca      	b.n	8007188 <HAL_TIM_PWM_Start+0x30>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d03d      	beq.n	8007278 <HAL_TIM_PWM_Start+0x120>
    return HAL_ERROR;
 80071fc:	2001      	movs	r0, #1
 80071fe:	e058      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007200:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007204:	b2db      	uxtb	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	bf18      	it	ne
 800720a:	2301      	movne	r3, #1
 800720c:	b16b      	cbz	r3, 800722a <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800720e:	2001      	movs	r0, #1
 8007210:	e04f      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007212:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007216:	b2db      	uxtb	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	bf18      	it	ne
 800721c:	2301      	movne	r3, #1
 800721e:	e7f5      	b.n	800720c <HAL_TIM_PWM_Start+0xb4>
 8007220:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	d148      	bne.n	80072bc <HAL_TIM_PWM_Start+0x164>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	2910      	cmp	r1, #16
 800722c:	d830      	bhi.n	8007290 <HAL_TIM_PWM_Start+0x138>
 800722e:	a301      	add	r3, pc, #4	; (adr r3, 8007234 <HAL_TIM_PWM_Start+0xdc>)
 8007230:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8007234:	08007183 	.word	0x08007183
 8007238:	08007291 	.word	0x08007291
 800723c:	08007291 	.word	0x08007291
 8007240:	08007291 	.word	0x08007291
 8007244:	080071eb 	.word	0x080071eb
 8007248:	08007291 	.word	0x08007291
 800724c:	08007291 	.word	0x08007291
 8007250:	08007291 	.word	0x08007291
 8007254:	08007279 	.word	0x08007279
 8007258:	08007291 	.word	0x08007291
 800725c:	08007291 	.word	0x08007291
 8007260:	08007291 	.word	0x08007291
 8007264:	08007281 	.word	0x08007281
 8007268:	08007291 	.word	0x08007291
 800726c:	08007291 	.word	0x08007291
 8007270:	08007291 	.word	0x08007291
 8007274:	08007289 	.word	0x08007289
 8007278:	2302      	movs	r3, #2
 800727a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800727e:	e783      	b.n	8007188 <HAL_TIM_PWM_Start+0x30>
 8007280:	2302      	movs	r3, #2
 8007282:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007286:	e77f      	b.n	8007188 <HAL_TIM_PWM_Start+0x30>
 8007288:	2302      	movs	r3, #2
 800728a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800728e:	e77b      	b.n	8007188 <HAL_TIM_PWM_Start+0x30>
 8007290:	2302      	movs	r3, #2
 8007292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007296:	e777      	b.n	8007188 <HAL_TIM_PWM_Start+0x30>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007298:	6899      	ldr	r1, [r3, #8]
 800729a:	4a0d      	ldr	r2, [pc, #52]	; (80072d0 <HAL_TIM_PWM_Start+0x178>)
 800729c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	2a06      	cmp	r2, #6
 80072a0:	d00e      	beq.n	80072c0 <HAL_TIM_PWM_Start+0x168>
 80072a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80072a6:	d00d      	beq.n	80072c4 <HAL_TIM_PWM_Start+0x16c>
      __HAL_TIM_ENABLE(htim);
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80072b0:	2000      	movs	r0, #0
}
 80072b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072b4:	2001      	movs	r0, #1
 80072b6:	e7fc      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
 80072b8:	2001      	movs	r0, #1
 80072ba:	e7fa      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
 80072bc:	2001      	movs	r0, #1
 80072be:	e7f8      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
  return HAL_OK;
 80072c0:	2000      	movs	r0, #0
 80072c2:	e7f6      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
 80072c4:	2000      	movs	r0, #0
 80072c6:	e7f4      	b.n	80072b2 <HAL_TIM_PWM_Start+0x15a>
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40000400 	.word	0x40000400
 80072d0:	00010007 	.word	0x00010007

080072d4 <HAL_TIM_PWM_Start_DMA>:
{
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	460c      	mov	r4, r1
 80072da:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80072dc:	2c10      	cmp	r4, #16
 80072de:	d834      	bhi.n	800734a <HAL_TIM_PWM_Start_DMA+0x76>
 80072e0:	e8df f004 	tbb	[pc, r4]
 80072e4:	33333309 	.word	0x33333309
 80072e8:	33333313 	.word	0x33333313
 80072ec:	3333331b 	.word	0x3333331b
 80072f0:	33333323 	.word	0x33333323
 80072f4:	2b          	.byte	0x2b
 80072f5:	00          	.byte	0x00
 80072f6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80072fa:	b2c0      	uxtb	r0, r0
 80072fc:	2802      	cmp	r0, #2
 80072fe:	bf14      	ite	ne
 8007300:	2000      	movne	r0, #0
 8007302:	2001      	moveq	r0, #1
 8007304:	b348      	cbz	r0, 800735a <HAL_TIM_PWM_Start_DMA+0x86>
    return HAL_BUSY;
 8007306:	2002      	movs	r0, #2
 8007308:	e147      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800730a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800730e:	b2c0      	uxtb	r0, r0
 8007310:	2802      	cmp	r0, #2
 8007312:	bf14      	ite	ne
 8007314:	2000      	movne	r0, #0
 8007316:	2001      	moveq	r0, #1
 8007318:	e7f4      	b.n	8007304 <HAL_TIM_PWM_Start_DMA+0x30>
 800731a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800731e:	b2c0      	uxtb	r0, r0
 8007320:	2802      	cmp	r0, #2
 8007322:	bf14      	ite	ne
 8007324:	2000      	movne	r0, #0
 8007326:	2001      	moveq	r0, #1
 8007328:	e7ec      	b.n	8007304 <HAL_TIM_PWM_Start_DMA+0x30>
 800732a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800732e:	b2c0      	uxtb	r0, r0
 8007330:	2802      	cmp	r0, #2
 8007332:	bf14      	ite	ne
 8007334:	2000      	movne	r0, #0
 8007336:	2001      	moveq	r0, #1
 8007338:	e7e4      	b.n	8007304 <HAL_TIM_PWM_Start_DMA+0x30>
 800733a:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800733e:	b2c0      	uxtb	r0, r0
 8007340:	2802      	cmp	r0, #2
 8007342:	bf14      	ite	ne
 8007344:	2000      	movne	r0, #0
 8007346:	2001      	moveq	r0, #1
 8007348:	e7dc      	b.n	8007304 <HAL_TIM_PWM_Start_DMA+0x30>
 800734a:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800734e:	b2c0      	uxtb	r0, r0
 8007350:	2802      	cmp	r0, #2
 8007352:	bf14      	ite	ne
 8007354:	2000      	movne	r0, #0
 8007356:	2001      	moveq	r0, #1
 8007358:	e7d4      	b.n	8007304 <HAL_TIM_PWM_Start_DMA+0x30>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800735a:	2c10      	cmp	r4, #16
 800735c:	d836      	bhi.n	80073cc <HAL_TIM_PWM_Start_DMA+0xf8>
 800735e:	e8df f004 	tbb	[pc, r4]
 8007362:	3509      	.short	0x3509
 8007364:	35133535 	.word	0x35133535
 8007368:	351b3535 	.word	0x351b3535
 800736c:	35233535 	.word	0x35233535
 8007370:	3535      	.short	0x3535
 8007372:	2d          	.byte	0x2d
 8007373:	00          	.byte	0x00
 8007374:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	2a01      	cmp	r2, #1
 800737c:	bf14      	ite	ne
 800737e:	2200      	movne	r2, #0
 8007380:	2201      	moveq	r2, #1
 8007382:	bb5a      	cbnz	r2, 80073dc <HAL_TIM_PWM_Start_DMA+0x108>
    return HAL_ERROR;
 8007384:	2001      	movs	r0, #1
 8007386:	e108      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007388:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	2a01      	cmp	r2, #1
 8007390:	bf14      	ite	ne
 8007392:	2200      	movne	r2, #0
 8007394:	2201      	moveq	r2, #1
 8007396:	e7f4      	b.n	8007382 <HAL_TIM_PWM_Start_DMA+0xae>
 8007398:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	2a01      	cmp	r2, #1
 80073a0:	bf14      	ite	ne
 80073a2:	2200      	movne	r2, #0
 80073a4:	2201      	moveq	r2, #1
 80073a6:	e7ec      	b.n	8007382 <HAL_TIM_PWM_Start_DMA+0xae>
 80073a8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	2a01      	cmp	r2, #1
 80073b0:	bf14      	ite	ne
 80073b2:	2200      	movne	r2, #0
 80073b4:	2201      	moveq	r2, #1
 80073b6:	b98a      	cbnz	r2, 80073dc <HAL_TIM_PWM_Start_DMA+0x108>
    return HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
 80073ba:	e0ee      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80073bc:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	2a01      	cmp	r2, #1
 80073c4:	bf14      	ite	ne
 80073c6:	2200      	movne	r2, #0
 80073c8:	2201      	moveq	r2, #1
 80073ca:	e7f4      	b.n	80073b6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80073cc:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	2a01      	cmp	r2, #1
 80073d4:	bf14      	ite	ne
 80073d6:	2200      	movne	r2, #0
 80073d8:	2201      	moveq	r2, #1
 80073da:	e7ec      	b.n	80073b6 <HAL_TIM_PWM_Start_DMA+0xe2>
    if ((pData == NULL) || (Length == 0U))
 80073dc:	2900      	cmp	r1, #0
 80073de:	f000 80d9 	beq.w	8007594 <HAL_TIM_PWM_Start_DMA+0x2c0>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80d8 	beq.w	8007598 <HAL_TIM_PWM_Start_DMA+0x2c4>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e8:	2c10      	cmp	r4, #16
 80073ea:	f200 80a2 	bhi.w	8007532 <HAL_TIM_PWM_Start_DMA+0x25e>
 80073ee:	e8df f004 	tbb	[pc, r4]
 80073f2:	a009      	.short	0xa009
 80073f4:	a050a0a0 	.word	0xa050a0a0
 80073f8:	a069a0a0 	.word	0xa069a0a0
 80073fc:	a082a0a0 	.word	0xa082a0a0
 8007400:	a0a0      	.short	0xa0a0
 8007402:	9b          	.byte	0x9b
 8007403:	00          	.byte	0x00
 8007404:	2202      	movs	r2, #2
 8007406:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800740a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800740c:	486a      	ldr	r0, [pc, #424]	; (80075b8 <HAL_TIM_PWM_Start_DMA+0x2e4>)
 800740e:	6290      	str	r0, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007410:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007412:	486a      	ldr	r0, [pc, #424]	; (80075bc <HAL_TIM_PWM_Start_DMA+0x2e8>)
 8007414:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007416:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007418:	4869      	ldr	r0, [pc, #420]	; (80075c0 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 800741a:	6310      	str	r0, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800741c:	682a      	ldr	r2, [r5, #0]
 800741e:	3234      	adds	r2, #52	; 0x34
 8007420:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007422:	f7fd ff99 	bl	8005358 <HAL_DMA_Start_IT>
 8007426:	2800      	cmp	r0, #0
 8007428:	f040 80ba 	bne.w	80075a0 <HAL_TIM_PWM_Start_DMA+0x2cc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800742c:	682a      	ldr	r2, [r5, #0]
 800742e:	68d3      	ldr	r3, [r2, #12]
 8007430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007434:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007436:	2201      	movs	r2, #1
 8007438:	4621      	mov	r1, r4
 800743a:	6828      	ldr	r0, [r5, #0]
 800743c:	f7ff fe7d 	bl	800713a <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	4a60      	ldr	r2, [pc, #384]	; (80075c4 <HAL_TIM_PWM_Start_DMA+0x2f0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00b      	beq.n	8007460 <HAL_TIM_PWM_Start_DMA+0x18c>
 8007448:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <HAL_TIM_PWM_Start_DMA+0x18c>
 8007450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <HAL_TIM_PWM_Start_DMA+0x18c>
 8007458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800745c:	4293      	cmp	r3, r2
 800745e:	d108      	bne.n	8007472 <HAL_TIM_PWM_Start_DMA+0x19e>
      __HAL_TIM_MOE_ENABLE(htim);
 8007460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007466:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	4a56      	ldr	r2, [pc, #344]	; (80075c4 <HAL_TIM_PWM_Start_DMA+0x2f0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	f000 8083 	beq.w	8007578 <HAL_TIM_PWM_Start_DMA+0x2a4>
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d07f      	beq.n	8007578 <HAL_TIM_PWM_Start_DMA+0x2a4>
 8007478:	4a53      	ldr	r2, [pc, #332]	; (80075c8 <HAL_TIM_PWM_Start_DMA+0x2f4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d07c      	beq.n	8007578 <HAL_TIM_PWM_Start_DMA+0x2a4>
 800747e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8007482:	4293      	cmp	r3, r2
 8007484:	d078      	beq.n	8007578 <HAL_TIM_PWM_Start_DMA+0x2a4>
      __HAL_TIM_ENABLE(htim);
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	2000      	movs	r0, #0
 8007490:	e083      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007492:	2202      	movs	r2, #2
 8007494:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007498:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800749a:	4847      	ldr	r0, [pc, #284]	; (80075b8 <HAL_TIM_PWM_Start_DMA+0x2e4>)
 800749c:	6290      	str	r0, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800749e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80074a0:	4846      	ldr	r0, [pc, #280]	; (80075bc <HAL_TIM_PWM_Start_DMA+0x2e8>)
 80074a2:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80074a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80074a6:	4846      	ldr	r0, [pc, #280]	; (80075c0 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 80074a8:	6310      	str	r0, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80074aa:	682a      	ldr	r2, [r5, #0]
 80074ac:	3238      	adds	r2, #56	; 0x38
 80074ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80074b0:	f7fd ff52 	bl	8005358 <HAL_DMA_Start_IT>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d175      	bne.n	80075a4 <HAL_TIM_PWM_Start_DMA+0x2d0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80074b8:	682a      	ldr	r2, [r5, #0]
 80074ba:	68d3      	ldr	r3, [r2, #12]
 80074bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074c0:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80074c2:	e7b8      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x162>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c4:	2202      	movs	r2, #2
 80074c6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074ca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80074cc:	483a      	ldr	r0, [pc, #232]	; (80075b8 <HAL_TIM_PWM_Start_DMA+0x2e4>)
 80074ce:	6290      	str	r0, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80074d2:	483a      	ldr	r0, [pc, #232]	; (80075bc <HAL_TIM_PWM_Start_DMA+0x2e8>)
 80074d4:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80074d6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80074d8:	4839      	ldr	r0, [pc, #228]	; (80075c0 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 80074da:	6310      	str	r0, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80074dc:	682a      	ldr	r2, [r5, #0]
 80074de:	323c      	adds	r2, #60	; 0x3c
 80074e0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80074e2:	f7fd ff39 	bl	8005358 <HAL_DMA_Start_IT>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d15e      	bne.n	80075a8 <HAL_TIM_PWM_Start_DMA+0x2d4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80074ea:	682a      	ldr	r2, [r5, #0]
 80074ec:	68d3      	ldr	r3, [r2, #12]
 80074ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074f2:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80074f4:	e79f      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x162>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f6:	2202      	movs	r2, #2
 80074f8:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80074fe:	482e      	ldr	r0, [pc, #184]	; (80075b8 <HAL_TIM_PWM_Start_DMA+0x2e4>)
 8007500:	6290      	str	r0, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007502:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007504:	482d      	ldr	r0, [pc, #180]	; (80075bc <HAL_TIM_PWM_Start_DMA+0x2e8>)
 8007506:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007508:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800750a:	482d      	ldr	r0, [pc, #180]	; (80075c0 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 800750c:	6310      	str	r0, [r2, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800750e:	682a      	ldr	r2, [r5, #0]
 8007510:	3240      	adds	r2, #64	; 0x40
 8007512:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007514:	f7fd ff20 	bl	8005358 <HAL_DMA_Start_IT>
 8007518:	2800      	cmp	r0, #0
 800751a:	d147      	bne.n	80075ac <HAL_TIM_PWM_Start_DMA+0x2d8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800751c:	682a      	ldr	r2, [r5, #0]
 800751e:	68d3      	ldr	r3, [r2, #12]
 8007520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007524:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007526:	e786      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x162>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007528:	2302      	movs	r3, #2
 800752a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      status = HAL_ERROR;
 800752e:	2001      	movs	r0, #1
 8007530:	e033      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007532:	2202      	movs	r2, #2
 8007534:	f885 2043 	strb.w	r2, [r5, #67]	; 0x43
  switch (Channel)
 8007538:	2c0c      	cmp	r4, #12
 800753a:	d82f      	bhi.n	800759c <HAL_TIM_PWM_Start_DMA+0x2c8>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <HAL_TIM_PWM_Start_DMA+0x270>)
 800753e:	f852 f024 	ldr.w	pc, [r2, r4, lsl #2]
 8007542:	bf00      	nop
 8007544:	0800740b 	.word	0x0800740b
 8007548:	0800759d 	.word	0x0800759d
 800754c:	0800759d 	.word	0x0800759d
 8007550:	0800759d 	.word	0x0800759d
 8007554:	08007499 	.word	0x08007499
 8007558:	0800759d 	.word	0x0800759d
 800755c:	0800759d 	.word	0x0800759d
 8007560:	0800759d 	.word	0x0800759d
 8007564:	080074cb 	.word	0x080074cb
 8007568:	0800759d 	.word	0x0800759d
 800756c:	0800759d 	.word	0x0800759d
 8007570:	0800759d 	.word	0x0800759d
 8007574:	080074fd 	.word	0x080074fd
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007578:	6899      	ldr	r1, [r3, #8]
 800757a:	4a14      	ldr	r2, [pc, #80]	; (80075cc <HAL_TIM_PWM_Start_DMA+0x2f8>)
 800757c:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757e:	2a06      	cmp	r2, #6
 8007580:	d016      	beq.n	80075b0 <HAL_TIM_PWM_Start_DMA+0x2dc>
 8007582:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007586:	d015      	beq.n	80075b4 <HAL_TIM_PWM_Start_DMA+0x2e0>
        __HAL_TIM_ENABLE(htim);
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	2000      	movs	r0, #0
 8007592:	e002      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
      return HAL_ERROR;
 8007594:	2001      	movs	r0, #1
 8007596:	e000      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
 8007598:	2001      	movs	r0, #1
}
 800759a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800759c:	2001      	movs	r0, #1
 800759e:	e7fc      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
        return HAL_ERROR;
 80075a0:	2001      	movs	r0, #1
 80075a2:	e7fa      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
        return HAL_ERROR;
 80075a4:	2001      	movs	r0, #1
 80075a6:	e7f8      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
        return HAL_ERROR;
 80075a8:	2001      	movs	r0, #1
 80075aa:	e7f6      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
        return HAL_ERROR;
 80075ac:	2001      	movs	r0, #1
 80075ae:	e7f4      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
 80075b0:	2000      	movs	r0, #0
 80075b2:	e7f2      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
 80075b4:	2000      	movs	r0, #0
 80075b6:	e7f0      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0x2c6>
 80075b8:	08006b25 	.word	0x08006b25
 80075bc:	08006b97 	.word	0x08006b97
 80075c0:	08006d73 	.word	0x08006d73
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	00010007 	.word	0x00010007

080075d0 <HAL_TIM_PWM_Stop_DMA>:
{
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
  switch (Channel)
 80075d6:	290c      	cmp	r1, #12
 80075d8:	f200 808b 	bhi.w	80076f2 <HAL_TIM_PWM_Stop_DMA+0x122>
 80075dc:	e8df f001 	tbb	[pc, r1]
 80075e0:	89898907 	.word	0x89898907
 80075e4:	8989893a 	.word	0x8989893a
 80075e8:	89898943 	.word	0x89898943
 80075ec:	4c          	.byte	0x4c
 80075ed:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80075ee:	6802      	ldr	r2, [r0, #0]
 80075f0:	68d3      	ldr	r3, [r2, #12]
 80075f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80075f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80075fa:	f7fd fefa 	bl	80053f2 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075fe:	2200      	movs	r2, #0
 8007600:	4621      	mov	r1, r4
 8007602:	6828      	ldr	r0, [r5, #0]
 8007604:	f7ff fd99 	bl	800713a <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	4a3b      	ldr	r2, [pc, #236]	; (80076f8 <HAL_TIM_PWM_Stop_DMA+0x128>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d03c      	beq.n	800768a <HAL_TIM_PWM_Stop_DMA+0xba>
 8007610:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8007614:	4293      	cmp	r3, r2
 8007616:	d038      	beq.n	800768a <HAL_TIM_PWM_Stop_DMA+0xba>
 8007618:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800761c:	4293      	cmp	r3, r2
 800761e:	d034      	beq.n	800768a <HAL_TIM_PWM_Stop_DMA+0xba>
 8007620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007624:	4293      	cmp	r3, r2
 8007626:	d030      	beq.n	800768a <HAL_TIM_PWM_Stop_DMA+0xba>
    __HAL_TIM_DISABLE(htim);
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	6a19      	ldr	r1, [r3, #32]
 800762c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007630:	4211      	tst	r1, r2
 8007632:	d108      	bne.n	8007646 <HAL_TIM_PWM_Stop_DMA+0x76>
 8007634:	6a19      	ldr	r1, [r3, #32]
 8007636:	f240 4244 	movw	r2, #1092	; 0x444
 800763a:	4211      	tst	r1, r2
 800763c:	d103      	bne.n	8007646 <HAL_TIM_PWM_Stop_DMA+0x76>
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	f022 0201 	bic.w	r2, r2, #1
 8007644:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007646:	2c00      	cmp	r4, #0
 8007648:	d12e      	bne.n	80076a8 <HAL_TIM_PWM_Stop_DMA+0xd8>
 800764a:	2301      	movs	r3, #1
 800764c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8007650:	2000      	movs	r0, #0
 8007652:	e04f      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x124>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007654:	6802      	ldr	r2, [r0, #0]
 8007656:	68d3      	ldr	r3, [r2, #12]
 8007658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800765c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800765e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007660:	f7fd fec7 	bl	80053f2 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8007664:	e7cb      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007666:	6802      	ldr	r2, [r0, #0]
 8007668:	68d3      	ldr	r3, [r2, #12]
 800766a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800766e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007670:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007672:	f7fd febe 	bl	80053f2 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8007676:	e7c2      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007678:	6802      	ldr	r2, [r0, #0]
 800767a:	68d3      	ldr	r3, [r2, #12]
 800767c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007680:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007682:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007684:	f7fd feb5 	bl	80053f2 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8007688:	e7b9      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0x2e>
      __HAL_TIM_MOE_DISABLE(htim);
 800768a:	6a19      	ldr	r1, [r3, #32]
 800768c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007690:	4211      	tst	r1, r2
 8007692:	d1c9      	bne.n	8007628 <HAL_TIM_PWM_Stop_DMA+0x58>
 8007694:	6a19      	ldr	r1, [r3, #32]
 8007696:	f240 4244 	movw	r2, #1092	; 0x444
 800769a:	4211      	tst	r1, r2
 800769c:	d1c4      	bne.n	8007628 <HAL_TIM_PWM_Stop_DMA+0x58>
 800769e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076a4:	645a      	str	r2, [r3, #68]	; 0x44
 80076a6:	e7bf      	b.n	8007628 <HAL_TIM_PWM_Stop_DMA+0x58>
 80076a8:	3c04      	subs	r4, #4
 80076aa:	2c0c      	cmp	r4, #12
 80076ac:	d81c      	bhi.n	80076e8 <HAL_TIM_PWM_Stop_DMA+0x118>
 80076ae:	e8df f004 	tbb	[pc, r4]
 80076b2:	1b07      	.short	0x1b07
 80076b4:	1b0c1b1b 	.word	0x1b0c1b1b
 80076b8:	1b111b1b 	.word	0x1b111b1b
 80076bc:	1b1b      	.short	0x1b1b
 80076be:	16          	.byte	0x16
 80076bf:	00          	.byte	0x00
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	2301      	movs	r3, #1
 80076c2:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 80076c6:	2000      	movs	r0, #0
 80076c8:	e014      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x124>
 80076ca:	2301      	movs	r3, #1
 80076cc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80076d0:	2000      	movs	r0, #0
 80076d2:	e00f      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x124>
 80076d4:	2301      	movs	r3, #1
 80076d6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 80076da:	2000      	movs	r0, #0
 80076dc:	e00a      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x124>
 80076de:	2301      	movs	r3, #1
 80076e0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 80076e4:	2000      	movs	r0, #0
 80076e6:	e005      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x124>
 80076e8:	2301      	movs	r3, #1
 80076ea:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 80076ee:	2000      	movs	r0, #0
 80076f0:	e000      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x124>
  switch (Channel)
 80076f2:	2001      	movs	r0, #1
}
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
 80076f6:	bf00      	nop
 80076f8:	40012c00 	.word	0x40012c00

080076fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8007700:	2a01      	cmp	r2, #1
 8007702:	d033      	beq.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8007704:	b430      	push	{r4, r5}
 8007706:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007708:	2201      	movs	r2, #1
 800770a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770e:	2202      	movs	r2, #2
 8007710:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007718:	6884      	ldr	r4, [r0, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800771a:	4d15      	ldr	r5, [pc, #84]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800771c:	42a8      	cmp	r0, r5
 800771e:	d020      	beq.n	8007762 <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007720:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007724:	680d      	ldr	r5, [r1, #0]
 8007726:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007728:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	4810      	ldr	r0, [pc, #64]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800772e:	4282      	cmp	r2, r0
 8007730:	d00a      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007732:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007736:	d007      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007738:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800773c:	4282      	cmp	r2, r0
 800773e:	d003      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007740:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 8007744:	4282      	cmp	r2, r0
 8007746:	d104      	bne.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007748:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800774c:	6889      	ldr	r1, [r1, #8]
 800774e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007750:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007758:	2000      	movs	r0, #0
 800775a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800775e:	bc30      	pop	{r4, r5}
 8007760:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007766:	684d      	ldr	r5, [r1, #4]
 8007768:	432a      	orrs	r2, r5
 800776a:	e7d9      	b.n	8007720 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 800776c:	2002      	movs	r0, #2
}
 800776e:	4770      	bx	lr
 8007770:	40012c00 	.word	0x40012c00

08007774 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007774:	4770      	bx	lr

08007776 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007776:	4770      	bx	lr

08007778 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007778:	4770      	bx	lr

0800777a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	e852 3f00 	ldrex	r3, [r2]
 8007780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	e842 3100 	strex	r1, r3, [r2]
 8007788:	2900      	cmp	r1, #0
 800778a:	d1f6      	bne.n	800777a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	f102 0308 	add.w	r3, r2, #8
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	3208      	adds	r2, #8
 800779c:	e842 3100 	strex	r1, r3, [r2]
 80077a0:	2900      	cmp	r1, #0
 80077a2:	d1f3      	bne.n	800778c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d006      	beq.n	80077b8 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077aa:	2320      	movs	r3, #32
 80077ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	2300      	movs	r3, #0
 80077b2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077b4:	6683      	str	r3, [r0, #104]	; 0x68
}
 80077b6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	e852 3f00 	ldrex	r3, [r2]
 80077be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	e842 3100 	strex	r1, r3, [r2]
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d1f6      	bne.n	80077b8 <UART_EndRxTransfer+0x3e>
 80077ca:	e7ee      	b.n	80077aa <UART_EndRxTransfer+0x30>

080077cc <UART_SetConfig>:
{
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077d0:	6801      	ldr	r1, [r0, #0]
 80077d2:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077d4:	68a3      	ldr	r3, [r4, #8]
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	6962      	ldr	r2, [r4, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	69e2      	ldr	r2, [r4, #28]
 80077e0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077e2:	4a55      	ldr	r2, [pc, #340]	; (8007938 <UART_SetConfig+0x16c>)
 80077e4:	4002      	ands	r2, r0
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	6853      	ldr	r3, [r2, #4]
 80077ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077f2:	68e1      	ldr	r1, [r4, #12]
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077fa:	6821      	ldr	r1, [r4, #0]
 80077fc:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80077fe:	6a20      	ldr	r0, [r4, #32]
 8007800:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007802:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8007806:	4313      	orrs	r3, r2
 8007808:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	4a4b      	ldr	r2, [pc, #300]	; (800793c <UART_SetConfig+0x170>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d015      	beq.n	800783e <UART_SetConfig+0x72>
 8007812:	4a4b      	ldr	r2, [pc, #300]	; (8007940 <UART_SetConfig+0x174>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d074      	beq.n	8007902 <UART_SetConfig+0x136>
 8007818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800781c:	1a9b      	subs	r3, r3, r2
 800781e:	bf18      	it	ne
 8007820:	2301      	movne	r3, #1
 8007822:	011b      	lsls	r3, r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007824:	69e0      	ldr	r0, [r4, #28]
 8007826:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800782a:	d014      	beq.n	8007856 <UART_SetConfig+0x8a>
    switch (clocksource)
 800782c:	2b08      	cmp	r3, #8
 800782e:	d84e      	bhi.n	80078ce <UART_SetConfig+0x102>
 8007830:	e8df f003 	tbb	[pc, r3]
 8007834:	4d43406b 	.word	0x4d43406b
 8007838:	4d4d4d57 	.word	0x4d4d4d57
 800783c:	3d          	.byte	0x3d
 800783d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800783e:	4b41      	ldr	r3, [pc, #260]	; (8007944 <UART_SetConfig+0x178>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	2b03      	cmp	r3, #3
 8007848:	d839      	bhi.n	80078be <UART_SetConfig+0xf2>
 800784a:	e8df f003 	tbb	[pc, r3]
 800784e:	4602      	.short	0x4602
 8007850:	544d      	.short	0x544d
 8007852:	2300      	movs	r3, #0
 8007854:	e7e6      	b.n	8007824 <UART_SetConfig+0x58>
    switch (clocksource)
 8007856:	2b08      	cmp	r3, #8
 8007858:	d833      	bhi.n	80078c2 <UART_SetConfig+0xf6>
 800785a:	e8df f003 	tbb	[pc, r3]
 800785e:	2007      	.short	0x2007
 8007860:	32233205 	.word	0x32233205
 8007864:	3232      	.short	0x3232
 8007866:	0a          	.byte	0x0a
 8007867:	00          	.byte	0x00
 8007868:	4837      	ldr	r0, [pc, #220]	; (8007948 <UART_SetConfig+0x17c>)
 800786a:	e002      	b.n	8007872 <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800786c:	f7fe ff04 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007870:	b348      	cbz	r0, 80078c6 <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007872:	6862      	ldr	r2, [r4, #4]
 8007874:	0853      	lsrs	r3, r2, #1
 8007876:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800787a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800787e:	f1a3 0110 	sub.w	r1, r3, #16
 8007882:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007886:	4291      	cmp	r1, r2
 8007888:	d81f      	bhi.n	80078ca <UART_SetConfig+0xfe>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800788a:	f023 020f 	bic.w	r2, r3, #15
 800788e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8007890:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007892:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007896:	4313      	orrs	r3, r2
 8007898:	60cb      	str	r3, [r1, #12]
 800789a:	2000      	movs	r0, #0
 800789c:	e048      	b.n	8007930 <UART_SetConfig+0x164>
        pclk = HAL_RCC_GetPCLK2Freq();
 800789e:	f7fe ff03 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
        break;
 80078a2:	e7e5      	b.n	8007870 <UART_SetConfig+0xa4>
        pclk = HAL_RCC_GetSysClockFreq();
 80078a4:	f7fe fde6 	bl	8006474 <HAL_RCC_GetSysClockFreq>
        break;
 80078a8:	e7e2      	b.n	8007870 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 80078aa:	4827      	ldr	r0, [pc, #156]	; (8007948 <UART_SetConfig+0x17c>)
 80078ac:	e7e1      	b.n	8007872 <UART_SetConfig+0xa6>
    switch (clocksource)
 80078ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80078b2:	e02e      	b.n	8007912 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe fef8 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
        break;
 80078b8:	e029      	b.n	800790e <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 80078ba:	4823      	ldr	r0, [pc, #140]	; (8007948 <UART_SetConfig+0x17c>)
 80078bc:	e029      	b.n	8007912 <UART_SetConfig+0x146>
        ret = HAL_ERROR;
 80078be:	2001      	movs	r0, #1
 80078c0:	e036      	b.n	8007930 <UART_SetConfig+0x164>
    switch (clocksource)
 80078c2:	2001      	movs	r0, #1
 80078c4:	e034      	b.n	8007930 <UART_SetConfig+0x164>
 80078c6:	2000      	movs	r0, #0
 80078c8:	e032      	b.n	8007930 <UART_SetConfig+0x164>
        ret = HAL_ERROR;
 80078ca:	2001      	movs	r0, #1
 80078cc:	e030      	b.n	8007930 <UART_SetConfig+0x164>
    switch (clocksource)
 80078ce:	2001      	movs	r0, #1
 80078d0:	e02e      	b.n	8007930 <UART_SetConfig+0x164>
 80078d2:	2000      	movs	r0, #0
 80078d4:	e02c      	b.n	8007930 <UART_SetConfig+0x164>
        ret = HAL_ERROR;
 80078d6:	2001      	movs	r0, #1
 80078d8:	e02a      	b.n	8007930 <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078da:	69e3      	ldr	r3, [r4, #28]
 80078dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e0:	d0e0      	beq.n	80078a4 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetSysClockFreq();
 80078e2:	f7fe fdc7 	bl	8006474 <HAL_RCC_GetSysClockFreq>
        break;
 80078e6:	e012      	b.n	800790e <UART_SetConfig+0x142>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078e8:	69e0      	ldr	r0, [r4, #28]
 80078ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80078ee:	d0c0      	beq.n	8007872 <UART_SetConfig+0xa6>
 80078f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80078f4:	e00d      	b.n	8007912 <UART_SetConfig+0x146>
 80078f6:	69e3      	ldr	r3, [r4, #28]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fc:	d0d5      	beq.n	80078aa <UART_SetConfig+0xde>
        pclk = (uint32_t) HSI_VALUE;
 80078fe:	4812      	ldr	r0, [pc, #72]	; (8007948 <UART_SetConfig+0x17c>)
 8007900:	e007      	b.n	8007912 <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007902:	69e3      	ldr	r3, [r4, #28]
 8007904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007908:	d0b0      	beq.n	800786c <UART_SetConfig+0xa0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800790a:	f7fe feb5 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800790e:	2800      	cmp	r0, #0
 8007910:	d0df      	beq.n	80078d2 <UART_SetConfig+0x106>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007912:	6863      	ldr	r3, [r4, #4]
 8007914:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007918:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791c:	f1a0 0210 	sub.w	r2, r0, #16
 8007920:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007924:	429a      	cmp	r2, r3
 8007926:	d8d6      	bhi.n	80078d6 <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	b280      	uxth	r0, r0
 800792c:	60d8      	str	r0, [r3, #12]
 800792e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8007934:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8007936:	bd10      	pop	{r4, pc}
 8007938:	efff69f3 	.word	0xefff69f3
 800793c:	40013800 	.word	0x40013800
 8007940:	40004400 	.word	0x40004400
 8007944:	40021000 	.word	0x40021000
 8007948:	007a1200 	.word	0x007a1200

0800794c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800794c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800794e:	f013 0f01 	tst.w	r3, #1
 8007952:	d006      	beq.n	8007962 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007954:	6802      	ldr	r2, [r0, #0]
 8007956:	6853      	ldr	r3, [r2, #4]
 8007958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800795c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800795e:	430b      	orrs	r3, r1
 8007960:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007962:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007964:	f013 0f02 	tst.w	r3, #2
 8007968:	d006      	beq.n	8007978 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800796a:	6802      	ldr	r2, [r0, #0]
 800796c:	6853      	ldr	r3, [r2, #4]
 800796e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007972:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007974:	430b      	orrs	r3, r1
 8007976:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007978:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800797a:	f013 0f04 	tst.w	r3, #4
 800797e:	d006      	beq.n	800798e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007980:	6802      	ldr	r2, [r0, #0]
 8007982:	6853      	ldr	r3, [r2, #4]
 8007984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007988:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800798a:	430b      	orrs	r3, r1
 800798c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800798e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007990:	f013 0f08 	tst.w	r3, #8
 8007994:	d006      	beq.n	80079a4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007996:	6802      	ldr	r2, [r0, #0]
 8007998:	6853      	ldr	r3, [r2, #4]
 800799a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800799e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80079a0:	430b      	orrs	r3, r1
 80079a2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079a6:	f013 0f10 	tst.w	r3, #16
 80079aa:	d006      	beq.n	80079ba <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079ac:	6802      	ldr	r2, [r0, #0]
 80079ae:	6893      	ldr	r3, [r2, #8]
 80079b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80079b6:	430b      	orrs	r3, r1
 80079b8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079bc:	f013 0f20 	tst.w	r3, #32
 80079c0:	d006      	beq.n	80079d0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079c2:	6802      	ldr	r2, [r0, #0]
 80079c4:	6893      	ldr	r3, [r2, #8]
 80079c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079d6:	d00a      	beq.n	80079ee <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d8:	6802      	ldr	r2, [r0, #0]
 80079da:	6853      	ldr	r3, [r2, #4]
 80079dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80079e2:	430b      	orrs	r3, r1
 80079e4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80079e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ec:	d00b      	beq.n	8007a06 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079f4:	d006      	beq.n	8007a04 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079f6:	6802      	ldr	r2, [r0, #0]
 80079f8:	6853      	ldr	r3, [r2, #4]
 80079fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80079fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007a00:	430b      	orrs	r3, r1
 8007a02:	6053      	str	r3, [r2, #4]
}
 8007a04:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a06:	6802      	ldr	r2, [r0, #0]
 8007a08:	6853      	ldr	r3, [r2, #4]
 8007a0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a0e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6053      	str	r3, [r2, #4]
 8007a14:	e7eb      	b.n	80079ee <UART_AdvFeatureConfig+0xa2>

08007a16 <UART_WaitOnFlagUntilTimeout>:
{
 8007a16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1a:	4680      	mov	r8, r0
 8007a1c:	460e      	mov	r6, r1
 8007a1e:	4615      	mov	r5, r2
 8007a20:	4699      	mov	r9, r3
 8007a22:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a24:	f8d8 3000 	ldr.w	r3, [r8]
 8007a28:	69dc      	ldr	r4, [r3, #28]
 8007a2a:	ea36 0404 	bics.w	r4, r6, r4
 8007a2e:	bf0c      	ite	eq
 8007a30:	2401      	moveq	r4, #1
 8007a32:	2400      	movne	r4, #0
 8007a34:	42ac      	cmp	r4, r5
 8007a36:	d131      	bne.n	8007a9c <UART_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8007a38:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007a3c:	d0f4      	beq.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a3e:	f7fc fe7f 	bl	8004740 <HAL_GetTick>
 8007a42:	eba0 0009 	sub.w	r0, r0, r9
 8007a46:	42b8      	cmp	r0, r7
 8007a48:	d82b      	bhi.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x8c>
 8007a4a:	b367      	cbz	r7, 8007aa6 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	f012 0f04 	tst.w	r2, #4
 8007a56:	d0e5      	beq.n	8007a24 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a58:	69da      	ldr	r2, [r3, #28]
 8007a5a:	f012 0f08 	tst.w	r2, #8
 8007a5e:	d111      	bne.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a60:	69da      	ldr	r2, [r3, #28]
 8007a62:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007a66:	d0dd      	beq.n	8007a24 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a6c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8007a6e:	4640      	mov	r0, r8
 8007a70:	f7ff fe83 	bl	800777a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a74:	2320      	movs	r3, #32
 8007a76:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
          return HAL_TIMEOUT;
 8007a80:	2003      	movs	r0, #3
 8007a82:	e00c      	b.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x88>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a84:	2408      	movs	r4, #8
 8007a86:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8007a88:	4640      	mov	r0, r8
 8007a8a:	f7ff fe76 	bl	800777a <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a8e:	f8c8 4084 	str.w	r4, [r8, #132]	; 0x84
           __HAL_UNLOCK(huart);
 8007a92:	2300      	movs	r3, #0
 8007a94:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
           return HAL_ERROR;
 8007a98:	2001      	movs	r0, #1
 8007a9a:	e000      	b.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x88>
  return HAL_OK;
 8007a9c:	2000      	movs	r0, #0
}
 8007a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8007aa2:	2003      	movs	r0, #3
 8007aa4:	e7fb      	b.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x88>
 8007aa6:	2003      	movs	r0, #3
 8007aa8:	e7f9      	b.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x88>

08007aaa <UART_CheckIdleState>:
{
 8007aaa:	b530      	push	{r4, r5, lr}
 8007aac:	b083      	sub	sp, #12
 8007aae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8007ab6:	f7fc fe43 	bl	8004740 <HAL_GetTick>
 8007aba:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007abc:	6822      	ldr	r2, [r4, #0]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	f012 0f08 	tst.w	r2, #8
 8007ac4:	d110      	bne.n	8007ae8 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f013 0f04 	tst.w	r3, #4
 8007ace:	d124      	bne.n	8007b1a <UART_CheckIdleState+0x70>
  huart->gState = HAL_UART_STATE_READY;
 8007ad0:	2320      	movs	r3, #32
 8007ad2:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ad4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad8:	2000      	movs	r0, #0
 8007ada:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007adc:	6660      	str	r0, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8007ae4:	b003      	add	sp, #12
 8007ae6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4603      	mov	r3, r0
 8007af0:	2200      	movs	r2, #0
 8007af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7ff ff8d 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d0e2      	beq.n	8007ac6 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	e852 3f00 	ldrex	r3, [r2]
 8007b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	e842 3100 	strex	r1, r3, [r2]
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	d1f6      	bne.n	8007b00 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8007b12:	2320      	movs	r3, #32
 8007b14:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8007b16:	2003      	movs	r0, #3
 8007b18:	e7e1      	b.n	8007ade <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	462b      	mov	r3, r5
 8007b22:	2200      	movs	r2, #0
 8007b24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff ff74 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0ce      	beq.n	8007ad0 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	e852 3f00 	ldrex	r3, [r2]
 8007b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	e842 3100 	strex	r1, r3, [r2]
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d1f6      	bne.n	8007b32 <UART_CheckIdleState+0x88>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	f102 0308 	add.w	r3, r2, #8
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	3208      	adds	r2, #8
 8007b54:	e842 3100 	strex	r1, r3, [r2]
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d1f3      	bne.n	8007b44 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8007b62:	2003      	movs	r0, #3
 8007b64:	e7bb      	b.n	8007ade <UART_CheckIdleState+0x34>

08007b66 <HAL_UART_Init>:
  if (huart == NULL)
 8007b66:	b368      	cbz	r0, 8007bc4 <HAL_UART_Init+0x5e>
{
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b6c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007b6e:	b303      	cbz	r3, 8007bb2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007b70:	2324      	movs	r3, #36	; 0x24
 8007b72:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8007b74:	6822      	ldr	r2, [r4, #0]
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f7ff fe24 	bl	80077cc <UART_SetConfig>
 8007b84:	2801      	cmp	r0, #1
 8007b86:	d013      	beq.n	8007bb0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8a:	b9bb      	cbnz	r3, 8007bbc <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	6853      	ldr	r3, [r2, #4]
 8007b90:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007b94:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	6893      	ldr	r3, [r2, #8]
 8007b9a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007b9e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	f043 0301 	orr.w	r3, r3, #1
 8007ba8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff ff7d 	bl	8007aaa <UART_CheckIdleState>
}
 8007bb0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007bb2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8007bb6:	f7f9 fe1b 	bl	80017f0 <HAL_UART_MspInit>
 8007bba:	e7d9      	b.n	8007b70 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f7ff fec5 	bl	800794c <UART_AdvFeatureConfig>
 8007bc2:	e7e3      	b.n	8007b8c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8007bc4:	2001      	movs	r0, #1
}
 8007bc6:	4770      	bx	lr

08007bc8 <SystemLib_CounterTimer_StopWatch_Automatic_compute>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

void SystemLib_CounterTimer_StopWatch_Automatic_compute ( const struct SystemLib_CounterTimer_StopWatch_Automatic * self)
{
   timeCounter_VAL = dT_VAL + timeCounter_VAL;
 8007bc8:	6803      	ldr	r3, [r0, #0]
 8007bca:	edd3 7a00 	vldr	s15, [r3]
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <SystemLib_CounterTimer_StopWatch_Automatic_compute+0x18>)
 8007bd0:	ed92 7a00 	vldr	s14, [r2]
 8007bd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bd8:	edc3 7a00 	vstr	s15, [r3]
}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000dc0 	.word	0x20000dc0

08007be4 <SystemLib_CounterTimer_StopWatch_Automatic_reset>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

void SystemLib_CounterTimer_StopWatch_Automatic_reset ( const struct SystemLib_CounterTimer_StopWatch_Automatic * self)
{
   timeCounter_VAL = 0.0F;
 8007be4:	6803      	ldr	r3, [r0, #0]
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	4770      	bx	lr

08007bec <SystemLib_CounterTimer_StopWatch_Automatic_value>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

float32 SystemLib_CounterTimer_StopWatch_Automatic_value ( const struct SystemLib_CounterTimer_StopWatch_Automatic * self)
{
   return timeCounter_VAL;
 8007bec:	6803      	ldr	r3, [r0, #0]
}
 8007bee:	ed93 0a00 	vldr	s0, [r3]
 8007bf2:	4770      	bx	lr

08007bf4 <SystemLib_CounterTimer_Timer_Automatic_begin>:
void SystemLib_CounterTimer_Timer_Automatic_begin (
               const struct SystemLib_CounterTimer_Timer_Automatic * self,
   /* IN    */ const float32                                         startTime
   )
{
   timeCounter_VAL = startTime;
 8007bf4:	6803      	ldr	r3, [r0, #0]
 8007bf6:	ed83 0a00 	vstr	s0, [r3]
}
 8007bfa:	4770      	bx	lr

08007bfc <SystemLib_CounterTimer_Timer_Automatic_compute>:
 * ---------------------------------------------------------------------------*/

void SystemLib_CounterTimer_Timer_Automatic_compute ( const struct SystemLib_CounterTimer_Timer_Automatic * self)
{
   timeCounter_VAL
      = ((timeCounter_VAL > dT_VAL) ? (timeCounter_VAL - dT_VAL) : 0.0F);
 8007bfc:	6803      	ldr	r3, [r0, #0]
 8007bfe:	edd3 7a00 	vldr	s15, [r3]
 8007c02:	4a07      	ldr	r2, [pc, #28]	; (8007c20 <SystemLib_CounterTimer_Timer_Automatic_compute+0x24>)
 8007c04:	ed92 7a00 	vldr	s14, [r2]
 8007c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c10:	bfcc      	ite	gt
 8007c12:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
 8007c16:	eddf 7a03 	vldrle	s15, [pc, #12]	; 8007c24 <SystemLib_CounterTimer_Timer_Automatic_compute+0x28>
 8007c1a:	edc3 7a00 	vstr	s15, [r3]
}
 8007c1e:	4770      	bx	lr
 8007c20:	20000dc0 	.word	0x20000dc0
 8007c24:	00000000 	.word	0x00000000

08007c28 <SystemLib_CounterTimer_Timer_Automatic_getTime>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

float32 SystemLib_CounterTimer_Timer_Automatic_getTime ( const struct SystemLib_CounterTimer_Timer_Automatic * self)
{
   return timeCounter_VAL;
 8007c28:	6803      	ldr	r3, [r0, #0]
}
 8007c2a:	ed93 0a00 	vldr	s0, [r3]
 8007c2e:	4770      	bx	lr

08007c30 <SystemLib_CounterTimer_Timer_Automatic_isElapsed>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean SystemLib_CounterTimer_Timer_Automatic_isElapsed ( const struct SystemLib_CounterTimer_Timer_Automatic * self)
{
   return timeCounter_VAL <= 0.0F;
 8007c30:	6803      	ldr	r3, [r0, #0]
 8007c32:	edd3 7a00 	vldr	s15, [r3]
 8007c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8007c3e:	bf94      	ite	ls
 8007c40:	2001      	movls	r0, #1
 8007c42:	2000      	movhi	r0, #0
 8007c44:	4770      	bx	lr

08007c46 <SystemLib_Miscellaneous_EdgeRising_Impl_compute>:
void SystemLib_Miscellaneous_EdgeRising_Impl_compute (
               const struct SystemLib_Miscellaneous_EdgeRising_Impl * self,
   /* IN    */ const uint8                                            signal
   )
{
   buffer_VAL = signal && (!oldSignal_VAL);
 8007c46:	460a      	mov	r2, r1
 8007c48:	b149      	cbz	r1, 8007c5e <SystemLib_Miscellaneous_EdgeRising_Impl_compute+0x18>
 8007c4a:	6803      	ldr	r3, [r0, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	fab3 f383 	clz	r3, r3
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	6801      	ldr	r1, [r0, #0]
 8007c56:	700b      	strb	r3, [r1, #0]
   oldSignal_VAL = signal;
 8007c58:	6803      	ldr	r3, [r0, #0]
 8007c5a:	705a      	strb	r2, [r3, #1]
}
 8007c5c:	4770      	bx	lr
   buffer_VAL = signal && (!oldSignal_VAL);
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e7f8      	b.n	8007c54 <SystemLib_Miscellaneous_EdgeRising_Impl_compute+0xe>

08007c62 <SystemLib_Miscellaneous_EdgeRising_Impl_value>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

uint8 SystemLib_Miscellaneous_EdgeRising_Impl_value ( const struct SystemLib_Miscellaneous_EdgeRising_Impl * self)
{
   return buffer_VAL;
 8007c62:	6803      	ldr	r3, [r0, #0]
}
 8007c64:	7818      	ldrb	r0, [r3, #0]
 8007c66:	4770      	bx	lr

08007c68 <Task_5ms>:
 * priority:.....................................'0'
 * period(ms):...................................'5'
 * scheduling:...................................'FULL'
 * ---------------------------------------------------------------------------*/
void Task_5ms()
{
 8007c68:	b538      	push	{r3, r4, r5, lr}
	DEF_TASK_DT_MEASURE;
 8007c6a:	4c06      	ldr	r4, [pc, #24]	; (8007c84 <Task_5ms+0x1c>)
 8007c6c:	6825      	ldr	r5, [r4, #0]
	PRE_TASK_DT_MEASURE(1.0e-6*5000);
 8007c6e:	bf00      	nop
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <Task_5ms+0x20>)
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bf00      	nop
	/* BEGIN process execution */
	model_MainClass_stm32f334r8_step();
 8007c76:	f000 fa27 	bl	80080c8 <model_MainClass_stm32f334r8_step>
	/* END process execution */
	POST_TASK_DT_MEASURE;
 8007c7a:	bf00      	nop
 8007c7c:	6025      	str	r5, [r4, #0]
 8007c7e:	bf00      	nop
}
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	20000dc0 	.word	0x20000dc0
 8007c88:	3ba3d70a 	.word	0x3ba3d70a

08007c8c <model_GameController_Automatic_gameState>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

uint8 model_GameController_Automatic_gameState ( const struct model_GameController_Automatic * self)
{
   return sm_VAL;
 8007c8c:	6843      	ldr	r3, [r0, #4]
}
 8007c8e:	7a18      	ldrb	r0, [r3, #8]
 8007c90:	4770      	bx	lr

08007c92 <model_GameController_Automatic_getTime>:
 * model name:...................................'getTime'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

float32 model_GameController_Automatic_getTime ( const struct model_GameController_Automatic * self)
{
 8007c92:	b510      	push	{r4, lr}
 8007c94:	4604      	mov	r4, r0
   /* temp. variables */
   float32 _t1real32;

   _t1real32 = SystemLib_CounterTimer_Timer_Automatic_getTime(timer_REF);
 8007c96:	3010      	adds	r0, #16
 8007c98:	f7ff ffc6 	bl	8007c28 <SystemLib_CounterTimer_Timer_Automatic_getTime>
   return ((gameTime_VAL == 0.0F) ? _t1real32 : (_t1real32 / gameTime_VAL));
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	edd3 7a00 	vldr	s15, [r3]
 8007ca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007caa:	bf1c      	itt	ne
 8007cac:	edd3 7a00 	vldrne	s15, [r3]
 8007cb0:	ee80 0a27 	vdivne.f32	s0, s0, s15
}
 8007cb4:	bd10      	pop	{r4, pc}

08007cb6 <model_GameController_Automatic_isCanceled>:
 * model name:...................................'isCanceled'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_GameController_Automatic_isCanceled ( const struct model_GameController_Automatic * self)
{
 8007cb6:	b538      	push	{r3, r4, r5, lr}
 8007cb8:	ed2d 8b02 	vpush	{d8}
 8007cbc:	4604      	mov	r4, r0
   if ((gameTime_VAL - SystemLib_CounterTimer_Timer_Automatic_getTime(timer_REF)) <= 2.0F)
 8007cbe:	f850 3b10 	ldr.w	r3, [r0], #16
 8007cc2:	ed93 8a00 	vldr	s16, [r3]
 8007cc6:	f7ff ffaf 	bl	8007c28 <SystemLib_CounterTimer_Timer_Automatic_getTime>
 8007cca:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007cce:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007cd2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	d803      	bhi.n	8007ce4 <model_GameController_Automatic_isCanceled+0x2e>
   {
      return false;
 8007cdc:	2000      	movs	r0, #0
   } /* end if */
   SystemLib_Miscellaneous_EdgeRising_Impl_compute(edgeDetect_REF, startGame_VAL);
   return SystemLib_Miscellaneous_EdgeRising_Impl_value(edgeDetect_REF);
}
 8007cde:	ecbd 8b02 	vpop	{d8}
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
   SystemLib_Miscellaneous_EdgeRising_Impl_compute(edgeDetect_REF, startGame_VAL);
 8007ce4:	f104 0508 	add.w	r5, r4, #8
 8007ce8:	6863      	ldr	r3, [r4, #4]
 8007cea:	7a59      	ldrb	r1, [r3, #9]
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7ff ffaa 	bl	8007c46 <SystemLib_Miscellaneous_EdgeRising_Impl_compute>
   return SystemLib_Miscellaneous_EdgeRising_Impl_value(edgeDetect_REF);
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f7ff ffb5 	bl	8007c62 <SystemLib_Miscellaneous_EdgeRising_Impl_value>
 8007cf8:	e7f1      	b.n	8007cde <model_GameController_Automatic_isCanceled+0x28>

08007cfa <model_GameController_Automatic_isInScoringZone>:
boolean model_GameController_Automatic_isInScoringZone ( const struct model_GameController_Automatic * self)
{
   /* temp. variables */
   float32 _t1real32;

   _t1real32 = ballPosition_VAL - 0.5F;
 8007cfa:	6843      	ldr	r3, [r0, #4]
 8007cfc:	edd3 7a00 	vldr	s15, [r3]
 8007d00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
   return (((_t1real32 > 0.0F) ? _t1real32 : -_t1real32)) <= (scoringZone_VAL * 0.5F);
 8007d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	bfd8      	it	le
 8007d12:	eef1 7a67 	vnegle.f32	s15, s15
 8007d16:	6803      	ldr	r3, [r0, #0]
 8007d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8007d1c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007d20:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8007d2c:	bfac      	ite	ge
 8007d2e:	2001      	movge	r0, #1
 8007d30:	2000      	movlt	r0, #0
 8007d32:	4770      	bx	lr

08007d34 <model_GameController_Automatic_isStartGameButtonPushed>:
 * model name:...................................'isStartGameButtonPushed'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_GameController_Automatic_isStartGameButtonPushed ( const struct model_GameController_Automatic * self)
{
 8007d34:	b510      	push	{r4, lr}
   SystemLib_Miscellaneous_EdgeRising_Impl_compute(edgeDetect_REF, startGame_VAL);
 8007d36:	f100 0408 	add.w	r4, r0, #8
 8007d3a:	6843      	ldr	r3, [r0, #4]
 8007d3c:	7a59      	ldrb	r1, [r3, #9]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7ff ff81 	bl	8007c46 <SystemLib_Miscellaneous_EdgeRising_Impl_compute>
   return SystemLib_Miscellaneous_EdgeRising_Impl_value(edgeDetect_REF);
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff ff8c 	bl	8007c62 <SystemLib_Miscellaneous_EdgeRising_Impl_value>
}
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <model_GameController_Automatic_periodicTrigger>:
 * model name:...................................'periodicTrigger'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

void model_GameController_Automatic_periodicTrigger ( const struct model_GameController_Automatic * self)
{
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4604      	mov	r4, r0
   switch (sm_VAL)
 8007d50:	6843      	ldr	r3, [r0, #4]
 8007d52:	7a1b      	ldrb	r3, [r3, #8]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d016      	beq.n	8007d86 <model_GameController_Automatic_periodicTrigger+0x3a>
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d03d      	beq.n	8007dd8 <model_GameController_Automatic_periodicTrigger+0x8c>
         } /* end if */
         SystemLib_CounterTimer_Timer_Automatic_compute(timer_REF);
         break;
      case Idle:
      default:
         if (model_GameController_Automatic_isStartGameButtonPushed(self))
 8007d5c:	f7ff ffea 	bl	8007d34 <model_GameController_Automatic_isStartGameButtonPushed>
 8007d60:	b1d0      	cbz	r0, 8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>
         {
            SystemLib_CounterTimer_Timer_Automatic_begin(timer_REF, gameTime_VAL);
 8007d62:	4620      	mov	r0, r4
 8007d64:	f850 3b10 	ldr.w	r3, [r0], #16
 8007d68:	ed93 0a00 	vldr	s0, [r3]
 8007d6c:	f7ff ff42 	bl	8007bf4 <SystemLib_CounterTimer_Timer_Automatic_begin>
            SystemLib_CounterTimer_StopWatch_Automatic_reset(stopWatch_REF);
 8007d70:	f104 000c 	add.w	r0, r4, #12
 8007d74:	f7ff ff36 	bl	8007be4 <SystemLib_CounterTimer_StopWatch_Automatic_reset>
            score_VAL = 0.0F;
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
            sm_VAL = NotInScoringZone;
 8007d7e:	6863      	ldr	r3, [r4, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	721a      	strb	r2, [r3, #8]
            break;
         } /* end if */
         break;
   } /* end switch */
}
 8007d84:	e008      	b.n	8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>
         if ((SystemLib_CounterTimer_Timer_Automatic_isElapsed(timer_REF)) || (model_GameController_Automatic_isCanceled(self)))
 8007d86:	f100 0510 	add.w	r5, r0, #16
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7ff ff50 	bl	8007c30 <SystemLib_CounterTimer_Timer_Automatic_isElapsed>
 8007d90:	b118      	cbz	r0, 8007d9a <model_GameController_Automatic_periodicTrigger+0x4e>
            sm_VAL = Idle;
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	721a      	strb	r2, [r3, #8]
}
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
         if ((SystemLib_CounterTimer_Timer_Automatic_isElapsed(timer_REF)) || (model_GameController_Automatic_isCanceled(self)))
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff ff8b 	bl	8007cb6 <model_GameController_Automatic_isCanceled>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d1f6      	bne.n	8007d92 <model_GameController_Automatic_periodicTrigger+0x46>
         if (!model_GameController_Automatic_isInScoringZone(self))
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7ff ffa8 	bl	8007cfa <model_GameController_Automatic_isInScoringZone>
 8007daa:	b930      	cbnz	r0, 8007dba <model_GameController_Automatic_periodicTrigger+0x6e>
            SystemLib_CounterTimer_Timer_Automatic_compute(timer_REF);
 8007dac:	4628      	mov	r0, r5
 8007dae:	f7ff ff25 	bl	8007bfc <SystemLib_CounterTimer_Timer_Automatic_compute>
            sm_VAL = NotInScoringZone;
 8007db2:	6863      	ldr	r3, [r4, #4]
 8007db4:	2202      	movs	r2, #2
 8007db6:	721a      	strb	r2, [r3, #8]
            break;
 8007db8:	e7ee      	b.n	8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>
         SystemLib_CounterTimer_StopWatch_Automatic_compute(stopWatch_REF);
 8007dba:	f104 060c 	add.w	r6, r4, #12
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7ff ff02 	bl	8007bc8 <SystemLib_CounterTimer_StopWatch_Automatic_compute>
         score_VAL
 8007dc4:	6864      	ldr	r4, [r4, #4]
            = SystemLib_CounterTimer_StopWatch_Automatic_value(stopWatch_REF);
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7ff ff10 	bl	8007bec <SystemLib_CounterTimer_StopWatch_Automatic_value>
 8007dcc:	ed84 0a01 	vstr	s0, [r4, #4]
         SystemLib_CounterTimer_Timer_Automatic_compute(timer_REF);
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f7ff ff13 	bl	8007bfc <SystemLib_CounterTimer_Timer_Automatic_compute>
         break;
 8007dd6:	e7df      	b.n	8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>
         if ((SystemLib_CounterTimer_Timer_Automatic_isElapsed(timer_REF)) || (model_GameController_Automatic_isCanceled(self)))
 8007dd8:	f100 0510 	add.w	r5, r0, #16
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f7ff ff27 	bl	8007c30 <SystemLib_CounterTimer_Timer_Automatic_isElapsed>
 8007de2:	b118      	cbz	r0, 8007dec <model_GameController_Automatic_periodicTrigger+0xa0>
            sm_VAL = Idle;
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	721a      	strb	r2, [r3, #8]
            break;
 8007dea:	e7d5      	b.n	8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>
         if ((SystemLib_CounterTimer_Timer_Automatic_isElapsed(timer_REF)) || (model_GameController_Automatic_isCanceled(self)))
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff ff62 	bl	8007cb6 <model_GameController_Automatic_isCanceled>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1f6      	bne.n	8007de4 <model_GameController_Automatic_periodicTrigger+0x98>
         if (model_GameController_Automatic_isInScoringZone(self))
 8007df6:	4620      	mov	r0, r4
 8007df8:	f7ff ff7f 	bl	8007cfa <model_GameController_Automatic_isInScoringZone>
 8007dfc:	b130      	cbz	r0, 8007e0c <model_GameController_Automatic_periodicTrigger+0xc0>
            SystemLib_CounterTimer_Timer_Automatic_compute(timer_REF);
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f7ff fefc 	bl	8007bfc <SystemLib_CounterTimer_Timer_Automatic_compute>
            sm_VAL = IncreaseScore;
 8007e04:	6863      	ldr	r3, [r4, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	721a      	strb	r2, [r3, #8]
            break;
 8007e0a:	e7c5      	b.n	8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>
         SystemLib_CounterTimer_Timer_Automatic_compute(timer_REF);
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f7ff fef5 	bl	8007bfc <SystemLib_CounterTimer_Timer_Automatic_compute>
         break;
 8007e12:	e7c1      	b.n	8007d98 <model_GameController_Automatic_periodicTrigger+0x4c>

08007e14 <model_LedController_stm32f334r8_fadeViolet>:
 * model name:...................................'fadeViolet'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

void model_LedController_stm32f334r8_fadeViolet ( const struct model_LedController_stm32f334r8 * self)
{
 8007e14:	b530      	push	{r4, r5, lr}
 8007e16:	b083      	sub	sp, #12
 8007e18:	4604      	mov	r4, r0
   /* user defined local variables */
   uint8 i;
   /* temp. variables */
   float32 _t1real32;

   SystemLib_CounterTimer_StopWatch_Automatic_compute(sw_REF);
 8007e1a:	1d05      	adds	r5, r0, #4
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f7ff fed3 	bl	8007bc8 <SystemLib_CounterTimer_StopWatch_Automatic_compute>
   if (SystemLib_CounterTimer_StopWatch_Automatic_value(sw_REF) <= 2.0F)
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff fee2 	bl	8007bec <SystemLib_CounterTimer_StopWatch_Automatic_value>
 8007e28:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007e2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e34:	d816      	bhi.n	8007e64 <model_LedController_stm32f334r8_fadeViolet+0x50>
   {
      fadeValue_VAL
         = (SystemLib_CounterTimer_StopWatch_Automatic_value(sw_REF) + 0.2F) / 2.2F;
 8007e36:	4628      	mov	r0, r5
 8007e38:	f7ff fed8 	bl	8007bec <SystemLib_CounterTimer_StopWatch_Automatic_value>
      fadeValue_VAL
 8007e3c:	6823      	ldr	r3, [r4, #0]
         = (SystemLib_CounterTimer_StopWatch_Automatic_value(sw_REF) + 0.2F) / 2.2F;
 8007e3e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007f04 <model_LedController_stm32f334r8_fadeViolet+0xf0>
 8007e42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007e46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007f08 <model_LedController_stm32f334r8_fadeViolet+0xf4>
 8007e4a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8007e4e:	edc3 7a00 	vstr	s15, [r3]
{
 8007e52:	2300      	movs	r3, #0
         SystemLib_CounterTimer_StopWatch_Automatic_reset(sw_REF);
      } /* end if */
   } /* end if */
   for (i = 0U;i <= 11U;++i)
   {
      _t1real32 = fadeValue_VAL * 255.0F;
 8007e54:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007f0c <model_LedController_stm32f334r8_fadeViolet+0xf8>
      _t1real32
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8007e58:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
      _t1real32
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? _t1real32 : 255.0F)) : 0.0F);
 8007e5c:	f04f 0e00 	mov.w	lr, #0
      ledRing_VAL[i].red = (uint8)_t1real32;
      ledRing_VAL[i].green = 0U;
 8007e60:	4618      	mov	r0, r3
 8007e62:	e031      	b.n	8007ec8 <model_LedController_stm32f334r8_fadeViolet+0xb4>
      if (SystemLib_CounterTimer_StopWatch_Automatic_value(sw_REF) <= 4.0F)
 8007e64:	4628      	mov	r0, r5
 8007e66:	f7ff fec1 	bl	8007bec <SystemLib_CounterTimer_StopWatch_Automatic_value>
 8007e6a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8007e6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e76:	d80e      	bhi.n	8007e96 <model_LedController_stm32f334r8_fadeViolet+0x82>
            = (4.2F - SystemLib_CounterTimer_StopWatch_Automatic_value(sw_REF)) / 2.2F;
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f7ff feb7 	bl	8007bec <SystemLib_CounterTimer_StopWatch_Automatic_value>
         fadeValue_VAL
 8007e7e:	6823      	ldr	r3, [r4, #0]
            = (4.2F - SystemLib_CounterTimer_StopWatch_Automatic_value(sw_REF)) / 2.2F;
 8007e80:	eddf 7a23 	vldr	s15, [pc, #140]	; 8007f10 <model_LedController_stm32f334r8_fadeViolet+0xfc>
 8007e84:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e88:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007f08 <model_LedController_stm32f334r8_fadeViolet+0xf4>
 8007e8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007e90:	ed83 7a00 	vstr	s14, [r3]
 8007e94:	e7dd      	b.n	8007e52 <model_LedController_stm32f334r8_fadeViolet+0x3e>
         SystemLib_CounterTimer_StopWatch_Automatic_reset(sw_REF);
 8007e96:	4628      	mov	r0, r5
 8007e98:	f7ff fea4 	bl	8007be4 <SystemLib_CounterTimer_StopWatch_Automatic_reset>
 8007e9c:	e7d9      	b.n	8007e52 <model_LedController_stm32f334r8_fadeViolet+0x3e>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? _t1real32 : 255.0F)) : 0.0F);
 8007e9e:	ee07 ea90 	vmov	s15, lr
      ledRing_VAL[i].red = (uint8)_t1real32;
 8007ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea6:	edcd 7a01 	vstr	s15, [sp, #4]
 8007eaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007eae:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8007eb2:	4461      	add	r1, ip
 8007eb4:	730a      	strb	r2, [r1, #12]
      ledRing_VAL[i].green = 0U;
 8007eb6:	6821      	ldr	r1, [r4, #0]
 8007eb8:	4461      	add	r1, ip
 8007eba:	72c8      	strb	r0, [r1, #11]
      ledRing_VAL[i].blue = (uint8)_t1real32;
 8007ebc:	6821      	ldr	r1, [r4, #0]
 8007ebe:	4461      	add	r1, ip
 8007ec0:	728a      	strb	r2, [r1, #10]
   for (i = 0U;i <= 11U;++i)
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	2b0c      	cmp	r3, #12
 8007ec6:	d01a      	beq.n	8007efe <model_LedController_stm32f334r8_fadeViolet+0xea>
      _t1real32 = fadeValue_VAL * 255.0F;
 8007ec8:	6821      	ldr	r1, [r4, #0]
 8007eca:	edd1 7a00 	vldr	s15, [r1]
 8007ece:	ee67 7a87 	vmul.f32	s15, s15, s14
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8007ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eda:	bf4c      	ite	mi
 8007edc:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8007ee0:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? _t1real32 : 255.0F)) : 0.0F);
 8007ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eec:	dbd7      	blt.n	8007e9e <model_LedController_stm32f334r8_fadeViolet+0x8a>
 8007eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef6:	bf88      	it	hi
 8007ef8:	eef0 7a47 	vmovhi.f32	s15, s14
 8007efc:	e7d1      	b.n	8007ea2 <model_LedController_stm32f334r8_fadeViolet+0x8e>
   } /* end for */
}
 8007efe:	b003      	add	sp, #12
 8007f00:	bd30      	pop	{r4, r5, pc}
 8007f02:	bf00      	nop
 8007f04:	3e4ccccd 	.word	0x3e4ccccd
 8007f08:	400ccccd 	.word	0x400ccccd
 8007f0c:	437f0000 	.word	0x437f0000
 8007f10:	40866666 	.word	0x40866666

08007f14 <model_LedController_stm32f334r8_indicateGameTime>:
 * model name:...................................'indicateGameTime'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

void model_LedController_stm32f334r8_indicateGameTime ( const struct model_LedController_stm32f334r8 * self)
{
 8007f14:	b530      	push	{r4, r5, lr}
 8007f16:	b083      	sub	sp, #12
   float32 _t1real32;

   color.red = 0U;
   color.green = 0U;
   color.blue = 255U;
   if (gameTime_VAL <= 0.2F)
 8007f18:	6803      	ldr	r3, [r0, #0]
 8007f1a:	edd3 4a01 	vldr	s9, [r3, #4]
 8007f1e:	eddf 7a58 	vldr	s15, [pc, #352]	; 8008080 <model_LedController_stm32f334r8_indicateGameTime+0x16c>
   color.red = 0U;
 8007f22:	eef4 4ae7 	vcmpe.f32	s9, s15
 8007f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2a:	bf94      	ite	ls
 8007f2c:	23ff      	movls	r3, #255	; 0xff
 8007f2e:	2300      	movhi	r3, #0
 8007f30:	ee03 3a90 	vmov	s7, r3
 8007f34:	bf94      	ite	ls
 8007f36:	2300      	movls	r3, #0
 8007f38:	23ff      	movhi	r3, #255	; 0xff
 8007f3a:	ee04 3a10 	vmov	s8, r3
   {
      color.red = 255U;
      color.green = 0U;
      color.blue = 0U;
   } /* end if */
   mappedTime = gameTime_VAL * 12.0F;
 8007f3e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8007f42:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8007f46:	2300      	movs	r3, #0
   for (i = 0U;i <= 11U;++i)
   {
      brightness = mappedTime - (float32)i;
      if (brightness > 1.0F)
 8007f48:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
      {
         brightness = 0.0F;
      } /* end if */
      _t1real32 = (float32)color.red * brightness;
      _t1real32
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8007f4c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
         brightness = 0.0F;
 8007f50:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8008084 <model_LedController_stm32f334r8_indicateGameTime+0x170>
      ledRing_VAL[i].red
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007f54:	469e      	mov	lr, r3
 8007f56:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 8008088 <model_LedController_stm32f334r8_indicateGameTime+0x174>
 8007f5a:	24ff      	movs	r4, #255	; 0xff
      _t1real32 = (float32)color.green * brightness;
      _t1real32
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
      ledRing_VAL[i].green
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
      _t1real32 = (float32)color.blue * brightness;
 8007f5c:	eeb8 4a44 	vcvt.f32.u32	s8, s8
 8007f60:	e067      	b.n	8008032 <model_LedController_stm32f334r8_indicateGameTime+0x11e>
      if (brightness <= 0.0F)
 8007f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
         brightness = 0.0F;
 8007f6a:	bf98      	it	ls
 8007f6c:	eef0 7a45 	vmovls.f32	s15, s10
      _t1real32 = (float32)color.red * brightness;
 8007f70:	eeb8 7a63 	vcvt.f32.u32	s14, s7
 8007f74:	ee27 7a27 	vmul.f32	s14, s14, s15
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8007f78:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f80:	d567      	bpl.n	8008052 <model_LedController_stm32f334r8_indicateGameTime+0x13e>
 8007f82:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007f86:	e066      	b.n	8008056 <model_LedController_stm32f334r8_indicateGameTime+0x142>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007f88:	46f4      	mov	ip, lr
      ledRing_VAL[i].red
 8007f8a:	6801      	ldr	r1, [r0, #0]
 8007f8c:	461a      	mov	r2, r3
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007f8e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8007f92:	4429      	add	r1, r5
 8007f94:	f881 c00c 	strb.w	ip, [r1, #12]
      _t1real32 = (float32)color.green * brightness;
 8007f98:	ee27 7a85 	vmul.f32	s14, s15, s10
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8007f9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa4:	bf4c      	ite	mi
 8007fa6:	ee37 7a66 	vsubmi.f32	s14, s14, s13
 8007faa:	ee37 7a26 	vaddpl.f32	s14, s14, s13
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007fae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb6:	db0d      	blt.n	8007fd4 <model_LedController_stm32f334r8_indicateGameTime+0xc0>
 8007fb8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8007fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc0:	d82b      	bhi.n	800801a <model_LedController_stm32f334r8_indicateGameTime+0x106>
 8007fc2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007fc6:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007fca:	f89d c004 	ldrb.w	ip, [sp, #4]
 8007fce:	e002      	b.n	8007fd6 <model_LedController_stm32f334r8_indicateGameTime+0xc2>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007fd0:	46a4      	mov	ip, r4
 8007fd2:	e7da      	b.n	8007f8a <model_LedController_stm32f334r8_indicateGameTime+0x76>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007fd4:	46f4      	mov	ip, lr
      ledRing_VAL[i].green
 8007fd6:	6801      	ldr	r1, [r0, #0]
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007fd8:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8007fdc:	4429      	add	r1, r5
 8007fde:	f881 c00b 	strb.w	ip, [r1, #11]
      _t1real32 = (float32)color.blue * brightness;
 8007fe2:	ee64 7a27 	vmul.f32	s15, s8, s15
      _t1real32
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8007fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	bf4c      	ite	mi
 8007ff0:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8007ff4:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
      ledRing_VAL[i].blue
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8007ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008000:	db0d      	blt.n	800801e <model_LedController_stm32f334r8_indicateGameTime+0x10a>
 8008002:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	d835      	bhi.n	8008078 <model_LedController_stm32f334r8_indicateGameTime+0x164>
 800800c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008010:	edcd 7a01 	vstr	s15, [sp, #4]
 8008014:	f89d c004 	ldrb.w	ip, [sp, #4]
 8008018:	e002      	b.n	8008020 <model_LedController_stm32f334r8_indicateGameTime+0x10c>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 800801a:	46a4      	mov	ip, r4
 800801c:	e7db      	b.n	8007fd6 <model_LedController_stm32f334r8_indicateGameTime+0xc2>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 800801e:	46f4      	mov	ip, lr
      ledRing_VAL[i].blue
 8008020:	6801      	ldr	r1, [r0, #0]
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8008022:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008026:	4411      	add	r1, r2
 8008028:	f881 c00a 	strb.w	ip, [r1, #10]
   for (i = 0U;i <= 11U;++i)
 800802c:	3301      	adds	r3, #1
 800802e:	2b0c      	cmp	r3, #12
 8008030:	d024      	beq.n	800807c <model_LedController_stm32f334r8_indicateGameTime+0x168>
      brightness = mappedTime - (float32)i;
 8008032:	b2da      	uxtb	r2, r3
 8008034:	ee07 2a90 	vmov	s15, r2
 8008038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803c:	ee74 7ae7 	vsub.f32	s15, s9, s15
      if (brightness > 1.0F)
 8008040:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008048:	dd8b      	ble.n	8007f62 <model_LedController_stm32f334r8_indicateGameTime+0x4e>
      _t1real32 = (float32)color.red * brightness;
 800804a:	eeb8 7a63 	vcvt.f32.u32	s14, s7
         brightness = 1.0F;
 800804e:	eef0 7a65 	vmov.f32	s15, s11
         = ((_t1real32 < 0.0F) ? (_t1real32 - 0.5F) : (_t1real32 + 0.5F));
 8008052:	ee37 7a26 	vadd.f32	s14, s14, s13
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8008056:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800805a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805e:	db93      	blt.n	8007f88 <model_LedController_stm32f334r8_indicateGameTime+0x74>
 8008060:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8008064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008068:	d8b2      	bhi.n	8007fd0 <model_LedController_stm32f334r8_indicateGameTime+0xbc>
 800806a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800806e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008072:	f89d c004 	ldrb.w	ip, [sp, #4]
 8008076:	e788      	b.n	8007f8a <model_LedController_stm32f334r8_indicateGameTime+0x76>
         = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 255.0F) ? (uint8)_t1real32 : 255U)) : 0U);
 8008078:	46a4      	mov	ip, r4
 800807a:	e7d1      	b.n	8008020 <model_LedController_stm32f334r8_indicateGameTime+0x10c>
   } /* end for */
}
 800807c:	b003      	add	sp, #12
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	3e4ccccd 	.word	0x3e4ccccd
 8008084:	00000000 	.word	0x00000000
 8008088:	437f0000 	.word	0x437f0000

0800808c <model_LedController_stm32f334r8_isGameRunning>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_LedController_stm32f334r8_isGameIdle ( const struct model_LedController_stm32f334r8 * self)
{
   return gameState_VAL == 0U;
 800808c:	6803      	ldr	r3, [r0, #0]
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_LedController_stm32f334r8_isGameRunning ( const struct model_LedController_stm32f334r8 * self)
{
   return !model_LedController_stm32f334r8_isGameIdle(self);
 800808e:	7a18      	ldrb	r0, [r3, #8]
}
 8008090:	3800      	subs	r0, #0
 8008092:	bf18      	it	ne
 8008094:	2001      	movne	r0, #1
 8008096:	4770      	bx	lr

08008098 <model_LedController_stm32f334r8_periodicTrigger>:
 * model name:...................................'periodicTrigger'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

void model_LedController_stm32f334r8_periodicTrigger ( const struct model_LedController_stm32f334r8 * self)
{
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4604      	mov	r4, r0
   switch (sm_VAL)
 800809c:	6805      	ldr	r5, [r0, #0]
 800809e:	7a6b      	ldrb	r3, [r5, #9]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d005      	beq.n	80080b0 <model_LedController_stm32f334r8_periodicTrigger+0x18>
         } /* end if */
         model_LedController_stm32f334r8_indicateGameTime(self);
         break;
      case IdleFading:
      default:
         if (model_LedController_stm32f334r8_isGameRunning(self))
 80080a4:	f7ff fff2 	bl	800808c <model_LedController_stm32f334r8_isGameRunning>
 80080a8:	b148      	cbz	r0, 80080be <model_LedController_stm32f334r8_periodicTrigger+0x26>
         {
            sm_VAL = IndicateGameTime;
 80080aa:	2301      	movs	r3, #1
 80080ac:	726b      	strb	r3, [r5, #9]
            break;
         } /* end if */
         model_LedController_stm32f334r8_fadeViolet(self);
         break;
   } /* end switch */
}
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
         if (model_LedController_stm32f334r8_isGameIdle(self))
 80080b0:	7a2b      	ldrb	r3, [r5, #8]
 80080b2:	b90b      	cbnz	r3, 80080b8 <model_LedController_stm32f334r8_periodicTrigger+0x20>
            sm_VAL = IdleFading;
 80080b4:	726b      	strb	r3, [r5, #9]
            break;
 80080b6:	e7fa      	b.n	80080ae <model_LedController_stm32f334r8_periodicTrigger+0x16>
         model_LedController_stm32f334r8_indicateGameTime(self);
 80080b8:	f7ff ff2c 	bl	8007f14 <model_LedController_stm32f334r8_indicateGameTime>
         break;
 80080bc:	e7f7      	b.n	80080ae <model_LedController_stm32f334r8_periodicTrigger+0x16>
         model_LedController_stm32f334r8_fadeViolet(self);
 80080be:	4620      	mov	r0, r4
 80080c0:	f7ff fea8 	bl	8007e14 <model_LedController_stm32f334r8_fadeViolet>
}
 80080c4:	e7f3      	b.n	80080ae <model_LedController_stm32f334r8_periodicTrigger+0x16>
	...

080080c8 <model_MainClass_stm32f334r8_step>:
#define model_Signals_servoPosition__model_MainClass_stm32f334r8_step (model_Signals_servoPosition)
#define model_Signals_startGameButton__model_MainClass_stm32f334r8_step (model_Signals_startGameButton)


void model_MainClass_stm32f334r8_step (void)
{
 80080c8:	b538      	push	{r3, r4, r5, lr}
   model_MainClass_RAM.gameController.ballPosition = model_Signals_ballPosition__model_MainClass_stm32f334r8_step;
 80080ca:	4c24      	ldr	r4, [pc, #144]	; (800815c <model_MainClass_stm32f334r8_step+0x94>)
 80080cc:	4b24      	ldr	r3, [pc, #144]	; (8008160 <model_MainClass_stm32f334r8_step+0x98>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6023      	str	r3, [r4, #0]
   model_MainClass_RAM.gameController.startGame
      = model_Signals_startGameButton__model_MainClass_stm32f334r8_step;
 80080d2:	4b24      	ldr	r3, [pc, #144]	; (8008164 <model_MainClass_stm32f334r8_step+0x9c>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	7263      	strb	r3, [r4, #9]
   model_GameController_Automatic_periodicTrigger(gameController_REF);
 80080d8:	4d23      	ldr	r5, [pc, #140]	; (8008168 <model_MainClass_stm32f334r8_step+0xa0>)
 80080da:	4628      	mov	r0, r5
 80080dc:	f7ff fe36 	bl	8007d4c <model_GameController_Automatic_periodicTrigger>
   model_Signals_score__model_MainClass_stm32f334r8_step = model_MainClass_RAM.gameController.score;
 80080e0:	6862      	ldr	r2, [r4, #4]
 80080e2:	4b22      	ldr	r3, [pc, #136]	; (800816c <model_MainClass_stm32f334r8_step+0xa4>)
 80080e4:	601a      	str	r2, [r3, #0]
   model_MainClass_RAM.ledController.gameTime = model_GameController_Automatic_getTime(gameController_REF);
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff fdd3 	bl	8007c92 <model_GameController_Automatic_getTime>
 80080ec:	ed84 0a06 	vstr	s0, [r4, #24]
   model_MainClass_RAM.ledController.gameState = model_GameController_Automatic_gameState(gameController_REF);
 80080f0:	4628      	mov	r0, r5
 80080f2:	f7ff fdcb 	bl	8007c8c <model_GameController_Automatic_gameState>
 80080f6:	7720      	strb	r0, [r4, #28]
   model_LedController_stm32f334r8_periodicTrigger(ledController_REF);
 80080f8:	f105 0014 	add.w	r0, r5, #20
 80080fc:	f7ff ffcc 	bl	8008098 <model_LedController_stm32f334r8_periodicTrigger>
   memcpy(model_Signals_ledRing__model_MainClass_stm32f334r8_step , model_MainClass_RAM.ledController.ledRing , sizeof(struct model_RgbLed_stm32f334r8[12]));
 8008100:	f104 031e 	add.w	r3, r4, #30
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <model_MainClass_stm32f334r8_step+0xa8>)
 8008106:	343e      	adds	r4, #62	; 0x3e
 8008108:	f8d3 c000 	ldr.w	ip, [r3]
 800810c:	685d      	ldr	r5, [r3, #4]
 800810e:	6898      	ldr	r0, [r3, #8]
 8008110:	68d9      	ldr	r1, [r3, #12]
 8008112:	f8c2 c000 	str.w	ip, [r2]
 8008116:	6055      	str	r5, [r2, #4]
 8008118:	6090      	str	r0, [r2, #8]
 800811a:	60d1      	str	r1, [r2, #12]
 800811c:	3310      	adds	r3, #16
 800811e:	3210      	adds	r2, #16
 8008120:	42a3      	cmp	r3, r4
 8008122:	d1f1      	bne.n	8008108 <model_MainClass_stm32f334r8_step+0x40>
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6013      	str	r3, [r2, #0]
   model_MainClass_RAM.servoController.gameState = model_GameController_Automatic_gameState(gameController_REF);
 8008128:	4d0f      	ldr	r5, [pc, #60]	; (8008168 <model_MainClass_stm32f334r8_step+0xa0>)
 800812a:	4628      	mov	r0, r5
 800812c:	f7ff fdae 	bl	8007c8c <model_GameController_Automatic_gameState>
 8008130:	4c0a      	ldr	r4, [pc, #40]	; (800815c <model_MainClass_stm32f334r8_step+0x94>)
 8008132:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
   model_MainClass_RAM.servoController.ballPosition = model_Signals_ballPosition__model_MainClass_stm32f334r8_step;
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <model_MainClass_stm32f334r8_step+0x98>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	64a3      	str	r3, [r4, #72]	; 0x48
   model_MainClass_RAM.servoController.handPosition = model_Signals_handPosition__model_MainClass_stm32f334r8_step;
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <model_MainClass_stm32f334r8_step+0xac>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6523      	str	r3, [r4, #80]	; 0x50
   model_MainClass_RAM.servoController.switchMode
      = model_Signals_autoModeButton__model_MainClass_stm32f334r8_step;
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <model_MainClass_stm32f334r8_step+0xb0>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
   model_ServoController_Automatic_periodicTrigger(servoController_REF);
 800814a:	f105 001c 	add.w	r0, r5, #28
 800814e:	f000 f8a1 	bl	8008294 <model_ServoController_Automatic_periodicTrigger>
   model_Signals_servoPosition__model_MainClass_stm32f334r8_step = model_MainClass_RAM.servoController.servoPosition;
 8008152:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <model_MainClass_stm32f334r8_step+0xb4>)
 8008156:	601a      	str	r2, [r3, #0]
}
 8008158:	bd38      	pop	{r3, r4, r5, pc}
 800815a:	bf00      	nop
 800815c:	20000470 	.word	0x20000470
 8008160:	20000dc8 	.word	0x20000dc8
 8008164:	20000df8 	.word	0x20000df8
 8008168:	08008eec 	.word	0x08008eec
 800816c:	20000df4 	.word	0x20000df4
 8008170:	20000dd0 	.word	0x20000dd0
 8008174:	20000dcc 	.word	0x20000dcc
 8008178:	20000dc4 	.word	0x20000dc4
 800817c:	200004d8 	.word	0x200004d8

08008180 <model_ServoController_Automatic_autoMode>:
void model_ServoController_Automatic_autoMode ( const struct model_ServoController_Automatic * self)
{
   /* temp. variables */
   float32 _t1real32;

   error_VAL = 0.5F - ballPosition_VAL;
 8008180:	6843      	ldr	r3, [r0, #4]
 8008182:	ed93 7a00 	vldr	s14, [r3]
 8008186:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800818a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800818e:	edc3 7a01 	vstr	s15, [r3, #4]
   if (doIntegrate_VAL)
 8008192:	6843      	ldr	r3, [r0, #4]
 8008194:	7e1a      	ldrb	r2, [r3, #24]
 8008196:	b18a      	cbz	r2, 80081bc <model_ServoController_Automatic_autoMode+0x3c>
   {
      integral_VAL = (ki_VAL * error_VAL * dT_VAL) + integral_VAL;
 8008198:	6802      	ldr	r2, [r0, #0]
 800819a:	edd2 7a01 	vldr	s15, [r2, #4]
 800819e:	ed93 7a01 	vldr	s14, [r3, #4]
 80081a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081a6:	4a2e      	ldr	r2, [pc, #184]	; (8008260 <model_ServoController_Automatic_autoMode+0xe0>)
 80081a8:	ed92 7a00 	vldr	s14, [r2]
 80081ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80081b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081b8:	edc3 7a03 	vstr	s15, [r3, #12]
   } /* end if */
   doIntegrate_VAL = (servoPosition_VAL < 0.9F) && (servoPosition_VAL > 0.1F);
 80081bc:	6843      	ldr	r3, [r0, #4]
 80081be:	edd3 7a05 	vldr	s15, [r3, #20]
 80081c2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008264 <model_ServoController_Automatic_autoMode+0xe4>
 80081c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ce:	d509      	bpl.n	80081e4 <model_ServoController_Automatic_autoMode+0x64>
 80081d0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008268 <model_ServoController_Automatic_autoMode+0xe8>
 80081d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081dc:	bfcc      	ite	gt
 80081de:	2201      	movgt	r2, #1
 80081e0:	2200      	movle	r2, #0
 80081e2:	e000      	b.n	80081e6 <model_ServoController_Automatic_autoMode+0x66>
 80081e4:	2200      	movs	r2, #0
 80081e6:	761a      	strb	r2, [r3, #24]
   _t1real32 = (error_VAL - lastValue_VAL) * kd_VAL;
 80081e8:	6843      	ldr	r3, [r0, #4]
 80081ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80081ee:	6802      	ldr	r2, [r0, #0]
 80081f0:	edd2 6a00 	vldr	s13, [r2]
 80081f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80081f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80081fc:	ee27 7a26 	vmul.f32	s14, s14, s13
   _t1real32
      = (kp_VAL * error_VAL) + integral_VAL + (((dT_VAL == 0.0F) ? _t1real32 : (_t1real32 / dT_VAL))) + 0.5F;
 8008200:	edd2 6a02 	vldr	s13, [r2, #8]
 8008204:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008208:	edd3 6a03 	vldr	s13, [r3, #12]
 800820c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008210:	4a13      	ldr	r2, [pc, #76]	; (8008260 <model_ServoController_Automatic_autoMode+0xe0>)
 8008212:	edd2 6a00 	vldr	s13, [r2]
 8008216:	eef5 6a40 	vcmp.f32	s13, #0.0
 800821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821e:	bf18      	it	ne
 8008220:	ee87 7a26 	vdivne.f32	s14, s14, s13
 8008224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800822c:	ee77 7a87 	vadd.f32	s15, s15, s14
   servoPosition_VAL
      = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 1.0F) ? _t1real32 : 1.0F)) : 0.0F);
 8008230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008238:	db0e      	blt.n	8008258 <model_ServoController_Automatic_autoMode+0xd8>
 800823a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800823e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008246:	bf88      	it	hi
 8008248:	eef0 7a47 	vmovhi.f32	s15, s14
 800824c:	edc3 7a05 	vstr	s15, [r3, #20]
   lastValue_VAL = error_VAL;
 8008250:	6843      	ldr	r3, [r0, #4]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	611a      	str	r2, [r3, #16]
}
 8008256:	4770      	bx	lr
      = ((_t1real32 >= 0.0F) ? (((_t1real32 <= 1.0F) ? _t1real32 : 1.0F)) : 0.0F);
 8008258:	eddf 7a04 	vldr	s15, [pc, #16]	; 800826c <model_ServoController_Automatic_autoMode+0xec>
 800825c:	e7f6      	b.n	800824c <model_ServoController_Automatic_autoMode+0xcc>
 800825e:	bf00      	nop
 8008260:	20000dc0 	.word	0x20000dc0
 8008264:	3f666666 	.word	0x3f666666
 8008268:	3dcccccd 	.word	0x3dcccccd
 800826c:	00000000 	.word	0x00000000

08008270 <model_ServoController_Automatic_isGameRunning>:
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_ServoController_Automatic_isGameIdle ( const struct model_ServoController_Automatic * self)
{
   return gameState_VAL == 0U;
 8008270:	6843      	ldr	r3, [r0, #4]
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_ServoController_Automatic_isGameRunning ( const struct model_ServoController_Automatic * self)
{
   return !model_ServoController_Automatic_isGameIdle(self);
 8008272:	7e58      	ldrb	r0, [r3, #25]
}
 8008274:	3800      	subs	r0, #0
 8008276:	bf18      	it	ne
 8008278:	2001      	movne	r0, #1
 800827a:	4770      	bx	lr

0800827c <model_ServoController_Automatic_switchModeButtonPushed>:
 * model name:...................................'switchModeButtonPushed'
 * memory class:.................................'CODE'
 * ---------------------------------------------------------------------------*/

boolean model_ServoController_Automatic_switchModeButtonPushed ( const struct model_ServoController_Automatic * self)
{
 800827c:	b510      	push	{r4, lr}
   SystemLib_Miscellaneous_EdgeRising_Impl_compute(edgeDetect_REF, switchMode_VAL);
 800827e:	f100 0408 	add.w	r4, r0, #8
 8008282:	6843      	ldr	r3, [r0, #4]
 8008284:	7ed9      	ldrb	r1, [r3, #27]
 8008286:	4620      	mov	r0, r4
 8008288:	f7ff fcdd 	bl	8007c46 <SystemLib_Miscellaneous_EdgeRising_Impl_compute>
   return SystemLib_Miscellaneous_EdgeRising_Impl_value(edgeDetect_REF);
 800828c:	4620      	mov	r0, r4
 800828e:	f7ff fce8 	bl	8007c62 <SystemLib_Miscellaneous_EdgeRising_Impl_value>
}
 8008292:	bd10      	pop	{r4, pc}

08008294 <model_ServoController_Automatic_periodicTrigger>:
{
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4604      	mov	r4, r0
   switch (sm_VAL)
 8008298:	6845      	ldr	r5, [r0, #4]
 800829a:	7eab      	ldrb	r3, [r5, #26]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d007      	beq.n	80082b0 <model_ServoController_Automatic_periodicTrigger+0x1c>
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d01b      	beq.n	80082dc <model_ServoController_Automatic_periodicTrigger+0x48>
         if (model_ServoController_Automatic_isGameRunning(self))
 80082a4:	f7ff ffe4 	bl	8008270 <model_ServoController_Automatic_isGameRunning>
 80082a8:	b338      	cbz	r0, 80082fa <model_ServoController_Automatic_periodicTrigger+0x66>
            sm_VAL = ManualMode;
 80082aa:	2302      	movs	r3, #2
 80082ac:	76ab      	strb	r3, [r5, #26]
            break;
 80082ae:	e006      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
         if (model_ServoController_Automatic_isGameIdle(self))
 80082b0:	7e6b      	ldrb	r3, [r5, #25]
 80082b2:	b92b      	cbnz	r3, 80082c0 <model_ServoController_Automatic_periodicTrigger+0x2c>
            integral_VAL = 0.0F;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60eb      	str	r3, [r5, #12]
            sm_VAL = IdlePosition;
 80082b8:	6843      	ldr	r3, [r0, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	769a      	strb	r2, [r3, #26]
}
 80082be:	bd38      	pop	{r3, r4, r5, pc}
         if (model_ServoController_Automatic_switchModeButtonPushed(self))
 80082c0:	f7ff ffdc 	bl	800827c <model_ServoController_Automatic_switchModeButtonPushed>
 80082c4:	b130      	cbz	r0, 80082d4 <model_ServoController_Automatic_periodicTrigger+0x40>
            integral_VAL = 0.0F;
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	60da      	str	r2, [r3, #12]
            sm_VAL = ManualMode;
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	769a      	strb	r2, [r3, #26]
            break;
 80082d2:	e7f4      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
         model_ServoController_Automatic_autoMode(self);
 80082d4:	4620      	mov	r0, r4
 80082d6:	f7ff ff53 	bl	8008180 <model_ServoController_Automatic_autoMode>
         break;
 80082da:	e7f0      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
         if (model_ServoController_Automatic_isGameIdle(self))
 80082dc:	7e6b      	ldrb	r3, [r5, #25]
 80082de:	b90b      	cbnz	r3, 80082e4 <model_ServoController_Automatic_periodicTrigger+0x50>
            sm_VAL = IdlePosition;
 80082e0:	76ab      	strb	r3, [r5, #26]
            break;
 80082e2:	e7ec      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
         if (model_ServoController_Automatic_switchModeButtonPushed(self))
 80082e4:	f7ff ffca 	bl	800827c <model_ServoController_Automatic_switchModeButtonPushed>
 80082e8:	b118      	cbz	r0, 80082f2 <model_ServoController_Automatic_periodicTrigger+0x5e>
            sm_VAL = AutoMode;
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	769a      	strb	r2, [r3, #26]
            break;
 80082f0:	e7e5      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
         servoPosition_VAL = handPosition_VAL;
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	615a      	str	r2, [r3, #20]
         break;
 80082f8:	e7e1      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
         servoPosition_VAL = 0.5F;
 80082fa:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80082fe:	616b      	str	r3, [r5, #20]
}
 8008300:	e7dd      	b.n	80082be <model_ServoController_Automatic_periodicTrigger+0x2a>
	...

08008304 <std>:
 8008304:	2300      	movs	r3, #0
 8008306:	b510      	push	{r4, lr}
 8008308:	4604      	mov	r4, r0
 800830a:	e9c0 3300 	strd	r3, r3, [r0]
 800830e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008312:	6083      	str	r3, [r0, #8]
 8008314:	8181      	strh	r1, [r0, #12]
 8008316:	6643      	str	r3, [r0, #100]	; 0x64
 8008318:	81c2      	strh	r2, [r0, #14]
 800831a:	6183      	str	r3, [r0, #24]
 800831c:	4619      	mov	r1, r3
 800831e:	2208      	movs	r2, #8
 8008320:	305c      	adds	r0, #92	; 0x5c
 8008322:	f000 f9e5 	bl	80086f0 <memset>
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <std+0x58>)
 8008328:	6263      	str	r3, [r4, #36]	; 0x24
 800832a:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <std+0x5c>)
 800832c:	62a3      	str	r3, [r4, #40]	; 0x28
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <std+0x60>)
 8008330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008332:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <std+0x64>)
 8008334:	6323      	str	r3, [r4, #48]	; 0x30
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <std+0x68>)
 8008338:	6224      	str	r4, [r4, #32]
 800833a:	429c      	cmp	r4, r3
 800833c:	d006      	beq.n	800834c <std+0x48>
 800833e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008342:	4294      	cmp	r4, r2
 8008344:	d002      	beq.n	800834c <std+0x48>
 8008346:	33d0      	adds	r3, #208	; 0xd0
 8008348:	429c      	cmp	r4, r3
 800834a:	d105      	bne.n	8008358 <std+0x54>
 800834c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008354:	f000 ba44 	b.w	80087e0 <__retarget_lock_init_recursive>
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	08008541 	.word	0x08008541
 8008360:	08008563 	.word	0x08008563
 8008364:	0800859b 	.word	0x0800859b
 8008368:	080085bf 	.word	0x080085bf
 800836c:	20000dfc 	.word	0x20000dfc

08008370 <stdio_exit_handler>:
 8008370:	4a02      	ldr	r2, [pc, #8]	; (800837c <stdio_exit_handler+0xc>)
 8008372:	4903      	ldr	r1, [pc, #12]	; (8008380 <stdio_exit_handler+0x10>)
 8008374:	4803      	ldr	r0, [pc, #12]	; (8008384 <stdio_exit_handler+0x14>)
 8008376:	f000 b869 	b.w	800844c <_fwalk_sglue>
 800837a:	bf00      	nop
 800837c:	200004dc 	.word	0x200004dc
 8008380:	08008b11 	.word	0x08008b11
 8008384:	200004e8 	.word	0x200004e8

08008388 <cleanup_stdio>:
 8008388:	6841      	ldr	r1, [r0, #4]
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <cleanup_stdio+0x34>)
 800838c:	4299      	cmp	r1, r3
 800838e:	b510      	push	{r4, lr}
 8008390:	4604      	mov	r4, r0
 8008392:	d001      	beq.n	8008398 <cleanup_stdio+0x10>
 8008394:	f000 fbbc 	bl	8008b10 <_fflush_r>
 8008398:	68a1      	ldr	r1, [r4, #8]
 800839a:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <cleanup_stdio+0x38>)
 800839c:	4299      	cmp	r1, r3
 800839e:	d002      	beq.n	80083a6 <cleanup_stdio+0x1e>
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fbb5 	bl	8008b10 <_fflush_r>
 80083a6:	68e1      	ldr	r1, [r4, #12]
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <cleanup_stdio+0x3c>)
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d004      	beq.n	80083b8 <cleanup_stdio+0x30>
 80083ae:	4620      	mov	r0, r4
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b4:	f000 bbac 	b.w	8008b10 <_fflush_r>
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	bf00      	nop
 80083bc:	20000dfc 	.word	0x20000dfc
 80083c0:	20000e64 	.word	0x20000e64
 80083c4:	20000ecc 	.word	0x20000ecc

080083c8 <global_stdio_init.part.0>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <global_stdio_init.part.0+0x30>)
 80083cc:	4c0b      	ldr	r4, [pc, #44]	; (80083fc <global_stdio_init.part.0+0x34>)
 80083ce:	4a0c      	ldr	r2, [pc, #48]	; (8008400 <global_stdio_init.part.0+0x38>)
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	4620      	mov	r0, r4
 80083d4:	2200      	movs	r2, #0
 80083d6:	2104      	movs	r1, #4
 80083d8:	f7ff ff94 	bl	8008304 <std>
 80083dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80083e0:	2201      	movs	r2, #1
 80083e2:	2109      	movs	r1, #9
 80083e4:	f7ff ff8e 	bl	8008304 <std>
 80083e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80083ec:	2202      	movs	r2, #2
 80083ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f2:	2112      	movs	r1, #18
 80083f4:	f7ff bf86 	b.w	8008304 <std>
 80083f8:	20000f34 	.word	0x20000f34
 80083fc:	20000dfc 	.word	0x20000dfc
 8008400:	08008371 	.word	0x08008371

08008404 <__sfp_lock_acquire>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__sfp_lock_acquire+0x8>)
 8008406:	f000 b9ec 	b.w	80087e2 <__retarget_lock_acquire_recursive>
 800840a:	bf00      	nop
 800840c:	20000f3d 	.word	0x20000f3d

08008410 <__sfp_lock_release>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__sfp_lock_release+0x8>)
 8008412:	f000 b9e7 	b.w	80087e4 <__retarget_lock_release_recursive>
 8008416:	bf00      	nop
 8008418:	20000f3d 	.word	0x20000f3d

0800841c <__sinit>:
 800841c:	b510      	push	{r4, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	f7ff fff0 	bl	8008404 <__sfp_lock_acquire>
 8008424:	6a23      	ldr	r3, [r4, #32]
 8008426:	b11b      	cbz	r3, 8008430 <__sinit+0x14>
 8008428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800842c:	f7ff bff0 	b.w	8008410 <__sfp_lock_release>
 8008430:	4b04      	ldr	r3, [pc, #16]	; (8008444 <__sinit+0x28>)
 8008432:	6223      	str	r3, [r4, #32]
 8008434:	4b04      	ldr	r3, [pc, #16]	; (8008448 <__sinit+0x2c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f5      	bne.n	8008428 <__sinit+0xc>
 800843c:	f7ff ffc4 	bl	80083c8 <global_stdio_init.part.0>
 8008440:	e7f2      	b.n	8008428 <__sinit+0xc>
 8008442:	bf00      	nop
 8008444:	08008389 	.word	0x08008389
 8008448:	20000f34 	.word	0x20000f34

0800844c <_fwalk_sglue>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4607      	mov	r7, r0
 8008452:	4688      	mov	r8, r1
 8008454:	4614      	mov	r4, r2
 8008456:	2600      	movs	r6, #0
 8008458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800845c:	f1b9 0901 	subs.w	r9, r9, #1
 8008460:	d505      	bpl.n	800846e <_fwalk_sglue+0x22>
 8008462:	6824      	ldr	r4, [r4, #0]
 8008464:	2c00      	cmp	r4, #0
 8008466:	d1f7      	bne.n	8008458 <_fwalk_sglue+0xc>
 8008468:	4630      	mov	r0, r6
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	89ab      	ldrh	r3, [r5, #12]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d907      	bls.n	8008484 <_fwalk_sglue+0x38>
 8008474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008478:	3301      	adds	r3, #1
 800847a:	d003      	beq.n	8008484 <_fwalk_sglue+0x38>
 800847c:	4629      	mov	r1, r5
 800847e:	4638      	mov	r0, r7
 8008480:	47c0      	blx	r8
 8008482:	4306      	orrs	r6, r0
 8008484:	3568      	adds	r5, #104	; 0x68
 8008486:	e7e9      	b.n	800845c <_fwalk_sglue+0x10>

08008488 <_puts_r>:
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	6884      	ldr	r4, [r0, #8]
 800848e:	4605      	mov	r5, r0
 8008490:	460e      	mov	r6, r1
 8008492:	b90b      	cbnz	r3, 8008498 <_puts_r+0x10>
 8008494:	f7ff ffc2 	bl	800841c <__sinit>
 8008498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800849a:	07db      	lsls	r3, r3, #31
 800849c:	d405      	bmi.n	80084aa <_puts_r+0x22>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	0598      	lsls	r0, r3, #22
 80084a2:	d402      	bmi.n	80084aa <_puts_r+0x22>
 80084a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084a6:	f000 f99c 	bl	80087e2 <__retarget_lock_acquire_recursive>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	0719      	lsls	r1, r3, #28
 80084ae:	d513      	bpl.n	80084d8 <_puts_r+0x50>
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	b18b      	cbz	r3, 80084d8 <_puts_r+0x50>
 80084b4:	3e01      	subs	r6, #1
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084bc:	3b01      	subs	r3, #1
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	b9e9      	cbnz	r1, 80084fe <_puts_r+0x76>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da2e      	bge.n	8008524 <_puts_r+0x9c>
 80084c6:	4622      	mov	r2, r4
 80084c8:	210a      	movs	r1, #10
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f87b 	bl	80085c6 <__swbuf_r>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d007      	beq.n	80084e4 <_puts_r+0x5c>
 80084d4:	250a      	movs	r5, #10
 80084d6:	e007      	b.n	80084e8 <_puts_r+0x60>
 80084d8:	4621      	mov	r1, r4
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 f8b0 	bl	8008640 <__swsetup_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d0e7      	beq.n	80084b4 <_puts_r+0x2c>
 80084e4:	f04f 35ff 	mov.w	r5, #4294967295
 80084e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084ea:	07da      	lsls	r2, r3, #31
 80084ec:	d405      	bmi.n	80084fa <_puts_r+0x72>
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	059b      	lsls	r3, r3, #22
 80084f2:	d402      	bmi.n	80084fa <_puts_r+0x72>
 80084f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084f6:	f000 f975 	bl	80087e4 <__retarget_lock_release_recursive>
 80084fa:	4628      	mov	r0, r5
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	2b00      	cmp	r3, #0
 8008500:	da04      	bge.n	800850c <_puts_r+0x84>
 8008502:	69a2      	ldr	r2, [r4, #24]
 8008504:	429a      	cmp	r2, r3
 8008506:	dc06      	bgt.n	8008516 <_puts_r+0x8e>
 8008508:	290a      	cmp	r1, #10
 800850a:	d004      	beq.n	8008516 <_puts_r+0x8e>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	7019      	strb	r1, [r3, #0]
 8008514:	e7cf      	b.n	80084b6 <_puts_r+0x2e>
 8008516:	4622      	mov	r2, r4
 8008518:	4628      	mov	r0, r5
 800851a:	f000 f854 	bl	80085c6 <__swbuf_r>
 800851e:	3001      	adds	r0, #1
 8008520:	d1c9      	bne.n	80084b6 <_puts_r+0x2e>
 8008522:	e7df      	b.n	80084e4 <_puts_r+0x5c>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	250a      	movs	r5, #10
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	6022      	str	r2, [r4, #0]
 800852c:	701d      	strb	r5, [r3, #0]
 800852e:	e7db      	b.n	80084e8 <_puts_r+0x60>

08008530 <puts>:
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <puts+0xc>)
 8008532:	4601      	mov	r1, r0
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	f7ff bfa7 	b.w	8008488 <_puts_r>
 800853a:	bf00      	nop
 800853c:	20000534 	.word	0x20000534

08008540 <__sread>:
 8008540:	b510      	push	{r4, lr}
 8008542:	460c      	mov	r4, r1
 8008544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008548:	f000 f8fc 	bl	8008744 <_read_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	bfab      	itete	ge
 8008550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008552:	89a3      	ldrhlt	r3, [r4, #12]
 8008554:	181b      	addge	r3, r3, r0
 8008556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800855a:	bfac      	ite	ge
 800855c:	6563      	strge	r3, [r4, #84]	; 0x54
 800855e:	81a3      	strhlt	r3, [r4, #12]
 8008560:	bd10      	pop	{r4, pc}

08008562 <__swrite>:
 8008562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008566:	461f      	mov	r7, r3
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	05db      	lsls	r3, r3, #23
 800856c:	4605      	mov	r5, r0
 800856e:	460c      	mov	r4, r1
 8008570:	4616      	mov	r6, r2
 8008572:	d505      	bpl.n	8008580 <__swrite+0x1e>
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	2302      	movs	r3, #2
 800857a:	2200      	movs	r2, #0
 800857c:	f000 f8d0 	bl	8008720 <_lseek_r>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	4632      	mov	r2, r6
 800858e:	463b      	mov	r3, r7
 8008590:	4628      	mov	r0, r5
 8008592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	f000 b8e7 	b.w	8008768 <_write_r>

0800859a <__sseek>:
 800859a:	b510      	push	{r4, lr}
 800859c:	460c      	mov	r4, r1
 800859e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a2:	f000 f8bd 	bl	8008720 <_lseek_r>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	bf15      	itete	ne
 80085ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085b6:	81a3      	strheq	r3, [r4, #12]
 80085b8:	bf18      	it	ne
 80085ba:	81a3      	strhne	r3, [r4, #12]
 80085bc:	bd10      	pop	{r4, pc}

080085be <__sclose>:
 80085be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c2:	f000 b89d 	b.w	8008700 <_close_r>

080085c6 <__swbuf_r>:
 80085c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c8:	460e      	mov	r6, r1
 80085ca:	4614      	mov	r4, r2
 80085cc:	4605      	mov	r5, r0
 80085ce:	b118      	cbz	r0, 80085d8 <__swbuf_r+0x12>
 80085d0:	6a03      	ldr	r3, [r0, #32]
 80085d2:	b90b      	cbnz	r3, 80085d8 <__swbuf_r+0x12>
 80085d4:	f7ff ff22 	bl	800841c <__sinit>
 80085d8:	69a3      	ldr	r3, [r4, #24]
 80085da:	60a3      	str	r3, [r4, #8]
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	071a      	lsls	r2, r3, #28
 80085e0:	d525      	bpl.n	800862e <__swbuf_r+0x68>
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	b31b      	cbz	r3, 800862e <__swbuf_r+0x68>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	6922      	ldr	r2, [r4, #16]
 80085ea:	1a98      	subs	r0, r3, r2
 80085ec:	6963      	ldr	r3, [r4, #20]
 80085ee:	b2f6      	uxtb	r6, r6
 80085f0:	4283      	cmp	r3, r0
 80085f2:	4637      	mov	r7, r6
 80085f4:	dc04      	bgt.n	8008600 <__swbuf_r+0x3a>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	f000 fa89 	bl	8008b10 <_fflush_r>
 80085fe:	b9e0      	cbnz	r0, 800863a <__swbuf_r+0x74>
 8008600:	68a3      	ldr	r3, [r4, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	60a3      	str	r3, [r4, #8]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	6022      	str	r2, [r4, #0]
 800860c:	701e      	strb	r6, [r3, #0]
 800860e:	6962      	ldr	r2, [r4, #20]
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	429a      	cmp	r2, r3
 8008614:	d004      	beq.n	8008620 <__swbuf_r+0x5a>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	07db      	lsls	r3, r3, #31
 800861a:	d506      	bpl.n	800862a <__swbuf_r+0x64>
 800861c:	2e0a      	cmp	r6, #10
 800861e:	d104      	bne.n	800862a <__swbuf_r+0x64>
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	f000 fa74 	bl	8008b10 <_fflush_r>
 8008628:	b938      	cbnz	r0, 800863a <__swbuf_r+0x74>
 800862a:	4638      	mov	r0, r7
 800862c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 f805 	bl	8008640 <__swsetup_r>
 8008636:	2800      	cmp	r0, #0
 8008638:	d0d5      	beq.n	80085e6 <__swbuf_r+0x20>
 800863a:	f04f 37ff 	mov.w	r7, #4294967295
 800863e:	e7f4      	b.n	800862a <__swbuf_r+0x64>

08008640 <__swsetup_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4b2a      	ldr	r3, [pc, #168]	; (80086ec <__swsetup_r+0xac>)
 8008644:	4605      	mov	r5, r0
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	460c      	mov	r4, r1
 800864a:	b118      	cbz	r0, 8008654 <__swsetup_r+0x14>
 800864c:	6a03      	ldr	r3, [r0, #32]
 800864e:	b90b      	cbnz	r3, 8008654 <__swsetup_r+0x14>
 8008650:	f7ff fee4 	bl	800841c <__sinit>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800865a:	0718      	lsls	r0, r3, #28
 800865c:	d422      	bmi.n	80086a4 <__swsetup_r+0x64>
 800865e:	06d9      	lsls	r1, r3, #27
 8008660:	d407      	bmi.n	8008672 <__swsetup_r+0x32>
 8008662:	2309      	movs	r3, #9
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e034      	b.n	80086dc <__swsetup_r+0x9c>
 8008672:	0758      	lsls	r0, r3, #29
 8008674:	d512      	bpl.n	800869c <__swsetup_r+0x5c>
 8008676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008678:	b141      	cbz	r1, 800868c <__swsetup_r+0x4c>
 800867a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800867e:	4299      	cmp	r1, r3
 8008680:	d002      	beq.n	8008688 <__swsetup_r+0x48>
 8008682:	4628      	mov	r0, r5
 8008684:	f000 f8c6 	bl	8008814 <_free_r>
 8008688:	2300      	movs	r3, #0
 800868a:	6363      	str	r3, [r4, #52]	; 0x34
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	2300      	movs	r3, #0
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	f043 0308 	orr.w	r3, r3, #8
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	b94b      	cbnz	r3, 80086bc <__swsetup_r+0x7c>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b2:	d003      	beq.n	80086bc <__swsetup_r+0x7c>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fa78 	bl	8008bac <__smakebuf_r>
 80086bc:	89a0      	ldrh	r0, [r4, #12]
 80086be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c2:	f010 0301 	ands.w	r3, r0, #1
 80086c6:	d00a      	beq.n	80086de <__swsetup_r+0x9e>
 80086c8:	2300      	movs	r3, #0
 80086ca:	60a3      	str	r3, [r4, #8]
 80086cc:	6963      	ldr	r3, [r4, #20]
 80086ce:	425b      	negs	r3, r3
 80086d0:	61a3      	str	r3, [r4, #24]
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	b943      	cbnz	r3, 80086e8 <__swsetup_r+0xa8>
 80086d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086da:	d1c4      	bne.n	8008666 <__swsetup_r+0x26>
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	0781      	lsls	r1, r0, #30
 80086e0:	bf58      	it	pl
 80086e2:	6963      	ldrpl	r3, [r4, #20]
 80086e4:	60a3      	str	r3, [r4, #8]
 80086e6:	e7f4      	b.n	80086d2 <__swsetup_r+0x92>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e7f7      	b.n	80086dc <__swsetup_r+0x9c>
 80086ec:	20000534 	.word	0x20000534

080086f0 <memset>:
 80086f0:	4402      	add	r2, r0
 80086f2:	4603      	mov	r3, r0
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d100      	bne.n	80086fa <memset+0xa>
 80086f8:	4770      	bx	lr
 80086fa:	f803 1b01 	strb.w	r1, [r3], #1
 80086fe:	e7f9      	b.n	80086f4 <memset+0x4>

08008700 <_close_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d06      	ldr	r5, [pc, #24]	; (800871c <_close_r+0x1c>)
 8008704:	2300      	movs	r3, #0
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7f9 f8da 	bl	80018c4 <_close>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_close_r+0x1a>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_close_r+0x1a>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20000f38 	.word	0x20000f38

08008720 <_lseek_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d07      	ldr	r5, [pc, #28]	; (8008740 <_lseek_r+0x20>)
 8008724:	4604      	mov	r4, r0
 8008726:	4608      	mov	r0, r1
 8008728:	4611      	mov	r1, r2
 800872a:	2200      	movs	r2, #0
 800872c:	602a      	str	r2, [r5, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f7f9 f8d2 	bl	80018d8 <_lseek>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_lseek_r+0x1e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_lseek_r+0x1e>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	20000f38 	.word	0x20000f38

08008744 <_read_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	; (8008764 <_read_r+0x20>)
 8008748:	4604      	mov	r4, r0
 800874a:	4608      	mov	r0, r1
 800874c:	4611      	mov	r1, r2
 800874e:	2200      	movs	r2, #0
 8008750:	602a      	str	r2, [r5, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	f7f9 f89c 	bl	8001890 <_read>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_read_r+0x1e>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_read_r+0x1e>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	20000f38 	.word	0x20000f38

08008768 <_write_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_write_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7f9 f897 	bl	80018aa <_write>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_write_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_write_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20000f38 	.word	0x20000f38

0800878c <__errno>:
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <__errno+0x8>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000534 	.word	0x20000534

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	4d0d      	ldr	r5, [pc, #52]	; (80087d0 <__libc_init_array+0x38>)
 800879c:	4c0d      	ldr	r4, [pc, #52]	; (80087d4 <__libc_init_array+0x3c>)
 800879e:	1b64      	subs	r4, r4, r5
 80087a0:	10a4      	asrs	r4, r4, #2
 80087a2:	2600      	movs	r6, #0
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	4d0b      	ldr	r5, [pc, #44]	; (80087d8 <__libc_init_array+0x40>)
 80087aa:	4c0c      	ldr	r4, [pc, #48]	; (80087dc <__libc_init_array+0x44>)
 80087ac:	f000 fa6c 	bl	8008c88 <_init>
 80087b0:	1b64      	subs	r4, r4, r5
 80087b2:	10a4      	asrs	r4, r4, #2
 80087b4:	2600      	movs	r6, #0
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	08008f14 	.word	0x08008f14
 80087d4:	08008f14 	.word	0x08008f14
 80087d8:	08008f14 	.word	0x08008f14
 80087dc:	08008f18 	.word	0x08008f18

080087e0 <__retarget_lock_init_recursive>:
 80087e0:	4770      	bx	lr

080087e2 <__retarget_lock_acquire_recursive>:
 80087e2:	4770      	bx	lr

080087e4 <__retarget_lock_release_recursive>:
 80087e4:	4770      	bx	lr

080087e6 <strcpy>:
 80087e6:	4603      	mov	r3, r0
 80087e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ec:	f803 2b01 	strb.w	r2, [r3], #1
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	d1f9      	bne.n	80087e8 <strcpy+0x2>
 80087f4:	4770      	bx	lr

080087f6 <memcpy>:
 80087f6:	440a      	add	r2, r1
 80087f8:	4291      	cmp	r1, r2
 80087fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80087fe:	d100      	bne.n	8008802 <memcpy+0xc>
 8008800:	4770      	bx	lr
 8008802:	b510      	push	{r4, lr}
 8008804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880c:	4291      	cmp	r1, r2
 800880e:	d1f9      	bne.n	8008804 <memcpy+0xe>
 8008810:	bd10      	pop	{r4, pc}
	...

08008814 <_free_r>:
 8008814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008816:	2900      	cmp	r1, #0
 8008818:	d044      	beq.n	80088a4 <_free_r+0x90>
 800881a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881e:	9001      	str	r0, [sp, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f1a1 0404 	sub.w	r4, r1, #4
 8008826:	bfb8      	it	lt
 8008828:	18e4      	addlt	r4, r4, r3
 800882a:	f000 f8df 	bl	80089ec <__malloc_lock>
 800882e:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <_free_r+0x94>)
 8008830:	9801      	ldr	r0, [sp, #4]
 8008832:	6813      	ldr	r3, [r2, #0]
 8008834:	b933      	cbnz	r3, 8008844 <_free_r+0x30>
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6014      	str	r4, [r2, #0]
 800883a:	b003      	add	sp, #12
 800883c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008840:	f000 b8da 	b.w	80089f8 <__malloc_unlock>
 8008844:	42a3      	cmp	r3, r4
 8008846:	d908      	bls.n	800885a <_free_r+0x46>
 8008848:	6825      	ldr	r5, [r4, #0]
 800884a:	1961      	adds	r1, r4, r5
 800884c:	428b      	cmp	r3, r1
 800884e:	bf01      	itttt	eq
 8008850:	6819      	ldreq	r1, [r3, #0]
 8008852:	685b      	ldreq	r3, [r3, #4]
 8008854:	1949      	addeq	r1, r1, r5
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	e7ed      	b.n	8008836 <_free_r+0x22>
 800885a:	461a      	mov	r2, r3
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	b10b      	cbz	r3, 8008864 <_free_r+0x50>
 8008860:	42a3      	cmp	r3, r4
 8008862:	d9fa      	bls.n	800885a <_free_r+0x46>
 8008864:	6811      	ldr	r1, [r2, #0]
 8008866:	1855      	adds	r5, r2, r1
 8008868:	42a5      	cmp	r5, r4
 800886a:	d10b      	bne.n	8008884 <_free_r+0x70>
 800886c:	6824      	ldr	r4, [r4, #0]
 800886e:	4421      	add	r1, r4
 8008870:	1854      	adds	r4, r2, r1
 8008872:	42a3      	cmp	r3, r4
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	d1e0      	bne.n	800883a <_free_r+0x26>
 8008878:	681c      	ldr	r4, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	6053      	str	r3, [r2, #4]
 800887e:	440c      	add	r4, r1
 8008880:	6014      	str	r4, [r2, #0]
 8008882:	e7da      	b.n	800883a <_free_r+0x26>
 8008884:	d902      	bls.n	800888c <_free_r+0x78>
 8008886:	230c      	movs	r3, #12
 8008888:	6003      	str	r3, [r0, #0]
 800888a:	e7d6      	b.n	800883a <_free_r+0x26>
 800888c:	6825      	ldr	r5, [r4, #0]
 800888e:	1961      	adds	r1, r4, r5
 8008890:	428b      	cmp	r3, r1
 8008892:	bf04      	itt	eq
 8008894:	6819      	ldreq	r1, [r3, #0]
 8008896:	685b      	ldreq	r3, [r3, #4]
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	bf04      	itt	eq
 800889c:	1949      	addeq	r1, r1, r5
 800889e:	6021      	streq	r1, [r4, #0]
 80088a0:	6054      	str	r4, [r2, #4]
 80088a2:	e7ca      	b.n	800883a <_free_r+0x26>
 80088a4:	b003      	add	sp, #12
 80088a6:	bd30      	pop	{r4, r5, pc}
 80088a8:	20000f40 	.word	0x20000f40

080088ac <sbrk_aligned>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4e0e      	ldr	r6, [pc, #56]	; (80088e8 <sbrk_aligned+0x3c>)
 80088b0:	460c      	mov	r4, r1
 80088b2:	6831      	ldr	r1, [r6, #0]
 80088b4:	4605      	mov	r5, r0
 80088b6:	b911      	cbnz	r1, 80088be <sbrk_aligned+0x12>
 80088b8:	f000 f9d6 	bl	8008c68 <_sbrk_r>
 80088bc:	6030      	str	r0, [r6, #0]
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f9d1 	bl	8008c68 <_sbrk_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d00a      	beq.n	80088e0 <sbrk_aligned+0x34>
 80088ca:	1cc4      	adds	r4, r0, #3
 80088cc:	f024 0403 	bic.w	r4, r4, #3
 80088d0:	42a0      	cmp	r0, r4
 80088d2:	d007      	beq.n	80088e4 <sbrk_aligned+0x38>
 80088d4:	1a21      	subs	r1, r4, r0
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f9c6 	bl	8008c68 <_sbrk_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	d101      	bne.n	80088e4 <sbrk_aligned+0x38>
 80088e0:	f04f 34ff 	mov.w	r4, #4294967295
 80088e4:	4620      	mov	r0, r4
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	20000f44 	.word	0x20000f44

080088ec <_malloc_r>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	1ccd      	adds	r5, r1, #3
 80088f2:	f025 0503 	bic.w	r5, r5, #3
 80088f6:	3508      	adds	r5, #8
 80088f8:	2d0c      	cmp	r5, #12
 80088fa:	bf38      	it	cc
 80088fc:	250c      	movcc	r5, #12
 80088fe:	2d00      	cmp	r5, #0
 8008900:	4607      	mov	r7, r0
 8008902:	db01      	blt.n	8008908 <_malloc_r+0x1c>
 8008904:	42a9      	cmp	r1, r5
 8008906:	d905      	bls.n	8008914 <_malloc_r+0x28>
 8008908:	230c      	movs	r3, #12
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	2600      	movs	r6, #0
 800890e:	4630      	mov	r0, r6
 8008910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80089e8 <_malloc_r+0xfc>
 8008918:	f000 f868 	bl	80089ec <__malloc_lock>
 800891c:	f8d8 3000 	ldr.w	r3, [r8]
 8008920:	461c      	mov	r4, r3
 8008922:	bb5c      	cbnz	r4, 800897c <_malloc_r+0x90>
 8008924:	4629      	mov	r1, r5
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ffc0 	bl	80088ac <sbrk_aligned>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	4604      	mov	r4, r0
 8008930:	d155      	bne.n	80089de <_malloc_r+0xf2>
 8008932:	f8d8 4000 	ldr.w	r4, [r8]
 8008936:	4626      	mov	r6, r4
 8008938:	2e00      	cmp	r6, #0
 800893a:	d145      	bne.n	80089c8 <_malloc_r+0xdc>
 800893c:	2c00      	cmp	r4, #0
 800893e:	d048      	beq.n	80089d2 <_malloc_r+0xe6>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	4631      	mov	r1, r6
 8008944:	4638      	mov	r0, r7
 8008946:	eb04 0903 	add.w	r9, r4, r3
 800894a:	f000 f98d 	bl	8008c68 <_sbrk_r>
 800894e:	4581      	cmp	r9, r0
 8008950:	d13f      	bne.n	80089d2 <_malloc_r+0xe6>
 8008952:	6821      	ldr	r1, [r4, #0]
 8008954:	1a6d      	subs	r5, r5, r1
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa7 	bl	80088ac <sbrk_aligned>
 800895e:	3001      	adds	r0, #1
 8008960:	d037      	beq.n	80089d2 <_malloc_r+0xe6>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	442b      	add	r3, r5
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	f8d8 3000 	ldr.w	r3, [r8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d038      	beq.n	80089e2 <_malloc_r+0xf6>
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	42a2      	cmp	r2, r4
 8008974:	d12b      	bne.n	80089ce <_malloc_r+0xe2>
 8008976:	2200      	movs	r2, #0
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	e00f      	b.n	800899c <_malloc_r+0xb0>
 800897c:	6822      	ldr	r2, [r4, #0]
 800897e:	1b52      	subs	r2, r2, r5
 8008980:	d41f      	bmi.n	80089c2 <_malloc_r+0xd6>
 8008982:	2a0b      	cmp	r2, #11
 8008984:	d917      	bls.n	80089b6 <_malloc_r+0xca>
 8008986:	1961      	adds	r1, r4, r5
 8008988:	42a3      	cmp	r3, r4
 800898a:	6025      	str	r5, [r4, #0]
 800898c:	bf18      	it	ne
 800898e:	6059      	strne	r1, [r3, #4]
 8008990:	6863      	ldr	r3, [r4, #4]
 8008992:	bf08      	it	eq
 8008994:	f8c8 1000 	streq.w	r1, [r8]
 8008998:	5162      	str	r2, [r4, r5]
 800899a:	604b      	str	r3, [r1, #4]
 800899c:	4638      	mov	r0, r7
 800899e:	f104 060b 	add.w	r6, r4, #11
 80089a2:	f000 f829 	bl	80089f8 <__malloc_unlock>
 80089a6:	f026 0607 	bic.w	r6, r6, #7
 80089aa:	1d23      	adds	r3, r4, #4
 80089ac:	1af2      	subs	r2, r6, r3
 80089ae:	d0ae      	beq.n	800890e <_malloc_r+0x22>
 80089b0:	1b9b      	subs	r3, r3, r6
 80089b2:	50a3      	str	r3, [r4, r2]
 80089b4:	e7ab      	b.n	800890e <_malloc_r+0x22>
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	6862      	ldr	r2, [r4, #4]
 80089ba:	d1dd      	bne.n	8008978 <_malloc_r+0x8c>
 80089bc:	f8c8 2000 	str.w	r2, [r8]
 80089c0:	e7ec      	b.n	800899c <_malloc_r+0xb0>
 80089c2:	4623      	mov	r3, r4
 80089c4:	6864      	ldr	r4, [r4, #4]
 80089c6:	e7ac      	b.n	8008922 <_malloc_r+0x36>
 80089c8:	4634      	mov	r4, r6
 80089ca:	6876      	ldr	r6, [r6, #4]
 80089cc:	e7b4      	b.n	8008938 <_malloc_r+0x4c>
 80089ce:	4613      	mov	r3, r2
 80089d0:	e7cc      	b.n	800896c <_malloc_r+0x80>
 80089d2:	230c      	movs	r3, #12
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	4638      	mov	r0, r7
 80089d8:	f000 f80e 	bl	80089f8 <__malloc_unlock>
 80089dc:	e797      	b.n	800890e <_malloc_r+0x22>
 80089de:	6025      	str	r5, [r4, #0]
 80089e0:	e7dc      	b.n	800899c <_malloc_r+0xb0>
 80089e2:	605b      	str	r3, [r3, #4]
 80089e4:	deff      	udf	#255	; 0xff
 80089e6:	bf00      	nop
 80089e8:	20000f40 	.word	0x20000f40

080089ec <__malloc_lock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	; (80089f4 <__malloc_lock+0x8>)
 80089ee:	f7ff bef8 	b.w	80087e2 <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	20000f3c 	.word	0x20000f3c

080089f8 <__malloc_unlock>:
 80089f8:	4801      	ldr	r0, [pc, #4]	; (8008a00 <__malloc_unlock+0x8>)
 80089fa:	f7ff bef3 	b.w	80087e4 <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	20000f3c 	.word	0x20000f3c

08008a04 <__sflush_r>:
 8008a04:	898a      	ldrh	r2, [r1, #12]
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	0710      	lsls	r0, r2, #28
 8008a0e:	460c      	mov	r4, r1
 8008a10:	d458      	bmi.n	8008ac4 <__sflush_r+0xc0>
 8008a12:	684b      	ldr	r3, [r1, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc05      	bgt.n	8008a24 <__sflush_r+0x20>
 8008a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dc02      	bgt.n	8008a24 <__sflush_r+0x20>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d0f9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a30:	682f      	ldr	r7, [r5, #0]
 8008a32:	6a21      	ldr	r1, [r4, #32]
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	d032      	beq.n	8008a9e <__sflush_r+0x9a>
 8008a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	075a      	lsls	r2, r3, #29
 8008a3e:	d505      	bpl.n	8008a4c <__sflush_r+0x48>
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	1ac0      	subs	r0, r0, r3
 8008a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a46:	b10b      	cbz	r3, 8008a4c <__sflush_r+0x48>
 8008a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a4a:	1ac0      	subs	r0, r0, r3
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a52:	6a21      	ldr	r1, [r4, #32]
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	d106      	bne.n	8008a6c <__sflush_r+0x68>
 8008a5e:	6829      	ldr	r1, [r5, #0]
 8008a60:	291d      	cmp	r1, #29
 8008a62:	d82b      	bhi.n	8008abc <__sflush_r+0xb8>
 8008a64:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <__sflush_r+0x108>)
 8008a66:	410a      	asrs	r2, r1
 8008a68:	07d6      	lsls	r6, r2, #31
 8008a6a:	d427      	bmi.n	8008abc <__sflush_r+0xb8>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	6062      	str	r2, [r4, #4]
 8008a70:	04d9      	lsls	r1, r3, #19
 8008a72:	6922      	ldr	r2, [r4, #16]
 8008a74:	6022      	str	r2, [r4, #0]
 8008a76:	d504      	bpl.n	8008a82 <__sflush_r+0x7e>
 8008a78:	1c42      	adds	r2, r0, #1
 8008a7a:	d101      	bne.n	8008a80 <__sflush_r+0x7c>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b903      	cbnz	r3, 8008a82 <__sflush_r+0x7e>
 8008a80:	6560      	str	r0, [r4, #84]	; 0x54
 8008a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a84:	602f      	str	r7, [r5, #0]
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d0c9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	d002      	beq.n	8008a98 <__sflush_r+0x94>
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7ff febe 	bl	8008814 <_free_r>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	6360      	str	r0, [r4, #52]	; 0x34
 8008a9c:	e7c0      	b.n	8008a20 <__sflush_r+0x1c>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	1c41      	adds	r1, r0, #1
 8008aa6:	d1c8      	bne.n	8008a3a <__sflush_r+0x36>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c5      	beq.n	8008a3a <__sflush_r+0x36>
 8008aae:	2b1d      	cmp	r3, #29
 8008ab0:	d001      	beq.n	8008ab6 <__sflush_r+0xb2>
 8008ab2:	2b16      	cmp	r3, #22
 8008ab4:	d101      	bne.n	8008aba <__sflush_r+0xb6>
 8008ab6:	602f      	str	r7, [r5, #0]
 8008ab8:	e7b1      	b.n	8008a1e <__sflush_r+0x1a>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	e7ad      	b.n	8008a20 <__sflush_r+0x1c>
 8008ac4:	690f      	ldr	r7, [r1, #16]
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	d0a9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008aca:	0793      	lsls	r3, r2, #30
 8008acc:	680e      	ldr	r6, [r1, #0]
 8008ace:	bf08      	it	eq
 8008ad0:	694b      	ldreq	r3, [r1, #20]
 8008ad2:	600f      	str	r7, [r1, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	2300      	movne	r3, #0
 8008ad8:	eba6 0807 	sub.w	r8, r6, r7
 8008adc:	608b      	str	r3, [r1, #8]
 8008ade:	f1b8 0f00 	cmp.w	r8, #0
 8008ae2:	dd9c      	ble.n	8008a1e <__sflush_r+0x1a>
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ae8:	4643      	mov	r3, r8
 8008aea:	463a      	mov	r2, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b0      	blx	r6
 8008af0:	2800      	cmp	r0, #0
 8008af2:	dc06      	bgt.n	8008b02 <__sflush_r+0xfe>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	e78e      	b.n	8008a20 <__sflush_r+0x1c>
 8008b02:	4407      	add	r7, r0
 8008b04:	eba8 0800 	sub.w	r8, r8, r0
 8008b08:	e7e9      	b.n	8008ade <__sflush_r+0xda>
 8008b0a:	bf00      	nop
 8008b0c:	dfbffffe 	.word	0xdfbffffe

08008b10 <_fflush_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	b913      	cbnz	r3, 8008b20 <_fflush_r+0x10>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	b118      	cbz	r0, 8008b2a <_fflush_r+0x1a>
 8008b22:	6a03      	ldr	r3, [r0, #32]
 8008b24:	b90b      	cbnz	r3, 8008b2a <_fflush_r+0x1a>
 8008b26:	f7ff fc79 	bl	800841c <__sinit>
 8008b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0f3      	beq.n	8008b1a <_fflush_r+0xa>
 8008b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b34:	07d0      	lsls	r0, r2, #31
 8008b36:	d404      	bmi.n	8008b42 <_fflush_r+0x32>
 8008b38:	0599      	lsls	r1, r3, #22
 8008b3a:	d402      	bmi.n	8008b42 <_fflush_r+0x32>
 8008b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b3e:	f7ff fe50 	bl	80087e2 <__retarget_lock_acquire_recursive>
 8008b42:	4628      	mov	r0, r5
 8008b44:	4621      	mov	r1, r4
 8008b46:	f7ff ff5d 	bl	8008a04 <__sflush_r>
 8008b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b4c:	07da      	lsls	r2, r3, #31
 8008b4e:	4605      	mov	r5, r0
 8008b50:	d4e4      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	059b      	lsls	r3, r3, #22
 8008b56:	d4e1      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5a:	f7ff fe43 	bl	80087e4 <__retarget_lock_release_recursive>
 8008b5e:	e7dd      	b.n	8008b1c <_fflush_r+0xc>

08008b60 <__swhatbuf_r>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	b096      	sub	sp, #88	; 0x58
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	461e      	mov	r6, r3
 8008b70:	da0d      	bge.n	8008b8e <__swhatbuf_r+0x2e>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	bf0c      	ite	eq
 8008b7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b82:	2340      	movne	r3, #64	; 0x40
 8008b84:	2000      	movs	r0, #0
 8008b86:	6031      	str	r1, [r6, #0]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	b016      	add	sp, #88	; 0x58
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	466a      	mov	r2, sp
 8008b90:	f000 f848 	bl	8008c24 <_fstat_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dbec      	blt.n	8008b72 <__swhatbuf_r+0x12>
 8008b98:	9901      	ldr	r1, [sp, #4]
 8008b9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ba2:	4259      	negs	r1, r3
 8008ba4:	4159      	adcs	r1, r3
 8008ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008baa:	e7eb      	b.n	8008b84 <__swhatbuf_r+0x24>

08008bac <__smakebuf_r>:
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb0:	079d      	lsls	r5, r3, #30
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	d507      	bpl.n	8008bc8 <__smakebuf_r+0x1c>
 8008bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	ab01      	add	r3, sp, #4
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f7ff ffc8 	bl	8008b60 <__swhatbuf_r>
 8008bd0:	9900      	ldr	r1, [sp, #0]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff fe89 	bl	80088ec <_malloc_r>
 8008bda:	b948      	cbnz	r0, 8008bf0 <__smakebuf_r+0x44>
 8008bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d4ef      	bmi.n	8008bc4 <__smakebuf_r+0x18>
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	f043 0302 	orr.w	r3, r3, #2
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	e7e3      	b.n	8008bb8 <__smakebuf_r+0xc>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	6020      	str	r0, [r4, #0]
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	6163      	str	r3, [r4, #20]
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	6120      	str	r0, [r4, #16]
 8008c02:	b15b      	cbz	r3, 8008c1c <__smakebuf_r+0x70>
 8008c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f81d 	bl	8008c48 <_isatty_r>
 8008c0e:	b128      	cbz	r0, 8008c1c <__smakebuf_r+0x70>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	431d      	orrs	r5, r3
 8008c20:	81a5      	strh	r5, [r4, #12]
 8008c22:	e7cf      	b.n	8008bc4 <__smakebuf_r+0x18>

08008c24 <_fstat_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_fstat_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fe4a 	bl	80018ca <_fstat>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_fstat_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_fstat_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	20000f38 	.word	0x20000f38

08008c48 <_isatty_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	; (8008c64 <_isatty_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fe3e 	bl	80018d4 <_isatty>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_isatty_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_isatty_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000f38 	.word	0x20000f38

08008c68 <_sbrk_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	; (8008c84 <_sbrk_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f8 fe32 	bl	80018dc <_sbrk>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_sbrk_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_sbrk_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20000f38 	.word	0x20000f38

08008c88 <_init>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr

08008c94 <_fini>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr
